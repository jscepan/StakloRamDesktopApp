{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AAOA;;AACA;;AACA,UAAI,KAAJ,EAAW,CAqBV;AACD;AACA;AACA;AACA;;;UACAA,mBACA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,sCA/DA,CAgEA;AACA;;AAEA,UAAI,KAAJ,EAAW,CA+HV;AAED;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACAC,yBAAqB,8DAAO,iBAAP,EAAO,CAC5B;AACA;AACA;AACQ,oEAAK,YAAL,EAAoB,4DAAK;AAAGC,oBAAH;AAAGC;AAAH,SAAL,CAApB,CAJoB,EAKpB,4DAAK,OAAL,EAAe,4DAAK;AAAGA;AAAH,SAAL,CAAf,CALoB,EAMpB,iEAAU,YAAV,EAAyB,8DAAO,kCAAP,EAA4C,4DAAK;AAAGA,2BAAH;AAAGD;AAAH,SAAL,CAA5C,CAAzB,CANoB,EAOpB,iEAAU,sBAAV,EAAmC,8DAAO,qCAAP,EAA+C,4DAAK;AAAGA;AAAH,SAAL,CAA/C,CAAnC,CAPoB,CAAP;AAJrB;AAeA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;UACAE;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA,6CAA0CC,uDAA1C;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACAC;AACA;;AACA;;AACA;AACS,WAVT;;AAWA;AACA;AApCA;AAqCA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;iBACA;AACA;AACAA;AACA;;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACAA;AACA;;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA,aAFA,MAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA,oEAFA,CAGA;;AACA;AACA;AACA;AACA;;AACA,2DAJA,CAKA;AACA;AACA;AACA;;AACA,0GACAC,+BADA,EACA;AACAC;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;AACA;AACA;;AACA;AACA;AAAA;AAAuE,0CAAvE,CADA,CAEA;;AACA;AACA;AACA;AACA;AACAC;AAAA;AACA;AACA;AACA;AAAA;AAAA,iBAHA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;A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CC,yCAAhC;AACA;AACA;AACA;;AACA,kCAAgCA,yCAAhC;AACA;AACA;AACA;;AACA,mCAAiCA,yCAAjC;AACA;AACA;AACA;;AACA;AAAA;AAAA,WAvB+E,CAwB/E;;AACAC,sCAzB+E,CA0B/E;;AACAA,yDAAuD;AAAM;AAC7D;AACA;AACA;AACA;AAAA;AAAA,WAJuD,CAAvD,EAI4E,sDAAI,CAAJ,CAJ5E,EAKAC,SALA;AAKA;AACA;AACA;AACA;AACA;;AACA;AACS,WAXT,EA3B+E,CAuC/E;;;AACAD,yDAAuD;AAAM;AAC7D;AACA;AACA;AACA;AAAA;AAAA,WAJuD,CAAvD,EAI2E,sDAAI,CAAJ,CAJ3E,EAI+EC,SAJ/E;AAI+E;AAC/E;AACA;AACA;AACAC;;AACA;AACS,WAVT;;AAWAC;AAAA;AACA;AACA;AACA;AACA;;AACA;;AACA;;AACA;;AACA;AAAA;AAAoD,gBAApD;;AACA;AACS,WAVT;;AAWAA,sCACAC,IADA,CACkB;AAAM;AACxB;AACA;AACA;AACA;AACA,qCAAqCC,yDAArC,IAA2C,oBAA3C,IAA2C,CAA2B,uEAAcC,KAAd,CAAtE;AACS,WANS,CADlB,EAQAL,SARA;AAQA;AACA;AACA;AACA;AACA;AACAK;;AACA;AACS,WAfT;;AAgBAH;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,aAFA,MAGA;AACA;AACA;AACS,WAVT;AAWA;AACA;AACA;AACA;AACA;AACA;;;;;iBACA;AAAA;;AACA,wCADA,CAEA;;AACA,gEAA4D;AAAM;AAClE;AACA;AACA;AACA;AAAA;AAAA,aAJ4D,CAA5D,EAIgD,sDAAI,CAAJ,CAJhD,EAKAF,SALA;AAKA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA,kDAHA,CAIA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA,eAHA,EAGAK,qBAHA;AAIS,aAtBT;;AAuBA;;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AAAA;AAAsC,gBAAtC,CAAsCC,oBAAtC;;AACA;AACAC;AACA,aAFA,MAGA;AACAC;AACA;;AACA;AACAD;AACA,aAFA,MAGA;AACAC;AACA;;AACA;AAAuB,gBAAvB,CAAuBN,WAAvB,CAAuBO,cAAvB;;AACA;AAAA;AAA8B;AAA9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;AAAA;;AACA;AAAuB,gBAAvB,CAAuBH,oBAAvB,GAAuBI,KAAvB,CAAuBA,KAAvB,EAAuBC,MAAvB,CAAuBA,MAAvB;;AACA;AAAuB,gBAAvB,CAAuBT,WAAvB,CAAuBO,cAAvB;;AACA;AAAA;AAA8B;AAA9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AAAuB,gBAAvB,CAAuBP,WAAvB,CAAuBU,aAAvB,CAAuBC,OAAvB;;AACA;AAAA;AAA8B;AAA9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AAAuB,gBAAvB,CAAuBX,WAAvB,CAAuBY,gBAAvB,CAAuBD,OAAvB;;AACA;AAAA;AAA8B;AAA9B;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AAAA;AAA8B;AAA9B;AACA;;;;;;AAEA,UAAI,KAAJ,EAAW,CAwDV;AAED;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,iCAA4BvD,yDAA5B,CAA0C,eAA1C;AACA;AACA;AACA;AACA;;;AACA,4CAAuCA,yDAAvC,CAAqD,4BAArD;AACA;AACA;AACA;AACA;;;AACA,4CAAuCA,yDAAvC,CAAqD,4BAArD;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AAIA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AAIA;AACA;AACA;AACA;AACA;;;AACA;AACAyD,4CADA;AAEAC,eAAWC,yDAAX,CAFA;AAGAC;AAHA;AAKA;AACA;AACA;;UACAC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,iBALA,EAKAC,eALA,EAKAC,cALA,EAKAC,aALA,EAKAC,iBALA,EAKA;AAAA;;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAA8C1B,yCAA9C;AACA,6CAA2CA,yCAA3C;AACA,+CATA,CAUA;;AACA;AACA;AACA;AACA;;AACA;AAAA;AAAiD;AAAK;AACtD;AACA;AACA;AAAA,+CACA,sBADA,GAEA,4BAAsC,4DAAS2B,SAAT,CAAtC,CAFA;AAAA,WAHiD,CAAjD;AAMA;AACA;AACA;AACA;AACA;AACA;;;;;eACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;eACA;AACA;AACA;AACA;AACA;AACA;;;;eACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACAC;;AACA;AACA,qDAA2CA,SAA3C;AACA;AACA;;;AACA;AACA;;;AACA;AACA;;;AACA,mHAVA,CAWA;;;AACA;AACA;AACA;;AACA;AACAC;AAAA;AACA;AACA;AACA;AAAA;AAAA,aAHA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA,aAJA;AAKA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;;AACA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","names":["MatDialogConfig","dialogContainer","opacity","transform","MatDialogContainer","_angular_core__WEBPACK_IMPORTED_MODULE_2__","throwMatDialogContentAlreadyAttachedError","element","toFocus","Promise","_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__","_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_3__","_angular_common__WEBPACK_IMPORTED_MODULE_4__","type","selectors","viewQuery","_t","ctx","hostAttrs","hostVars","hostBindings","features","decls","vars","consts","template","MatDialogContainer_ng_template_0_Template","directives","styles","encapsulation","data","animation","decorators","args","_portalOutlet","selector","changeDetection","animations","host","OPEN","CLOSING","CLOSED","MatDialogRef","id","uniqueId","rxjs__WEBPACK_IMPORTED_MODULE_5__","_containerInstance","subscribe","clearTimeout","_overlayRef","pipe","_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__","event","_getPositionStrategy","position","strategy","updatePosition","width","height","addPanelClass","classes","removePanelClass","provide","deps","_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_9__","useFactory","MatDialog","_location","_defaultOptions","scrollStrategy","_parentDialog","_overlayContainer","undefined","config","dialogRef","positionStrategy","panelClass","hasBackdrop","direction","minWidth","minHeight","maxWidth","maxHeight","disposeOnNavigation","state","parent","providers","useValue","injector","componentOrTemplateRef","$implicit","updateSize","_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_12__","value","change","i","sibling","dialogs","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","token","factory","defaultOptions","MatDialogClose","getClosestDialog","inputs","dialogResult","ariaLabel","_matDialogClose","exportAs","MatDialogTitle","dialogElementUid","container","MatDialogContent","MatDialogActions","MatDialogModule","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","imports","_angular_material_core__WEBPACK_IMPORTED_MODULE_14__","exports","declarations","entryComponents"],"sources":["webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/dialog.js"],"sourcesContent":["import { Overlay, OverlayConfig, OverlayContainer, OverlayModule } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Optional, Inject, ViewChild, InjectionToken, Injector, TemplateRef, Injectable, SkipSelf, Directive, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { DOCUMENT, Location } from '@angular/common';\nimport { Subject, defer, of } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { FocusTrapFactory } from '@angular/cdk/a11y';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/dialog-config.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Possible overrides for a dialog's position.\n * @record\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/portal';\nimport * as ɵngcc3 from '@angular/cdk/overlay';\nimport * as ɵngcc4 from '@angular/common';\n\nfunction MatDialogContainer_ng_template_0_Template(rf, ctx) { }\nfunction DialogPosition() { }\nif (false) {\n    /**\n     * Override for the dialog's top position.\n     * @type {?|undefined}\n     */\n    DialogPosition.prototype.top;\n    /**\n     * Override for the dialog's bottom position.\n     * @type {?|undefined}\n     */\n    DialogPosition.prototype.bottom;\n    /**\n     * Override for the dialog's left position.\n     * @type {?|undefined}\n     */\n    DialogPosition.prototype.left;\n    /**\n     * Override for the dialog's right position.\n     * @type {?|undefined}\n     */\n    DialogPosition.prototype.right;\n}\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n * @template D\n */\nclass MatDialogConfig {\n    constructor() {\n        /**\n         * The ARIA role of the dialog element.\n         */\n        this.role = 'dialog';\n        /**\n         * Custom class for the overlay pane.\n         */\n        this.panelClass = '';\n        /**\n         * Whether the dialog has a backdrop.\n         */\n        this.hasBackdrop = true;\n        /**\n         * Custom class for the backdrop.\n         */\n        this.backdropClass = '';\n        /**\n         * Whether the user can use escape or clicking on the backdrop to close the modal.\n         */\n        this.disableClose = false;\n        /**\n         * Width of the dialog.\n         */\n        this.width = '';\n        /**\n         * Height of the dialog.\n         */\n        this.height = '';\n        /**\n         * Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw.\n         */\n        this.maxWidth = '80vw';\n        /**\n         * Data being injected into the child component.\n         */\n        this.data = null;\n        /**\n         * ID of the element that describes the dialog.\n         */\n        this.ariaDescribedBy = null;\n        /**\n         * ID of the element that labels the dialog.\n         */\n        this.ariaLabelledBy = null;\n        /**\n         * Aria label to assign to the dialog element.\n         */\n        this.ariaLabel = null;\n        /**\n         * Whether the dialog should focus the first focusable element on open.\n         */\n        this.autoFocus = true;\n        /**\n         * Whether the dialog should restore focus to the\n         * previously-focused element, after it's closed.\n         */\n        this.restoreFocus = true;\n        /**\n         * Whether the dialog should close when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.closeOnNavigation = true;\n        // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n    }\n}\nif (false) {\n    /**\n     * Where the attached component should live in Angular's *logical* component tree.\n     * This affects what is available for injection and the change detection order for the\n     * component instantiated inside of the dialog. This does not affect where the dialog\n     * content will be rendered.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.viewContainerRef;\n    /**\n     * ID for the dialog. If omitted, a unique one will be generated.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.id;\n    /**\n     * The ARIA role of the dialog element.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.role;\n    /**\n     * Custom class for the overlay pane.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.panelClass;\n    /**\n     * Whether the dialog has a backdrop.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.hasBackdrop;\n    /**\n     * Custom class for the backdrop.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.backdropClass;\n    /**\n     * Whether the user can use escape or clicking on the backdrop to close the modal.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.disableClose;\n    /**\n     * Width of the dialog.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.width;\n    /**\n     * Height of the dialog.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.height;\n    /**\n     * Min-width of the dialog. If a number is provided, assumes pixel units.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.minWidth;\n    /**\n     * Min-height of the dialog. If a number is provided, assumes pixel units.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.minHeight;\n    /**\n     * Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.maxWidth;\n    /**\n     * Max-height of the dialog. If a number is provided, assumes pixel units.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.maxHeight;\n    /**\n     * Position overrides.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.position;\n    /**\n     * Data being injected into the child component.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.data;\n    /**\n     * Layout direction for the dialog's content.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.direction;\n    /**\n     * ID of the element that describes the dialog.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.ariaDescribedBy;\n    /**\n     * ID of the element that labels the dialog.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.ariaLabelledBy;\n    /**\n     * Aria label to assign to the dialog element.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.ariaLabel;\n    /**\n     * Whether the dialog should focus the first focusable element on open.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.autoFocus;\n    /**\n     * Whether the dialog should restore focus to the\n     * previously-focused element, after it's closed.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.restoreFocus;\n    /**\n     * Scroll strategy to be used for the dialog.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.scrollStrategy;\n    /**\n     * Whether the dialog should close when the user goes backwards/forwards in history.\n     * Note that this usually doesn't include clicking on links (unless the user is using\n     * the `HashLocationStrategy`).\n     * @type {?}\n     */\n    MatDialogConfig.prototype.closeOnNavigation;\n    /**\n     * Alternate `ComponentFactoryResolver` to use when resolving the associated component.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.componentFactoryResolver;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/dialog-animations.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Animations used by MatDialog.\n * \\@docs-private\n * @type {?}\n */\nconst matDialogAnimations = {\n    /**\n     * Animation that is applied on the dialog container by defalt.\n     */\n    dialogContainer: trigger('dialogContainer', [\n        // Note: The `enter` animation transitions to `transform: none`, because for some reason\n        // specifying the transform explicitly, causes IE both to blur the dialog content and\n        // decimate the animation performance. Leaving it as `none` solves both issues.\n        state('void, exit', style({ opacity: 0, transform: 'scale(0.7)' })),\n        state('enter', style({ transform: 'none' })),\n        transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'none', opacity: 1 }))),\n        transition('* => void, * => exit', animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({ opacity: 0 }))),\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/dialog-container.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * \\@docs-private\n * @return {?}\n */\nfunction throwMatDialogContentAlreadyAttachedError() {\n    throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * \\@docs-private\n */\nclass MatDialogContainer extends BasePortalOutlet {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _focusTrapFactory\n     * @param {?} _changeDetectorRef\n     * @param {?} _document\n     * @param {?} _config\n     */\n    constructor(_elementRef, _focusTrapFactory, _changeDetectorRef, _document, _config) {\n        super();\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._config = _config;\n        /**\n         * Element that was focused before the dialog was opened. Save this to restore upon close.\n         */\n        this._elementFocusedBeforeDialogWasOpened = null;\n        /**\n         * State of the dialog animation.\n         */\n        this._state = 'enter';\n        /**\n         * Emits when an animation state changes.\n         */\n        this._animationStateChanged = new EventEmitter();\n        /**\n         * Attaches a DOM portal to the dialog container.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * \\@breaking-change 10.0.0\n         */\n        this.attachDomPortal = (/**\n         * @param {?} portal\n         * @return {?}\n         */\n        (portal) => {\n            if (this._portalOutlet.hasAttached()) {\n                throwMatDialogContentAlreadyAttachedError();\n            }\n            this._setupFocusTrap();\n            return this._portalOutlet.attachDomPortal(portal);\n        });\n        this._ariaLabelledBy = _config.ariaLabelledBy || null;\n        this._document = _document;\n    }\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @template T\n     * @param {?} portal Portal to be attached as the dialog content.\n     * @return {?}\n     */\n    attachComponentPortal(portal) {\n        if (this._portalOutlet.hasAttached()) {\n            throwMatDialogContentAlreadyAttachedError();\n        }\n        this._setupFocusTrap();\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @template C\n     * @param {?} portal Portal to be attached as the dialog content.\n     * @return {?}\n     */\n    attachTemplatePortal(portal) {\n        if (this._portalOutlet.hasAttached()) {\n            throwMatDialogContentAlreadyAttachedError();\n        }\n        this._setupFocusTrap();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /**\n     * Moves focus back into the dialog if it was moved out.\n     * @return {?}\n     */\n    _recaptureFocus() {\n        if (!this._containsFocus()) {\n            /** @type {?} */\n            const focusWasTrapped = this._focusTrap.focusInitialElement();\n            if (!focusWasTrapped) {\n                this._elementRef.nativeElement.focus();\n            }\n        }\n    }\n    /**\n     * Moves the focus inside the focus trap.\n     * @private\n     * @return {?}\n     */\n    _trapFocus() {\n        // If we were to attempt to focus immediately, then the content of the dialog would not yet be\n        // ready in instances where change detection has to run first. To deal with this, we simply\n        // wait for the microtask queue to be empty.\n        if (this._config.autoFocus) {\n            this._focusTrap.focusInitialElementWhenReady();\n        }\n        else if (!this._containsFocus()) {\n            // Otherwise ensure that focus is on the dialog container. It's possible that a different\n            // component tried to move focus while the open animation was running. See:\n            // https://github.com/angular/components/issues/16215. Note that we only want to do this\n            // if the focus isn't inside the dialog already, because it's possible that the consumer\n            // turned off `autoFocus` in order to move focus themselves.\n            this._elementRef.nativeElement.focus();\n        }\n    }\n    /**\n     * Restores focus to the element that was focused before the dialog opened.\n     * @private\n     * @return {?}\n     */\n    _restoreFocus() {\n        /** @type {?} */\n        const toFocus = this._elementFocusedBeforeDialogWasOpened;\n        // We need the extra check, because IE can set the `activeElement` to null in some cases.\n        if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n            /** @type {?} */\n            const activeElement = this._document.activeElement;\n            /** @type {?} */\n            const element = this._elementRef.nativeElement;\n            // Make sure that focus is still inside the dialog or is on the body (usually because a\n            // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n            // the consumer moved it themselves before the animation was done, in which case we shouldn't\n            // do anything.\n            if (!activeElement || activeElement === this._document.body || activeElement === element ||\n                element.contains(activeElement)) {\n                toFocus.focus();\n            }\n        }\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n    }\n    /**\n     * Sets up the focus trand and saves a reference to the\n     * element that was focused before the dialog was opened.\n     * @private\n     * @return {?}\n     */\n    _setupFocusTrap() {\n        if (!this._focusTrap) {\n            this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n        }\n        if (this._document) {\n            this._elementFocusedBeforeDialogWasOpened = (/** @type {?} */ (this._document.activeElement));\n            // Note that there is no focus method when rendering on the server.\n            if (this._elementRef.nativeElement.focus) {\n                // Move focus onto the dialog immediately in order to prevent the user from accidentally\n                // opening multiple dialogs at the same time. Needs to be async, because the element\n                // may not be focusable immediately.\n                Promise.resolve().then((/**\n                 * @return {?}\n                 */\n                () => this._elementRef.nativeElement.focus()));\n            }\n        }\n    }\n    /**\n     * Returns whether focus is inside the dialog.\n     * @private\n     * @return {?}\n     */\n    _containsFocus() {\n        /** @type {?} */\n        const element = this._elementRef.nativeElement;\n        /** @type {?} */\n        const activeElement = this._document.activeElement;\n        return element === activeElement || element.contains(activeElement);\n    }\n    /**\n     * Callback, invoked whenever an animation on the host completes.\n     * @param {?} event\n     * @return {?}\n     */\n    _onAnimationDone(event) {\n        if (event.toState === 'enter') {\n            this._trapFocus();\n        }\n        else if (event.toState === 'exit') {\n            this._restoreFocus();\n        }\n        this._animationStateChanged.emit(event);\n    }\n    /**\n     * Callback, invoked when an animation on the host starts.\n     * @param {?} event\n     * @return {?}\n     */\n    _onAnimationStart(event) {\n        this._animationStateChanged.emit(event);\n    }\n    /**\n     * Starts the dialog exit animation.\n     * @return {?}\n     */\n    _startExitAnimation() {\n        this._state = 'exit';\n        // Mark the container for check so it can react if the\n        // view container is using OnPush change detection.\n        this._changeDetectorRef.markForCheck();\n    }\n}\nMatDialogContainer.ɵfac = function MatDialogContainer_Factory(t) { return new (t || MatDialogContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(MatDialogConfig)); };\nMatDialogContainer.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatDialogContainer, selectors: [[\"mat-dialog-container\"]], viewQuery: function MatDialogContainer_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkPortalOutlet, 7);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    } }, hostAttrs: [\"tabindex\", \"-1\", \"aria-modal\", \"true\", 1, \"mat-dialog-container\"], hostVars: 6, hostBindings: function MatDialogContainer_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵsyntheticHostListener(\"@dialogContainer.start\", function MatDialogContainer_animation_dialogContainer_start_HostBindingHandler($event) { return ctx._onAnimationStart($event); })(\"@dialogContainer.done\", function MatDialogContainer_animation_dialogContainer_done_HostBindingHandler($event) { return ctx._onAnimationDone($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx._id)(\"role\", ctx._config.role)(\"aria-labelledby\", ctx._config.ariaLabel ? null : ctx._ariaLabelledBy)(\"aria-label\", ctx._config.ariaLabel)(\"aria-describedby\", ctx._config.ariaDescribedBy || null);\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@dialogContainer\", ctx._state);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"cdkPortalOutlet\", \"\"]], template: function MatDialogContainer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, MatDialogContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n    } }, directives: [ɵngcc2.CdkPortalOutlet], styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"], encapsulation: 2, data: { animation: [matDialogAnimations.dialogContainer] } });\n/** @nocollapse */\nMatDialogContainer.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusTrapFactory },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: MatDialogConfig }\n];\nMatDialogContainer.propDecorators = {\n    _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogContainer, [{\n        type: Component,\n        args: [{\n                selector: 'mat-dialog-container',\n                template: \"<ng-template cdkPortalOutlet></ng-template>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                animations: [matDialogAnimations.dialogContainer],\n                host: {\n                    'class': 'mat-dialog-container',\n                    'tabindex': '-1',\n                    'aria-modal': 'true',\n                    '[attr.id]': '_id',\n                    '[attr.role]': '_config.role',\n                    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n                    '[attr.aria-label]': '_config.ariaLabel',\n                    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                    '[@dialogContainer]': '_state',\n                    '(@dialogContainer.start)': '_onAnimationStart($event)',\n                    '(@dialogContainer.done)': '_onAnimationDone($event)'\n                },\n                styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusTrapFactory }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: MatDialogConfig }]; }, { _portalOutlet: [{\n            type: ViewChild,\n            args: [CdkPortalOutlet, { static: true }]\n        }] }); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogContainer.prototype._document;\n    /**\n     * The portal outlet inside of this container into which the dialog content will be loaded.\n     * @type {?}\n     */\n    MatDialogContainer.prototype._portalOutlet;\n    /**\n     * The class that traps and manages focus within the dialog.\n     * @type {?}\n     * @private\n     */\n    MatDialogContainer.prototype._focusTrap;\n    /**\n     * Element that was focused before the dialog was opened. Save this to restore upon close.\n     * @type {?}\n     * @private\n     */\n    MatDialogContainer.prototype._elementFocusedBeforeDialogWasOpened;\n    /**\n     * State of the dialog animation.\n     * @type {?}\n     */\n    MatDialogContainer.prototype._state;\n    /**\n     * Emits when an animation state changes.\n     * @type {?}\n     */\n    MatDialogContainer.prototype._animationStateChanged;\n    /**\n     * ID of the element that should be considered as the dialog's label.\n     * @type {?}\n     */\n    MatDialogContainer.prototype._ariaLabelledBy;\n    /**\n     * ID for the container DOM element.\n     * @type {?}\n     */\n    MatDialogContainer.prototype._id;\n    /**\n     * Attaches a DOM portal to the dialog container.\n     * \\@param portal Portal to be attached.\n     * @deprecated To be turned into a method.\n     * \\@breaking-change 10.0.0\n     * @type {?}\n     */\n    MatDialogContainer.prototype.attachDomPortal;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogContainer.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogContainer.prototype._focusTrapFactory;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogContainer.prototype._changeDetectorRef;\n    /**\n     * The dialog configuration.\n     * @type {?}\n     */\n    MatDialogContainer.prototype._config;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/dialog-ref.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO(jelbourn): resizing\n// Counter for unique dialog ids.\n/** @type {?} */\nlet uniqueId = 0;\n/** @enum {number} */\nconst MatDialogState = {\n    OPEN: 0, CLOSING: 1, CLOSED: 2,\n};\n/**\n * Reference to a dialog opened via the MatDialog service.\n * @template T, R\n */\nclass MatDialogRef {\n    /**\n     * @param {?} _overlayRef\n     * @param {?} _containerInstance\n     * @param {?=} id\n     */\n    constructor(_overlayRef, _containerInstance, id = `mat-dialog-${uniqueId++}`) {\n        this._overlayRef = _overlayRef;\n        this._containerInstance = _containerInstance;\n        this.id = id;\n        /**\n         * Whether the user is allowed to close the dialog.\n         */\n        this.disableClose = this._containerInstance._config.disableClose;\n        /**\n         * Subject for notifying the user that the dialog has finished opening.\n         */\n        this._afterOpened = new Subject();\n        /**\n         * Subject for notifying the user that the dialog has finished closing.\n         */\n        this._afterClosed = new Subject();\n        /**\n         * Subject for notifying the user that the dialog has started closing.\n         */\n        this._beforeClosed = new Subject();\n        /**\n         * Current state of the dialog.\n         */\n        this._state = 0 /* OPEN */;\n        // Pass the id along to the container.\n        _containerInstance._id = id;\n        // Emit when opening animation completes\n        _containerInstance._animationStateChanged.pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => event.phaseName === 'done' && event.toState === 'enter')), take(1))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }));\n        // Dispose overlay when closing animation is complete\n        _containerInstance._animationStateChanged.pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => event.phaseName === 'done' && event.toState === 'exit')), take(1)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            clearTimeout(this._closeFallbackTimeout);\n            this._finishDialogClose();\n        }));\n        _overlayRef.detachments().subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._beforeClosed.next(this._result);\n            this._beforeClosed.complete();\n            this._afterClosed.next(this._result);\n            this._afterClosed.complete();\n            this.componentInstance = (/** @type {?} */ (null));\n            this._overlayRef.dispose();\n        }));\n        _overlayRef.keydownEvents()\n            .pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n        })))\n            .subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            event.preventDefault();\n            this.close();\n        }));\n        _overlayRef.backdropClick().subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (this.disableClose) {\n                this._containerInstance._recaptureFocus();\n            }\n            else {\n                this.close();\n            }\n        }));\n    }\n    /**\n     * Close the dialog.\n     * @param {?=} dialogResult Optional result to return to the dialog opener.\n     * @return {?}\n     */\n    close(dialogResult) {\n        this._result = dialogResult;\n        // Transition the backdrop in parallel to the dialog.\n        this._containerInstance._animationStateChanged.pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => event.phaseName === 'start')), take(1))\n            .subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this._beforeClosed.next(dialogResult);\n            this._beforeClosed.complete();\n            this._overlayRef.detachBackdrop();\n            // The logic that disposes of the overlay depends on the exit animation completing, however\n            // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n            // timeout which will clean everything up if the animation hasn't fired within the specified\n            // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n            // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n            this._closeFallbackTimeout = setTimeout((/**\n             * @return {?}\n             */\n            () => this._finishDialogClose()), event.totalTime + 100);\n        }));\n        this._containerInstance._startExitAnimation();\n        this._state = 1 /* CLOSING */;\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     * @return {?}\n     */\n    afterOpened() {\n        return this._afterOpened.asObservable();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     * @return {?}\n     */\n    afterClosed() {\n        return this._afterClosed.asObservable();\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     * @return {?}\n     */\n    beforeClosed() {\n        return this._beforeClosed.asObservable();\n    }\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     * @return {?}\n     */\n    backdropClick() {\n        return this._overlayRef.backdropClick();\n    }\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     * @return {?}\n     */\n    keydownEvents() {\n        return this._overlayRef.keydownEvents();\n    }\n    /**\n     * Updates the dialog's position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} position New dialog position.\n     * @return {THIS}\n     */\n    updatePosition(position) {\n        /** @type {?} */\n        let strategy = (/** @type {?} */ (this))._getPositionStrategy();\n        if (position && (position.left || position.right)) {\n            position.left ? strategy.left(position.left) : strategy.right(position.right);\n        }\n        else {\n            strategy.centerHorizontally();\n        }\n        if (position && (position.top || position.bottom)) {\n            position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n        }\n        else {\n            strategy.centerVertically();\n        }\n        (/** @type {?} */ (this))._overlayRef.updatePosition();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} width New width of the dialog.\n     * @param {?=} height New height of the dialog.\n     * @return {THIS}\n     */\n    updateSize(width = '', height = '') {\n        (/** @type {?} */ (this))._getPositionStrategy().width(width).height(height);\n        (/** @type {?} */ (this))._overlayRef.updatePosition();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Add a CSS class or an array of classes to the overlay pane.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} classes\n     * @return {THIS}\n     */\n    addPanelClass(classes) {\n        (/** @type {?} */ (this))._overlayRef.addPanelClass(classes);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Remove a CSS class or an array of classes from the overlay pane.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} classes\n     * @return {THIS}\n     */\n    removePanelClass(classes) {\n        (/** @type {?} */ (this))._overlayRef.removePanelClass(classes);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Gets the current state of the dialog's lifecycle.\n     * @return {?}\n     */\n    getState() {\n        return this._state;\n    }\n    /**\n     * Finishes the dialog close by updating the state of the dialog\n     * and disposing the overlay.\n     * @private\n     * @return {?}\n     */\n    _finishDialogClose() {\n        this._state = 2 /* CLOSED */;\n        this._overlayRef.dispose();\n    }\n    /**\n     * Fetches the position strategy object from the overlay ref.\n     * @private\n     * @return {?}\n     */\n    _getPositionStrategy() {\n        return (/** @type {?} */ (this._overlayRef.getConfig().positionStrategy));\n    }\n}\nif (false) {\n    /**\n     * The instance of component opened into the dialog.\n     * @type {?}\n     */\n    MatDialogRef.prototype.componentInstance;\n    /**\n     * Whether the user is allowed to close the dialog.\n     * @type {?}\n     */\n    MatDialogRef.prototype.disableClose;\n    /**\n     * Subject for notifying the user that the dialog has finished opening.\n     * @type {?}\n     * @private\n     */\n    MatDialogRef.prototype._afterOpened;\n    /**\n     * Subject for notifying the user that the dialog has finished closing.\n     * @type {?}\n     * @private\n     */\n    MatDialogRef.prototype._afterClosed;\n    /**\n     * Subject for notifying the user that the dialog has started closing.\n     * @type {?}\n     * @private\n     */\n    MatDialogRef.prototype._beforeClosed;\n    /**\n     * Result to be passed to afterClosed.\n     * @type {?}\n     * @private\n     */\n    MatDialogRef.prototype._result;\n    /**\n     * Handle to the timeout that's running as a fallback in case the exit animation doesn't fire.\n     * @type {?}\n     * @private\n     */\n    MatDialogRef.prototype._closeFallbackTimeout;\n    /**\n     * Current state of the dialog.\n     * @type {?}\n     * @private\n     */\n    MatDialogRef.prototype._state;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogRef.prototype._overlayRef;\n    /** @type {?} */\n    MatDialogRef.prototype._containerInstance;\n    /** @type {?} */\n    MatDialogRef.prototype.id;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/dialog.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to access the data that was passed in to a dialog.\n * @type {?}\n */\nconst MAT_DIALOG_DATA = new InjectionToken('MatDialogData');\n/**\n * Injection token that can be used to specify default dialog options.\n * @type {?}\n */\nconst MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-dialog-default-options');\n/**\n * Injection token that determines the scroll handling while the dialog is open.\n * @type {?}\n */\nconst MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-dialog-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n    return (/**\n     * @return {?}\n     */\n    () => overlay.scrollStrategies.block());\n}\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return (/**\n     * @return {?}\n     */\n    () => overlay.scrollStrategies.block());\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Service to open Material Design modal dialogs.\n */\nclass MatDialog {\n    /**\n     * @param {?} _overlay\n     * @param {?} _injector\n     * @param {?} _location\n     * @param {?} _defaultOptions\n     * @param {?} scrollStrategy\n     * @param {?} _parentDialog\n     * @param {?} _overlayContainer\n     */\n    constructor(_overlay, _injector, \n    /**\n     * @deprecated `_location` parameter to be removed.\n     * @breaking-change 10.0.0\n     */\n    _location, _defaultOptions, scrollStrategy, _parentDialog, _overlayContainer) {\n        this._overlay = _overlay;\n        this._injector = _injector;\n        this._defaultOptions = _defaultOptions;\n        this._parentDialog = _parentDialog;\n        this._overlayContainer = _overlayContainer;\n        this._openDialogsAtThisLevel = [];\n        this._afterAllClosedAtThisLevel = new Subject();\n        this._afterOpenedAtThisLevel = new Subject();\n        this._ariaHiddenElements = new Map();\n        // TODO (jelbourn): tighten the typing right-hand side of this expression.\n        /**\n         * Stream that emits when all open dialog have finished closing.\n         * Will emit on subscribe if there are no open dialogs to begin with.\n         */\n        this.afterAllClosed = (/** @type {?} */ (defer((/**\n         * @return {?}\n         */\n        () => this.openDialogs.length ?\n            this._afterAllClosed :\n            this._afterAllClosed.pipe(startWith(undefined))))));\n        this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * Keeps track of the currently-open dialogs.\n     * @return {?}\n     */\n    get openDialogs() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /**\n     * Stream that emits when a dialog has been opened.\n     * @return {?}\n     */\n    get afterOpened() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    /**\n     * @return {?}\n     */\n    get _afterAllClosed() {\n        /** @type {?} */\n        const parent = this._parentDialog;\n        return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n    }\n    /**\n     * Opens a modal dialog containing the given component.\n     * @template T, D, R\n     * @param {?} componentOrTemplateRef Type of the component to load into the dialog,\n     *     or a TemplateRef to instantiate as the dialog content.\n     * @param {?=} config Extra configuration options.\n     * @return {?} Reference to the newly-opened dialog.\n     */\n    open(componentOrTemplateRef, config) {\n        config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n        if (config.id && this.getDialogById(config.id)) {\n            throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n        }\n        /** @type {?} */\n        const overlayRef = this._createOverlay(config);\n        /** @type {?} */\n        const dialogContainer = this._attachDialogContainer(overlayRef, config);\n        /** @type {?} */\n        const dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n        // If this is the first dialog that we're opening, hide all the non-overlay content.\n        if (!this.openDialogs.length) {\n            this._hideNonDialogContentFromAssistiveTechnology();\n        }\n        this.openDialogs.push(dialogRef);\n        dialogRef.afterClosed().subscribe((/**\n         * @return {?}\n         */\n        () => this._removeOpenDialog(dialogRef)));\n        this.afterOpened.next(dialogRef);\n        return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     * @return {?}\n     */\n    closeAll() {\n        this._closeDialogs(this.openDialogs);\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param {?} id ID to use when looking up the dialog.\n     * @return {?}\n     */\n    getDialogById(id) {\n        return this.openDialogs.find((/**\n         * @param {?} dialog\n         * @return {?}\n         */\n        dialog => dialog.id === id));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        // Only close the dialogs at this level on destroy\n        // since the parent service may still be active.\n        this._closeDialogs(this._openDialogsAtThisLevel);\n        this._afterAllClosedAtThisLevel.complete();\n        this._afterOpenedAtThisLevel.complete();\n    }\n    /**\n     * Creates the overlay into which the dialog will be loaded.\n     * @private\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to the OverlayRef for the created overlay.\n     */\n    _createOverlay(config) {\n        /** @type {?} */\n        const overlayConfig = this._getOverlayConfig(config);\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an overlay config from a dialog config.\n     * @private\n     * @param {?} dialogConfig The dialog configuration.\n     * @return {?} The overlay configuration.\n     */\n    _getOverlayConfig(dialogConfig) {\n        /** @type {?} */\n        const state = new OverlayConfig({\n            positionStrategy: this._overlay.position().global(),\n            scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n            panelClass: dialogConfig.panelClass,\n            hasBackdrop: dialogConfig.hasBackdrop,\n            direction: dialogConfig.direction,\n            minWidth: dialogConfig.minWidth,\n            minHeight: dialogConfig.minHeight,\n            maxWidth: dialogConfig.maxWidth,\n            maxHeight: dialogConfig.maxHeight,\n            disposeOnNavigation: dialogConfig.closeOnNavigation\n        });\n        if (dialogConfig.backdropClass) {\n            state.backdropClass = dialogConfig.backdropClass;\n        }\n        return state;\n    }\n    /**\n     * Attaches an MatDialogContainer to a dialog's already-created overlay.\n     * @private\n     * @param {?} overlay Reference to the dialog's underlying overlay.\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to a ComponentRef for the attached container.\n     */\n    _attachDialogContainer(overlay, config) {\n        /** @type {?} */\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        /** @type {?} */\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatDialogConfig, useValue: config }]\n        });\n        /** @type {?} */\n        const containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector, config.componentFactoryResolver);\n        /** @type {?} */\n        const containerRef = overlay.attach(containerPortal);\n        return containerRef.instance;\n    }\n    /**\n     * Attaches the user-provided component to the already-created MatDialogContainer.\n     * @private\n     * @template T, R\n     * @param {?} componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param {?} dialogContainer Reference to the wrapping MatDialogContainer.\n     * @param {?} overlayRef Reference to the overlay in which the dialog resides.\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to the MatDialogRef that should be returned to the user.\n     */\n    _attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config) {\n        // Create a reference to the dialog we're creating in order to give the user a handle\n        // to modify and close it.\n        /** @type {?} */\n        const dialogRef = new MatDialogRef(overlayRef, dialogContainer, config.id);\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, (/** @type {?} */ (null)), (/** @type {?} */ ({ $implicit: config.data, dialogRef }))));\n        }\n        else {\n            /** @type {?} */\n            const injector = this._createInjector(config, dialogRef, dialogContainer);\n            /** @type {?} */\n            const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector));\n            dialogRef.componentInstance = contentRef.instance;\n        }\n        dialogRef\n            .updateSize(config.width, config.height)\n            .updatePosition(config.position);\n        return dialogRef;\n    }\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @private\n     * @template T\n     * @param {?} config Config object that is used to construct the dialog.\n     * @param {?} dialogRef Reference to the dialog.\n     * @param {?} dialogContainer\n     * @return {?} The custom injector that can be used inside the dialog.\n     */\n    _createInjector(config, dialogRef, dialogContainer) {\n        /** @type {?} */\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n        // content are created out of the same ViewContainerRef and as such, are siblings for injector\n        // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n        // added to the injection tokens.\n        /** @type {?} */\n        const providers = [\n            { provide: MatDialogContainer, useValue: dialogContainer },\n            { provide: MAT_DIALOG_DATA, useValue: config.data },\n            { provide: MatDialogRef, useValue: dialogRef }\n        ];\n        if (config.direction &&\n            (!userInjector || !userInjector.get(Directionality, null))) {\n            providers.push({\n                provide: Directionality,\n                useValue: { value: config.direction, change: of() }\n            });\n        }\n        return Injector.create({ parent: userInjector || this._injector, providers });\n    }\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @private\n     * @param {?} dialogRef Dialog to be removed.\n     * @return {?}\n     */\n    _removeOpenDialog(dialogRef) {\n        /** @type {?} */\n        const index = this.openDialogs.indexOf(dialogRef);\n        if (index > -1) {\n            this.openDialogs.splice(index, 1);\n            // If all the dialogs were closed, remove/restore the `aria-hidden`\n            // to a the siblings and emit to the `afterAllClosed` stream.\n            if (!this.openDialogs.length) {\n                this._ariaHiddenElements.forEach((/**\n                 * @param {?} previousValue\n                 * @param {?} element\n                 * @return {?}\n                 */\n                (previousValue, element) => {\n                    if (previousValue) {\n                        element.setAttribute('aria-hidden', previousValue);\n                    }\n                    else {\n                        element.removeAttribute('aria-hidden');\n                    }\n                }));\n                this._ariaHiddenElements.clear();\n                this._afterAllClosed.next();\n            }\n        }\n    }\n    /**\n     * Hides all of the content that isn't an overlay from assistive technology.\n     * @private\n     * @return {?}\n     */\n    _hideNonDialogContentFromAssistiveTechnology() {\n        /** @type {?} */\n        const overlayContainer = this._overlayContainer.getContainerElement();\n        // Ensure that the overlay container is attached to the DOM.\n        if (overlayContainer.parentElement) {\n            /** @type {?} */\n            const siblings = overlayContainer.parentElement.children;\n            for (let i = siblings.length - 1; i > -1; i--) {\n                /** @type {?} */\n                let sibling = siblings[i];\n                if (sibling !== overlayContainer &&\n                    sibling.nodeName !== 'SCRIPT' &&\n                    sibling.nodeName !== 'STYLE' &&\n                    !sibling.hasAttribute('aria-live')) {\n                    this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n                    sibling.setAttribute('aria-hidden', 'true');\n                }\n            }\n        }\n    }\n    /**\n     * Closes all of the dialogs in an array.\n     * @private\n     * @param {?} dialogs\n     * @return {?}\n     */\n    _closeDialogs(dialogs) {\n        /** @type {?} */\n        let i = dialogs.length;\n        while (i--) {\n            // The `_openDialogs` property isn't updated after close until the rxjs subscription\n            // runs on the next microtask, in addition to modifying the array as we're going\n            // through it. We loop through all of them and call close without assuming that\n            // they'll be removed from the list instantaneously.\n            dialogs[i].close();\n        }\n    }\n}\nMatDialog.ɵfac = function MatDialog_Factory(t) { return new (t || MatDialog)(ɵngcc0.ɵɵinject(ɵngcc3.Overlay), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc4.Location, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_SCROLL_STRATEGY), ɵngcc0.ɵɵinject(MatDialog, 12), ɵngcc0.ɵɵinject(ɵngcc3.OverlayContainer)); };\nMatDialog.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: MatDialog, factory: MatDialog.ɵfac });\n/** @nocollapse */\nMatDialog.ctorParameters = () => [\n    { type: Overlay },\n    { type: Injector },\n    { type: Location, decorators: [{ type: Optional }] },\n    { type: MatDialogConfig, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DEFAULT_OPTIONS,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_SCROLL_STRATEGY,] }] },\n    { type: MatDialog, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: OverlayContainer }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialog, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc3.Overlay }, { type: ɵngcc0.Injector }, { type: ɵngcc4.Location, decorators: [{\n                type: Optional\n            }] }, { type: MatDialogConfig, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_DIALOG_DEFAULT_OPTIONS]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_DIALOG_SCROLL_STRATEGY]\n            }] }, { type: MatDialog, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: ɵngcc3.OverlayContainer }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._openDialogsAtThisLevel;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._afterAllClosedAtThisLevel;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._afterOpenedAtThisLevel;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._ariaHiddenElements;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._scrollStrategy;\n    /**\n     * Stream that emits when all open dialog have finished closing.\n     * Will emit on subscribe if there are no open dialogs to begin with.\n     * @type {?}\n     */\n    MatDialog.prototype.afterAllClosed;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._overlay;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._injector;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._defaultOptions;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._parentDialog;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._overlayContainer;\n}\n/**\n * Applies default options to the dialog config.\n * @param {?=} config Config to be modified.\n * @param {?=} defaultOptions Default options provided.\n * @return {?} The new configuration object.\n */\nfunction _applyConfigDefaults(config, defaultOptions) {\n    return Object.assign(Object.assign({}, defaultOptions), config);\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/dialog-content-directives.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Counter used to generate unique IDs for dialog elements.\n * @type {?}\n */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nclass MatDialogClose {\n    /**\n     * @param {?} dialogRef\n     * @param {?} _elementRef\n     * @param {?} _dialog\n     */\n    constructor(dialogRef, _elementRef, _dialog) {\n        this.dialogRef = dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        /**\n         * Default to \"button\" to prevents accidental form submits.\n         */\n        this.type = 'button';\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (!this.dialogRef) {\n            // When this directive is included in a dialog via TemplateRef (rather than being\n            // in a Component), the DialogRef isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the DialogRef by\n            // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n            // be resolved at constructor time.\n            this.dialogRef = (/** @type {?} */ (getClosestDialog(this._elementRef, this._dialog.openDialogs)));\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        /** @type {?} */\n        const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n        if (proxiedChange) {\n            this.dialogResult = proxiedChange.currentValue;\n        }\n    }\n}\nMatDialogClose.ɵfac = function MatDialogClose_Factory(t) { return new (t || MatDialogClose)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog)); };\nMatDialogClose.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatDialogClose, selectors: [[\"\", \"mat-dialog-close\", \"\"], [\"\", \"matDialogClose\", \"\"]], hostVars: 2, hostBindings: function MatDialogClose_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatDialogClose_click_HostBindingHandler() { return ctx.dialogRef.close(ctx.dialogResult); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.ariaLabel || null)(\"type\", ctx.type);\n    } }, inputs: { type: \"type\", dialogResult: [\"mat-dialog-close\", \"dialogResult\"], ariaLabel: [\"aria-label\", \"ariaLabel\"], _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"] }, exportAs: [\"matDialogClose\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\n/** @nocollapse */\nMatDialogClose.ctorParameters = () => [\n    { type: MatDialogRef, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: MatDialog }\n];\nMatDialogClose.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    type: [{ type: Input }],\n    dialogResult: [{ type: Input, args: ['mat-dialog-close',] }],\n    _matDialogClose: [{ type: Input, args: ['matDialogClose',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogClose, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-dialog-close], [matDialogClose]',\n                exportAs: 'matDialogClose',\n                host: {\n                    '(click)': 'dialogRef.close(dialogResult)',\n                    '[attr.aria-label]': 'ariaLabel || null',\n                    '[attr.type]': 'type'\n                }\n            }]\n    }], function () { return [{ type: MatDialogRef, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ElementRef }, { type: MatDialog }]; }, { type: [{\n            type: Input\n        }], dialogResult: [{\n            type: Input,\n            args: ['mat-dialog-close']\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], _matDialogClose: [{\n            type: Input,\n            args: ['matDialogClose']\n        }] }); })();\nif (false) {\n    /**\n     * Screenreader label for the button.\n     * @type {?}\n     */\n    MatDialogClose.prototype.ariaLabel;\n    /**\n     * Default to \"button\" to prevents accidental form submits.\n     * @type {?}\n     */\n    MatDialogClose.prototype.type;\n    /**\n     * Dialog close input.\n     * @type {?}\n     */\n    MatDialogClose.prototype.dialogResult;\n    /** @type {?} */\n    MatDialogClose.prototype._matDialogClose;\n    /** @type {?} */\n    MatDialogClose.prototype.dialogRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogClose.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogClose.prototype._dialog;\n}\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nclass MatDialogTitle {\n    /**\n     * @param {?} _dialogRef\n     * @param {?} _elementRef\n     * @param {?} _dialog\n     */\n    constructor(_dialogRef, _elementRef, _dialog) {\n        this._dialogRef = _dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        this.id = `mat-dialog-title-${dialogElementUid++}`;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (!this._dialogRef) {\n            this._dialogRef = (/** @type {?} */ (getClosestDialog(this._elementRef, this._dialog.openDialogs)));\n        }\n        if (this._dialogRef) {\n            Promise.resolve().then((/**\n             * @return {?}\n             */\n            () => {\n                /** @type {?} */\n                const container = this._dialogRef._containerInstance;\n                if (container && !container._ariaLabelledBy) {\n                    container._ariaLabelledBy = this.id;\n                }\n            }));\n        }\n    }\n}\nMatDialogTitle.ɵfac = function MatDialogTitle_Factory(t) { return new (t || MatDialogTitle)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog)); };\nMatDialogTitle.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatDialogTitle, selectors: [[\"\", \"mat-dialog-title\", \"\"], [\"\", \"matDialogTitle\", \"\"]], hostAttrs: [1, \"mat-dialog-title\"], hostVars: 1, hostBindings: function MatDialogTitle_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n    } }, inputs: { id: \"id\" }, exportAs: [\"matDialogTitle\"] });\n/** @nocollapse */\nMatDialogTitle.ctorParameters = () => [\n    { type: MatDialogRef, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: MatDialog }\n];\nMatDialogTitle.propDecorators = {\n    id: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogTitle, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-dialog-title], [matDialogTitle]',\n                exportAs: 'matDialogTitle',\n                host: {\n                    'class': 'mat-dialog-title',\n                    '[id]': 'id'\n                }\n            }]\n    }], function () { return [{ type: MatDialogRef, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ElementRef }, { type: MatDialog }]; }, { id: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatDialogTitle.prototype.id;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogTitle.prototype._dialogRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogTitle.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogTitle.prototype._dialog;\n}\n/**\n * Scrollable content container of a dialog.\n */\nclass MatDialogContent {\n}\nMatDialogContent.ɵfac = function MatDialogContent_Factory(t) { return new (t || MatDialogContent)(); };\nMatDialogContent.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatDialogContent, selectors: [[\"\", \"mat-dialog-content\", \"\"], [\"mat-dialog-content\"], [\"\", \"matDialogContent\", \"\"]], hostAttrs: [1, \"mat-dialog-content\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogContent, [{\n        type: Directive,\n        args: [{\n                selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n                host: { 'class': 'mat-dialog-content' }\n            }]\n    }], null, null); })();\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nclass MatDialogActions {\n}\nMatDialogActions.ɵfac = function MatDialogActions_Factory(t) { return new (t || MatDialogActions)(); };\nMatDialogActions.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatDialogActions, selectors: [[\"\", \"mat-dialog-actions\", \"\"], [\"mat-dialog-actions\"], [\"\", \"matDialogActions\", \"\"]], hostAttrs: [1, \"mat-dialog-actions\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogActions, [{\n        type: Directive,\n        args: [{\n                selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n                host: { 'class': 'mat-dialog-actions' }\n            }]\n    }], null, null); })();\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param {?} element Element relative to which to look for a dialog.\n * @param {?} openDialogs References to the currently-open dialogs.\n * @return {?}\n */\nfunction getClosestDialog(element, openDialogs) {\n    /** @type {?} */\n    let parent = element.nativeElement.parentElement;\n    while (parent && !parent.classList.contains('mat-dialog-container')) {\n        parent = parent.parentElement;\n    }\n    return parent ? openDialogs.find((/**\n     * @param {?} dialog\n     * @return {?}\n     */\n    dialog => dialog.id === (/** @type {?} */ (parent)).id)) : null;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/dialog-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatDialogModule {\n}\nMatDialogModule.ɵfac = function MatDialogModule_Factory(t) { return new (t || MatDialogModule)(); };\nMatDialogModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatDialogModule });\nMatDialogModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        MatDialog,\n        MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n    ], imports: [[\n            OverlayModule,\n            PortalModule,\n            MatCommonModule,\n        ], MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    OverlayModule,\n                    PortalModule,\n                    MatCommonModule,\n                ],\n                exports: [\n                    MatDialogContainer,\n                    MatDialogClose,\n                    MatDialogTitle,\n                    MatDialogContent,\n                    MatDialogActions,\n                    MatCommonModule,\n                ],\n                declarations: [\n                    MatDialogContainer,\n                    MatDialogClose,\n                    MatDialogTitle,\n                    MatDialogActions,\n                    MatDialogContent,\n                ],\n                providers: [\n                    MatDialog,\n                    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n                ],\n                entryComponents: [MatDialogContainer]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatDialogModule, { declarations: function () { return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogActions, MatDialogContent]; }, imports: function () { return [OverlayModule,\n        PortalModule,\n        MatCommonModule]; }, exports: function () { return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatCommonModule]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatDialog, MatDialogActions, MatDialogClose, MatDialogConfig, MatDialogContainer, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogTitle, matDialogAnimations, throwMatDialogContentAlreadyAttachedError };\n\n"]}