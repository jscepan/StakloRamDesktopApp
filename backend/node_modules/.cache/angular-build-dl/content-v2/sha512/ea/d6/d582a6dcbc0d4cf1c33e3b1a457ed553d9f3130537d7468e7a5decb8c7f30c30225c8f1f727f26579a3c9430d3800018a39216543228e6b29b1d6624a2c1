(function () {
  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

  function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

  function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

  function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  (self["webpackChunkradnja"] = self["webpackChunkradnja"] || []).push([["src_app_features_main-layout_main-layout_module_ts"], {
    /***/
    51606:
    /*!*****************************************************************!*\
      !*** ./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/a11y.js ***!
      \*****************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "A11yModule": function A11yModule() {
          return (
            /* binding */
            _A11yModule
          );
        },

        /* harmony export */
        "ActiveDescendantKeyManager": function ActiveDescendantKeyManager() {
          return (
            /* binding */
            _ActiveDescendantKeyManager
          );
        },

        /* harmony export */
        "AriaDescriber": function AriaDescriber() {
          return (
            /* binding */
            _AriaDescriber
          );
        },

        /* harmony export */
        "CDK_DESCRIBEDBY_HOST_ATTRIBUTE": function CDK_DESCRIBEDBY_HOST_ATTRIBUTE() {
          return (
            /* binding */
            _CDK_DESCRIBEDBY_HOST_ATTRIBUTE
          );
        },

        /* harmony export */
        "CDK_DESCRIBEDBY_ID_PREFIX": function CDK_DESCRIBEDBY_ID_PREFIX() {
          return (
            /* binding */
            _CDK_DESCRIBEDBY_ID_PREFIX
          );
        },

        /* harmony export */
        "CdkAriaLive": function CdkAriaLive() {
          return (
            /* binding */
            _CdkAriaLive
          );
        },

        /* harmony export */
        "CdkMonitorFocus": function CdkMonitorFocus() {
          return (
            /* binding */
            _CdkMonitorFocus
          );
        },

        /* harmony export */
        "CdkTrapFocus": function CdkTrapFocus() {
          return (
            /* binding */
            _CdkTrapFocus
          );
        },

        /* harmony export */
        "ConfigurableFocusTrap": function ConfigurableFocusTrap() {
          return (
            /* binding */
            _ConfigurableFocusTrap
          );
        },

        /* harmony export */
        "ConfigurableFocusTrapFactory": function ConfigurableFocusTrapFactory() {
          return (
            /* binding */
            _ConfigurableFocusTrapFactory
          );
        },

        /* harmony export */
        "EventListenerFocusTrapInertStrategy": function EventListenerFocusTrapInertStrategy() {
          return (
            /* binding */
            _EventListenerFocusTrapInertStrategy
          );
        },

        /* harmony export */
        "FOCUS_MONITOR_DEFAULT_OPTIONS": function FOCUS_MONITOR_DEFAULT_OPTIONS() {
          return (
            /* binding */
            _FOCUS_MONITOR_DEFAULT_OPTIONS
          );
        },

        /* harmony export */
        "FOCUS_TRAP_INERT_STRATEGY": function FOCUS_TRAP_INERT_STRATEGY() {
          return (
            /* binding */
            _FOCUS_TRAP_INERT_STRATEGY
          );
        },

        /* harmony export */
        "FocusKeyManager": function FocusKeyManager() {
          return (
            /* binding */
            _FocusKeyManager
          );
        },

        /* harmony export */
        "FocusMonitor": function FocusMonitor() {
          return (
            /* binding */
            _FocusMonitor
          );
        },

        /* harmony export */
        "FocusTrap": function FocusTrap() {
          return (
            /* binding */
            _FocusTrap
          );
        },

        /* harmony export */
        "FocusTrapFactory": function FocusTrapFactory() {
          return (
            /* binding */
            _FocusTrapFactory
          );
        },

        /* harmony export */
        "HighContrastModeDetector": function HighContrastModeDetector() {
          return (
            /* binding */
            _HighContrastModeDetector
          );
        },

        /* harmony export */
        "InteractivityChecker": function InteractivityChecker() {
          return (
            /* binding */
            _InteractivityChecker
          );
        },

        /* harmony export */
        "LIVE_ANNOUNCER_DEFAULT_OPTIONS": function LIVE_ANNOUNCER_DEFAULT_OPTIONS() {
          return (
            /* binding */
            _LIVE_ANNOUNCER_DEFAULT_OPTIONS
          );
        },

        /* harmony export */
        "LIVE_ANNOUNCER_ELEMENT_TOKEN": function LIVE_ANNOUNCER_ELEMENT_TOKEN() {
          return (
            /* binding */
            _LIVE_ANNOUNCER_ELEMENT_TOKEN
          );
        },

        /* harmony export */
        "LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY": function LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY() {
          return (
            /* binding */
            _LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY
          );
        },

        /* harmony export */
        "ListKeyManager": function ListKeyManager() {
          return (
            /* binding */
            _ListKeyManager
          );
        },

        /* harmony export */
        "LiveAnnouncer": function LiveAnnouncer() {
          return (
            /* binding */
            _LiveAnnouncer
          );
        },

        /* harmony export */
        "MESSAGES_CONTAINER_ID": function MESSAGES_CONTAINER_ID() {
          return (
            /* binding */
            _MESSAGES_CONTAINER_ID
          );
        },

        /* harmony export */
        "TOUCH_BUFFER_MS": function TOUCH_BUFFER_MS() {
          return (
            /* binding */
            _TOUCH_BUFFER_MS
          );
        },

        /* harmony export */
        "isFakeMousedownFromScreenReader": function isFakeMousedownFromScreenReader() {
          return (
            /* binding */
            _isFakeMousedownFromScreenReader
          );
        },

        /* harmony export */
        "ɵangular_material_src_cdk_a11y_a11y_a": function ɵangular_material_src_cdk_a11y_a11y_a() {
          return (
            /* binding */
            FocusTrapManager
          );
        },

        /* harmony export */
        "ɵangular_material_src_cdk_a11y_a11y_b": function ɵangular_material_src_cdk_a11y_a11y_b() {
          return (
            /* binding */
            ConfigurableFocusTrapConfig
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/common */
      54364);
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      2316);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! rxjs */
      79441);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! rxjs */
      94283);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
      /*! rxjs */
      81134);
      /* harmony import */


      var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! @angular/cdk/keycodes */
      90084);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! rxjs/operators */
      98636);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! rxjs/operators */
      80639);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! rxjs/operators */
      9170);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! rxjs/operators */
      33927);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! rxjs/operators */
      53466);
      /* harmony import */


      var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
      /*! @angular/cdk/coercion */
      20657);
      /* harmony import */


      var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! @angular/cdk/platform */
      36145);
      /* harmony import */


      var _angular_cdk_observers__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
      /*! @angular/cdk/observers */
      90851);
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/a11y/aria-describer/aria-reference.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * IDs are delimited by an empty space, as per the spec.
       * @type {?}
       */


      var ID_DELIMITER = ' ';
      /**
       * Adds the given ID to the specified ARIA attribute on an element.
       * Used for attributes such as aria-labelledby, aria-owns, etc.
       * @param {?} el
       * @param {?} attr
       * @param {?} id
       * @return {?}
       */

      function addAriaReferencedId(el, attr, id) {
        /** @type {?} */
        var ids = getAriaReferenceIds(el, attr);

        if (ids.some(
        /**
        * @param {?} existingId
        * @return {?}
        */
        function (existingId) {
          return existingId.trim() == id.trim();
        })) {
          return;
        }

        ids.push(id.trim());
        el.setAttribute(attr, ids.join(ID_DELIMITER));
      }
      /**
       * Removes the given ID from the specified ARIA attribute on an element.
       * Used for attributes such as aria-labelledby, aria-owns, etc.
       * @param {?} el
       * @param {?} attr
       * @param {?} id
       * @return {?}
       */


      function removeAriaReferencedId(el, attr, id) {
        /** @type {?} */
        var ids = getAriaReferenceIds(el, attr);
        /** @type {?} */

        var filteredIds = ids.filter(
        /**
        * @param {?} val
        * @return {?}
        */
        function (val) {
          return val != id.trim();
        });

        if (filteredIds.length) {
          el.setAttribute(attr, filteredIds.join(ID_DELIMITER));
        } else {
          el.removeAttribute(attr);
        }
      }
      /**
       * Gets the list of IDs referenced by the given ARIA attribute on an element.
       * Used for attributes such as aria-labelledby, aria-owns, etc.
       * @param {?} el
       * @param {?} attr
       * @return {?}
       */


      function getAriaReferenceIds(el, attr) {
        // Get string array of all individual ids (whitespace delimited) in the attribute value
        return (el.getAttribute(attr) || '').match(/\S+/g) || [];
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/a11y/aria-describer/aria-describer.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Interface used to register message elements and keep a count of how many registrations have
       * the same message and the reference to the message element used for the `aria-describedby`.
       * @record
       */


      function RegisteredMessage() {}

      if (false) {}
      /**
       * ID used for the body container where all messages are appended.
       * @type {?}
       */


      var _MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';
      /**
       * ID prefix used for each created message element.
       * @type {?}
       */

      var _CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';
      /**
       * Attribute given to each host element that is described by a message element.
       * @type {?}
       */

      var _CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';
      /**
       * Global incremental identifier for each registered message element.
       * @type {?}
       */

      var nextId = 0;
      /**
       * Global map of all registered message elements that have been placed into the document.
       * @type {?}
       */

      var messageRegistry = new Map();
      /**
       * Container for all registered messages.
       * @type {?}
       */

      var messagesContainer = null;
      /**
       * Utility that creates visually hidden elements with a message content. Useful for elements that
       * want to use aria-describedby to further describe themselves without adding additional visual
       * content.
       */

      var _AriaDescriber = /*#__PURE__*/function () {
        /**
         * @param {?} _document
         */
        function _AriaDescriber(_document) {
          _classCallCheck(this, _AriaDescriber);

          this._document = _document;
        }
        /**
         * Adds to the host element an aria-describedby reference to a hidden element that contains
         * the message. If the same message has already been registered, then it will reuse the created
         * message element.
         * @param {?} hostElement
         * @param {?} message
         * @return {?}
         */


        _createClass(_AriaDescriber, [{
          key: "describe",
          value: function describe(hostElement, message) {
            if (!this._canBeDescribed(hostElement, message)) {
              return;
            }

            if (typeof message !== 'string') {
              // We need to ensure that the element has an ID.
              this._setMessageId(message);

              messageRegistry.set(message, {
                messageElement: message,
                referenceCount: 0
              });
            } else if (!messageRegistry.has(message)) {
              this._createMessageElement(message);
            }

            if (!this._isElementDescribedByMessage(hostElement, message)) {
              this._addMessageReference(hostElement, message);
            }
          }
          /**
           * Removes the host element's aria-describedby reference to the message element.
           * @param {?} hostElement
           * @param {?} message
           * @return {?}
           */

        }, {
          key: "removeDescription",
          value: function removeDescription(hostElement, message) {
            if (!this._isElementNode(hostElement)) {
              return;
            }

            if (this._isElementDescribedByMessage(hostElement, message)) {
              this._removeMessageReference(hostElement, message);
            } // If the message is a string, it means that it's one that we created for the
            // consumer so we can remove it safely, otherwise we should leave it in place.


            if (typeof message === 'string') {
              /** @type {?} */
              var registeredMessage = messageRegistry.get(message);

              if (registeredMessage && registeredMessage.referenceCount === 0) {
                this._deleteMessageElement(message);
              }
            }

            if (messagesContainer && messagesContainer.childNodes.length === 0) {
              this._deleteMessagesContainer();
            }
          }
          /**
           * Unregisters all created message elements and removes the message container.
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            /** @type {?} */
            var describedElements = this._document.querySelectorAll("[".concat(_CDK_DESCRIBEDBY_HOST_ATTRIBUTE, "]"));

            for (var i = 0; i < describedElements.length; i++) {
              this._removeCdkDescribedByReferenceIds(describedElements[i]);

              describedElements[i].removeAttribute(_CDK_DESCRIBEDBY_HOST_ATTRIBUTE);
            }

            if (messagesContainer) {
              this._deleteMessagesContainer();
            }

            messageRegistry.clear();
          }
          /**
           * Creates a new element in the visually hidden message container element with the message
           * as its content and adds it to the message registry.
           * @private
           * @param {?} message
           * @return {?}
           */

        }, {
          key: "_createMessageElement",
          value: function _createMessageElement(message) {
            /** @type {?} */
            var messageElement = this._document.createElement('div');

            this._setMessageId(messageElement);

            messageElement.textContent = message;

            this._createMessagesContainer();

            /** @type {?} */
            messagesContainer.appendChild(messageElement);
            messageRegistry.set(message, {
              messageElement: messageElement,
              referenceCount: 0
            });
          }
          /**
           * Assigns a unique ID to an element, if it doesn't have one already.
           * @private
           * @param {?} element
           * @return {?}
           */

        }, {
          key: "_setMessageId",
          value: function _setMessageId(element) {
            if (!element.id) {
              element.id = "".concat(_CDK_DESCRIBEDBY_ID_PREFIX, "-").concat(nextId++);
            }
          }
          /**
           * Deletes the message element from the global messages container.
           * @private
           * @param {?} message
           * @return {?}
           */

        }, {
          key: "_deleteMessageElement",
          value: function _deleteMessageElement(message) {
            /** @type {?} */
            var registeredMessage = messageRegistry.get(message);
            /** @type {?} */

            var messageElement = registeredMessage && registeredMessage.messageElement;

            if (messagesContainer && messageElement) {
              messagesContainer.removeChild(messageElement);
            }

            messageRegistry["delete"](message);
          }
          /**
           * Creates the global container for all aria-describedby messages.
           * @private
           * @return {?}
           */

        }, {
          key: "_createMessagesContainer",
          value: function _createMessagesContainer() {
            if (!messagesContainer) {
              /** @type {?} */
              var preExistingContainer = this._document.getElementById(_MESSAGES_CONTAINER_ID); // When going from the server to the client, we may end up in a situation where there's
              // already a container on the page, but we don't have a reference to it. Clear the
              // old container so we don't get duplicates. Doing this, instead of emptying the previous
              // container, should be slightly faster.


              if (preExistingContainer) {
                /** @type {?} */
                preExistingContainer.parentNode.removeChild(preExistingContainer);
              }

              messagesContainer = this._document.createElement('div');
              messagesContainer.id = _MESSAGES_CONTAINER_ID;
              messagesContainer.setAttribute('aria-hidden', 'true');
              messagesContainer.style.display = 'none';

              this._document.body.appendChild(messagesContainer);
            }
          }
          /**
           * Deletes the global messages container.
           * @private
           * @return {?}
           */

        }, {
          key: "_deleteMessagesContainer",
          value: function _deleteMessagesContainer() {
            if (messagesContainer && messagesContainer.parentNode) {
              messagesContainer.parentNode.removeChild(messagesContainer);
              messagesContainer = null;
            }
          }
          /**
           * Removes all cdk-describedby messages that are hosted through the element.
           * @private
           * @param {?} element
           * @return {?}
           */

        }, {
          key: "_removeCdkDescribedByReferenceIds",
          value: function _removeCdkDescribedByReferenceIds(element) {
            // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX

            /** @type {?} */
            var originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby').filter(
            /**
            * @param {?} id
            * @return {?}
            */
            function (id) {
              return id.indexOf(_CDK_DESCRIBEDBY_ID_PREFIX) != 0;
            });
            element.setAttribute('aria-describedby', originalReferenceIds.join(' '));
          }
          /**
           * Adds a message reference to the element using aria-describedby and increments the registered
           * message's reference count.
           * @private
           * @param {?} element
           * @param {?} message
           * @return {?}
           */

        }, {
          key: "_addMessageReference",
          value: function _addMessageReference(element, message) {
            /** @type {?} */
            var registeredMessage =
            /** @type {?} */
            messageRegistry.get(message); // Add the aria-describedby reference and set the
            // describedby_host attribute to mark the element.

            addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);
            element.setAttribute(_CDK_DESCRIBEDBY_HOST_ATTRIBUTE, '');
            registeredMessage.referenceCount++;
          }
          /**
           * Removes a message reference from the element using aria-describedby
           * and decrements the registered message's reference count.
           * @private
           * @param {?} element
           * @param {?} message
           * @return {?}
           */

        }, {
          key: "_removeMessageReference",
          value: function _removeMessageReference(element, message) {
            /** @type {?} */
            var registeredMessage =
            /** @type {?} */
            messageRegistry.get(message);
            registeredMessage.referenceCount--;
            removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);
            element.removeAttribute(_CDK_DESCRIBEDBY_HOST_ATTRIBUTE);
          }
          /**
           * Returns true if the element has been described by the provided message ID.
           * @private
           * @param {?} element
           * @param {?} message
           * @return {?}
           */

        }, {
          key: "_isElementDescribedByMessage",
          value: function _isElementDescribedByMessage(element, message) {
            /** @type {?} */
            var referenceIds = getAriaReferenceIds(element, 'aria-describedby');
            /** @type {?} */

            var registeredMessage = messageRegistry.get(message);
            /** @type {?} */

            var messageId = registeredMessage && registeredMessage.messageElement.id;
            return !!messageId && referenceIds.indexOf(messageId) != -1;
          }
          /**
           * Determines whether a message can be described on a particular element.
           * @private
           * @param {?} element
           * @param {?} message
           * @return {?}
           */

        }, {
          key: "_canBeDescribed",
          value: function _canBeDescribed(element, message) {
            if (!this._isElementNode(element)) {
              return false;
            }

            if (message && typeof message === 'object') {
              // We'd have to make some assumptions about the description element's text, if the consumer
              // passed in an element. Assume that if an element is passed in, the consumer has verified
              // that it can be used as a description.
              return true;
            }
            /** @type {?} */


            var trimmedMessage = message == null ? '' : "".concat(message).trim();
            /** @type {?} */

            var ariaLabel = element.getAttribute('aria-label'); // We shouldn't set descriptions if they're exactly the same as the `aria-label` of the
            // element, because screen readers will end up reading out the same text twice in a row.

            return trimmedMessage ? !ariaLabel || ariaLabel.trim() !== trimmedMessage : false;
          }
          /**
           * Checks whether a node is an Element node.
           * @private
           * @param {?} element
           * @return {?}
           */

        }, {
          key: "_isElementNode",
          value: function _isElementNode(element) {
            return element.nodeType === this._document.ELEMENT_NODE;
          }
        }]);

        return _AriaDescriber;
      }();

      _AriaDescriber.ɵfac = function AriaDescriber_Factory(t) {
        return new (t || _AriaDescriber)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT));
      };
      /** @nocollapse */


      _AriaDescriber.ctorParameters = function () {
        return [{
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT]
          }]
        }];
      };
      /** @nocollapse */


      _AriaDescriber.ɵprov = (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
        factory: function AriaDescriber_Factory() {
          return new _AriaDescriber((0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT));
        },
        token: _AriaDescriber,
        providedIn: "root"
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_AriaDescriber, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [{
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT]
            }]
          }];
        }, null);
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/a11y/key-manager/list-key-manager.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * This interface is for items that can be passed to a ListKeyManager.
       * @record
       */


      function ListKeyManagerOption() {}

      if (false) {}
      /**
       * This class manages keyboard events for selectable lists. If you pass it a query list
       * of items, it will set the active item correctly when arrow events occur.
       * @template T
       */


      var _ListKeyManager = /*#__PURE__*/function () {
        /**
         * @param {?} _items
         */
        function _ListKeyManager(_items) {
          var _this = this;

          _classCallCheck(this, _ListKeyManager);

          this._items = _items;
          this._activeItemIndex = -1;
          this._activeItem = null;
          this._wrap = false;
          this._letterKeyStream = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Subject();
          this._typeaheadSubscription = rxjs__WEBPACK_IMPORTED_MODULE_3__.Subscription.EMPTY;
          this._vertical = true;
          this._allowedModifierKeys = [];
          /**
           * Predicate function that can be used to check whether an item should be skipped
           * by the key manager. By default, disabled items are skipped.
           */

          this._skipPredicateFn =
          /**
          * @param {?} item
          * @return {?}
          */
          function (item) {
            return item.disabled;
          }; // Buffer for the letters that the user has pressed when the typeahead option is turned on.


          this._pressedLetters = [];
          /**
           * Stream that emits any time the TAB key is pressed, so components can react
           * when focus is shifted off of the list.
           */

          this.tabOut = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Subject();
          /**
           * Stream that emits whenever the active item of the list manager changes.
           */

          this.change = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Subject(); // We allow for the items to be an array because, in some cases, the consumer may
          // not have access to a QueryList of the items they want to manage (e.g. when the
          // items aren't being collected via `ViewChildren` or `ContentChildren`).

          if (_items instanceof _angular_core__WEBPACK_IMPORTED_MODULE_0__.QueryList) {
            _items.changes.subscribe(
            /**
            * @param {?} newItems
            * @return {?}
            */
            function (newItems) {
              if (_this._activeItem) {
                /** @type {?} */
                var itemArray = newItems.toArray();
                /** @type {?} */

                var newIndex = itemArray.indexOf(_this._activeItem);

                if (newIndex > -1 && newIndex !== _this._activeItemIndex) {
                  _this._activeItemIndex = newIndex;
                }
              }
            });
          }
        }
        /**
         * Sets the predicate function that determines which items should be skipped by the
         * list key manager.
         * @template THIS
         * @this {THIS}
         * @param {?} predicate Function that determines whether the given item should be skipped.
         * @return {THIS}
         */


        _createClass(_ListKeyManager, [{
          key: "skipPredicate",
          value: function skipPredicate(predicate) {
            /** @type {?} */
            this._skipPredicateFn = predicate;
            return (
              /** @type {?} */
              this
            );
          }
          /**
           * Configures wrapping mode, which determines whether the active item will wrap to
           * the other end of list when there are no more items in the given direction.
           * @template THIS
           * @this {THIS}
           * @param {?=} shouldWrap Whether the list should wrap when reaching the end.
           * @return {THIS}
           */

        }, {
          key: "withWrap",
          value: function withWrap() {
            var shouldWrap = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

            /** @type {?} */
            this._wrap = shouldWrap;
            return (
              /** @type {?} */
              this
            );
          }
          /**
           * Configures whether the key manager should be able to move the selection vertically.
           * @template THIS
           * @this {THIS}
           * @param {?=} enabled Whether vertical selection should be enabled.
           * @return {THIS}
           */

        }, {
          key: "withVerticalOrientation",
          value: function withVerticalOrientation() {
            var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

            /** @type {?} */
            this._vertical = enabled;
            return (
              /** @type {?} */
              this
            );
          }
          /**
           * Configures the key manager to move the selection horizontally.
           * Passing in `null` will disable horizontal movement.
           * @template THIS
           * @this {THIS}
           * @param {?} direction Direction in which the selection can be moved.
           * @return {THIS}
           */

        }, {
          key: "withHorizontalOrientation",
          value: function withHorizontalOrientation(direction) {
            /** @type {?} */
            this._horizontal = direction;
            return (
              /** @type {?} */
              this
            );
          }
          /**
           * Modifier keys which are allowed to be held down and whose default actions will be prevented
           * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.
           * @template THIS
           * @this {THIS}
           * @param {?} keys
           * @return {THIS}
           */

        }, {
          key: "withAllowedModifierKeys",
          value: function withAllowedModifierKeys(keys) {
            /** @type {?} */
            this._allowedModifierKeys = keys;
            return (
              /** @type {?} */
              this
            );
          }
          /**
           * Turns on typeahead mode which allows users to set the active item by typing.
           * @template THIS
           * @this {THIS}
           * @param {?=} debounceInterval Time to wait after the last keystroke before setting the active item.
           * @return {THIS}
           */

        }, {
          key: "withTypeAhead",
          value: function withTypeAhead() {
            var _this2 = this;

            var debounceInterval = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 200;

            if (
            /** @type {?} */
            this._items.length &&
            /** @type {?} */
            this._items.some(
            /**
            * @param {?} item
            * @return {?}
            */
            function (item) {
              return typeof item.getLabel !== 'function';
            })) {
              throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');
            }

            /** @type {?} */
            this._typeaheadSubscription.unsubscribe(); // Debounce the presses of non-navigational keys, collect the ones that correspond to letters
            // and convert those letters back into a string. Afterwards find the first item that starts
            // with that string and select it.


            /** @type {?} */
            this._typeaheadSubscription =
            /** @type {?} */
            this._letterKeyStream.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.tap)(
            /**
            * @param {?} letter
            * @return {?}
            */
            function (letter) {
              return (
                /** @type {?} */
                _this2._pressedLetters.push(letter)
              );
            }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.debounceTime)(debounceInterval), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.filter)(
            /**
            * @return {?}
            */
            function () {
              return (
                /** @type {?} */
                _this2._pressedLetters.length > 0
              );
            }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.map)(
            /**
            * @return {?}
            */
            function () {
              return (
                /** @type {?} */
                _this2._pressedLetters.join('')
              );
            })).subscribe(
            /**
            * @param {?} inputString
            * @return {?}
            */
            function (inputString) {
              /** @type {?} */
              var items =
              /** @type {?} */
              _this2._getItemsArray(); // Start at 1 because we want to start searching at the item immediately
              // following the current active item.


              for (var i = 1; i < items.length + 1; i++) {
                /** @type {?} */
                var index = (
                /** @type {?} */
                _this2._activeItemIndex + i) % items.length;
                /** @type {?} */

                var item = items[index];

                if (!
                /** @type {?} */
                _this2._skipPredicateFn(item) &&
                /** @type {?} */
                item.getLabel().toUpperCase().trim().indexOf(inputString) === 0) {
                  /** @type {?} */
                  _this2.setActiveItem(index);

                  break;
                }
              }

              /** @type {?} */
              _this2._pressedLetters = [];
            });
            return (
              /** @type {?} */
              this
            );
          }
          /**
           * @param {?} item
           * @return {?}
           */

        }, {
          key: "setActiveItem",
          value: function setActiveItem(item) {
            /** @type {?} */
            var previousIndex = this._activeItemIndex;
            this.updateActiveItem(item);

            if (this._activeItemIndex !== previousIndex) {
              this.change.next(this._activeItemIndex);
            }
          }
          /**
           * Sets the active item depending on the key event passed in.
           * @param {?} event Keyboard event to be used for determining which element should be active.
           * @return {?}
           */

        }, {
          key: "onKeydown",
          value: function onKeydown(event) {
            var _this3 = this;

            /** @type {?} */
            var keyCode = event.keyCode;
            /** @type {?} */

            var modifiers = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];
            /** @type {?} */

            var isModifierAllowed = modifiers.every(
            /**
            * @param {?} modifier
            * @return {?}
            */
            function (modifier) {
              return !event[modifier] || _this3._allowedModifierKeys.indexOf(modifier) > -1;
            });

            switch (keyCode) {
              case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__.TAB:
                this.tabOut.next();
                return;

              case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__.DOWN_ARROW:
                if (this._vertical && isModifierAllowed) {
                  this.setNextItemActive();
                  break;
                } else {
                  return;
                }

              case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__.UP_ARROW:
                if (this._vertical && isModifierAllowed) {
                  this.setPreviousItemActive();
                  break;
                } else {
                  return;
                }

              case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__.RIGHT_ARROW:
                if (this._horizontal && isModifierAllowed) {
                  this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();
                  break;
                } else {
                  return;
                }

              case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__.LEFT_ARROW:
                if (this._horizontal && isModifierAllowed) {
                  this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();
                  break;
                } else {
                  return;
                }

              default:
                if (isModifierAllowed || (0, _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__.hasModifierKey)(event, 'shiftKey')) {
                  // Attempt to use the `event.key` which also maps it to the user's keyboard language,
                  // otherwise fall back to resolving alphanumeric characters via the keyCode.
                  if (event.key && event.key.length === 1) {
                    this._letterKeyStream.next(event.key.toLocaleUpperCase());
                  } else if (keyCode >= _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__.A && keyCode <= _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__.Z || keyCode >= _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__.ZERO && keyCode <= _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__.NINE) {
                    this._letterKeyStream.next(String.fromCharCode(keyCode));
                  }
                } // Note that we return here, in order to avoid preventing
                // the default action of non-navigational keys.


                return;
            }

            this._pressedLetters = [];
            event.preventDefault();
          }
          /**
           * Index of the currently active item.
           * @return {?}
           */

        }, {
          key: "activeItemIndex",
          get: function get() {
            return this._activeItemIndex;
          }
          /**
           * The active item.
           * @return {?}
           */

        }, {
          key: "activeItem",
          get: function get() {
            return this._activeItem;
          }
          /**
           * Gets whether the user is currently typing into the manager using the typeahead feature.
           * @return {?}
           */

        }, {
          key: "isTyping",
          value: function isTyping() {
            return this._pressedLetters.length > 0;
          }
          /**
           * Sets the active item to the first enabled item in the list.
           * @return {?}
           */

        }, {
          key: "setFirstItemActive",
          value: function setFirstItemActive() {
            this._setActiveItemByIndex(0, 1);
          }
          /**
           * Sets the active item to the last enabled item in the list.
           * @return {?}
           */

        }, {
          key: "setLastItemActive",
          value: function setLastItemActive() {
            this._setActiveItemByIndex(this._items.length - 1, -1);
          }
          /**
           * Sets the active item to the next enabled item in the list.
           * @return {?}
           */

        }, {
          key: "setNextItemActive",
          value: function setNextItemActive() {
            this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);
          }
          /**
           * Sets the active item to a previous enabled item in the list.
           * @return {?}
           */

        }, {
          key: "setPreviousItemActive",
          value: function setPreviousItemActive() {
            this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive() : this._setActiveItemByDelta(-1);
          }
          /**
           * @param {?} item
           * @return {?}
           */

        }, {
          key: "updateActiveItem",
          value: function updateActiveItem(item) {
            /** @type {?} */
            var itemArray = this._getItemsArray();
            /** @type {?} */


            var index = typeof item === 'number' ? item : itemArray.indexOf(item);
            /** @type {?} */

            var activeItem = itemArray[index]; // Explicitly check for `null` and `undefined` because other falsy values are valid.

            this._activeItem = activeItem == null ? null : activeItem;
            this._activeItemIndex = index;
          }
          /**
           * This method sets the active item, given a list of items and the delta between the
           * currently active item and the new active item. It will calculate differently
           * depending on whether wrap mode is turned on.
           * @private
           * @param {?} delta
           * @return {?}
           */

        }, {
          key: "_setActiveItemByDelta",
          value: function _setActiveItemByDelta(delta) {
            this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);
          }
          /**
           * Sets the active item properly given "wrap" mode. In other words, it will continue to move
           * down the list until it finds an item that is not disabled, and it will wrap if it
           * encounters either end of the list.
           * @private
           * @param {?} delta
           * @return {?}
           */

        }, {
          key: "_setActiveInWrapMode",
          value: function _setActiveInWrapMode(delta) {
            /** @type {?} */
            var items = this._getItemsArray();

            for (var i = 1; i <= items.length; i++) {
              /** @type {?} */
              var index = (this._activeItemIndex + delta * i + items.length) % items.length;
              /** @type {?} */

              var item = items[index];

              if (!this._skipPredicateFn(item)) {
                this.setActiveItem(index);
                return;
              }
            }
          }
          /**
           * Sets the active item properly given the default mode. In other words, it will
           * continue to move down the list until it finds an item that is not disabled. If
           * it encounters either end of the list, it will stop and not wrap.
           * @private
           * @param {?} delta
           * @return {?}
           */

        }, {
          key: "_setActiveInDefaultMode",
          value: function _setActiveInDefaultMode(delta) {
            this._setActiveItemByIndex(this._activeItemIndex + delta, delta);
          }
          /**
           * Sets the active item to the first enabled item starting at the index specified. If the
           * item is disabled, it will move in the fallbackDelta direction until it either
           * finds an enabled item or encounters the end of the list.
           * @private
           * @param {?} index
           * @param {?} fallbackDelta
           * @return {?}
           */

        }, {
          key: "_setActiveItemByIndex",
          value: function _setActiveItemByIndex(index, fallbackDelta) {
            /** @type {?} */
            var items = this._getItemsArray();

            if (!items[index]) {
              return;
            }

            while (this._skipPredicateFn(items[index])) {
              index += fallbackDelta;

              if (!items[index]) {
                return;
              }
            }

            this.setActiveItem(index);
          }
          /**
           * Returns the items as an array.
           * @private
           * @return {?}
           */

        }, {
          key: "_getItemsArray",
          value: function _getItemsArray() {
            return this._items instanceof _angular_core__WEBPACK_IMPORTED_MODULE_0__.QueryList ? this._items.toArray() : this._items;
          }
        }]);

        return _ListKeyManager;
      }();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/a11y/key-manager/activedescendant-key-manager.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * This is the interface for highlightable items (used by the ActiveDescendantKeyManager).
       * Each item must know how to style itself as active or inactive and whether or not it is
       * currently disabled.
       * @record
       */


      function Highlightable() {}

      if (false) {}
      /**
       * @template T
       */


      var _ActiveDescendantKeyManager = /*#__PURE__*/function (_ListKeyManager2) {
        _inherits(_ActiveDescendantKeyManager, _ListKeyManager2);

        var _super = _createSuper(_ActiveDescendantKeyManager);

        function _ActiveDescendantKeyManager() {
          _classCallCheck(this, _ActiveDescendantKeyManager);

          return _super.apply(this, arguments);
        }

        _createClass(_ActiveDescendantKeyManager, [{
          key: "setActiveItem",
          value:
          /**
           * @param {?} index
           * @return {?}
           */
          function setActiveItem(index) {
            if (this.activeItem) {
              this.activeItem.setInactiveStyles();
            }

            _get(_getPrototypeOf(_ActiveDescendantKeyManager.prototype), "setActiveItem", this).call(this, index);

            if (this.activeItem) {
              this.activeItem.setActiveStyles();
            }
          }
        }]);

        return _ActiveDescendantKeyManager;
      }(_ListKeyManager);
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/a11y/key-manager/focus-key-manager.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * This is the interface for focusable items (used by the FocusKeyManager).
       * Each item must know how to focus itself, whether or not it is currently disabled
       * and be able to supply its label.
       * @record
       */


      function FocusableOption() {}

      if (false) {}
      /**
       * @template T
       */


      var _FocusKeyManager = /*#__PURE__*/function (_ListKeyManager3) {
        _inherits(_FocusKeyManager, _ListKeyManager3);

        var _super2 = _createSuper(_FocusKeyManager);

        function _FocusKeyManager() {
          var _this4;

          _classCallCheck(this, _FocusKeyManager);

          _this4 = _super2.apply(this, arguments);
          _this4._origin = 'program';
          return _this4;
        }
        /**
         * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.
         * @template THIS
         * @this {THIS}
         * @param {?} origin Focus origin to be used when focusing items.
         * @return {THIS}
         */


        _createClass(_FocusKeyManager, [{
          key: "setFocusOrigin",
          value: function setFocusOrigin(origin) {
            /** @type {?} */
            this._origin = origin;
            return (
              /** @type {?} */
              this
            );
          }
          /**
           * @param {?} item
           * @return {?}
           */

        }, {
          key: "setActiveItem",
          value: function setActiveItem(item) {
            _get(_getPrototypeOf(_FocusKeyManager.prototype), "setActiveItem", this).call(this, item);

            if (this.activeItem) {
              this.activeItem.focus(this._origin);
            }
          }
        }]);

        return _FocusKeyManager;
      }(_ListKeyManager);

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/a11y/interactivity-checker/interactivity-checker.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      // The InteractivityChecker leans heavily on the ally.js accessibility utilities.
      // Methods like `isTabbable` are only covering specific edge-cases for the browsers which are
      // supported.

      /**
       * Utility for checking the interactivity of an element, such as whether is is focusable or
       * tabbable.
       */


      var _InteractivityChecker = /*#__PURE__*/function () {
        /**
         * @param {?} _platform
         */
        function _InteractivityChecker(_platform) {
          _classCallCheck(this, _InteractivityChecker);

          this._platform = _platform;
        }
        /**
         * Gets whether an element is disabled.
         *
         * @param {?} element Element to be checked.
         * @return {?} Whether the element is disabled.
         */


        _createClass(_InteractivityChecker, [{
          key: "isDisabled",
          value: function isDisabled(element) {
            // This does not capture some cases, such as a non-form control with a disabled attribute or
            // a form control inside of a disabled form, but should capture the most common cases.
            return element.hasAttribute('disabled');
          }
          /**
           * Gets whether an element is visible for the purposes of interactivity.
           *
           * This will capture states like `display: none` and `visibility: hidden`, but not things like
           * being clipped by an `overflow: hidden` parent or being outside the viewport.
           *
           * @param {?} element
           * @return {?} Whether the element is visible.
           */

        }, {
          key: "isVisible",
          value: function isVisible(element) {
            return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';
          }
          /**
           * Gets whether an element can be reached via Tab key.
           * Assumes that the element has already been checked with isFocusable.
           *
           * @param {?} element Element to be checked.
           * @return {?} Whether the element is tabbable.
           */

        }, {
          key: "isTabbable",
          value: function isTabbable(element) {
            // Nothing is tabbable on the server 😎
            if (!this._platform.isBrowser) {
              return false;
            }
            /** @type {?} */


            var frameElement = getFrameElement(getWindow(element));

            if (frameElement) {
              /** @type {?} */
              var frameType = frameElement && frameElement.nodeName.toLowerCase(); // Frame elements inherit their tabindex onto all child elements.

              if (getTabIndexValue(frameElement) === -1) {
                return false;
              } // Webkit and Blink consider anything inside of an <object> element as non-tabbable.


              if ((this._platform.BLINK || this._platform.WEBKIT) && frameType === 'object') {
                return false;
              } // Webkit and Blink disable tabbing to an element inside of an invisible frame.


              if ((this._platform.BLINK || this._platform.WEBKIT) && !this.isVisible(frameElement)) {
                return false;
              }
            }
            /** @type {?} */


            var nodeName = element.nodeName.toLowerCase();
            /** @type {?} */

            var tabIndexValue = getTabIndexValue(element);

            if (element.hasAttribute('contenteditable')) {
              return tabIndexValue !== -1;
            }

            if (nodeName === 'iframe') {
              // The frames may be tabbable depending on content, but it's not possibly to reliably
              // investigate the content of the frames.
              return false;
            }

            if (nodeName === 'audio') {
              if (!element.hasAttribute('controls')) {
                // By default an <audio> element without the controls enabled is not tabbable.
                return false;
              } else if (this._platform.BLINK) {
                // In Blink <audio controls> elements are always tabbable.
                return true;
              }
            }

            if (nodeName === 'video') {
              if (!element.hasAttribute('controls') && this._platform.TRIDENT) {
                // In Trident a <video> element without the controls enabled is not tabbable.
                return false;
              } else if (this._platform.BLINK || this._platform.FIREFOX) {
                // In Chrome and Firefox <video controls> elements are always tabbable.
                return true;
              }
            }

            if (nodeName === 'object' && (this._platform.BLINK || this._platform.WEBKIT)) {
              // In all Blink and WebKit based browsers <object> elements are never tabbable.
              return false;
            } // In iOS the browser only considers some specific elements as tabbable.


            if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {
              return false;
            }

            return element.tabIndex >= 0;
          }
          /**
           * Gets whether an element can be focused by the user.
           *
           * @param {?} element Element to be checked.
           * @return {?} Whether the element is focusable.
           */

        }, {
          key: "isFocusable",
          value: function isFocusable(element) {
            // Perform checks in order of left to most expensive.
            // Again, naive approach that does not capture many edge cases and browser quirks.
            return isPotentiallyFocusable(element) && !this.isDisabled(element) && this.isVisible(element);
          }
        }]);

        return _InteractivityChecker;
      }();

      _InteractivityChecker.ɵfac = function InteractivityChecker_Factory(t) {
        return new (t || _InteractivityChecker)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.Platform));
      };
      /** @nocollapse */


      _InteractivityChecker.ctorParameters = function () {
        return [{
          type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.Platform
        }];
      };
      /** @nocollapse */


      _InteractivityChecker.ɵprov = (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
        factory: function InteractivityChecker_Factory() {
          return new _InteractivityChecker((0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.Platform));
        },
        token: _InteractivityChecker,
        providedIn: "root"
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_InteractivityChecker, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [{
            type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.Platform
          }];
        }, null);
      })();

      if (false) {}
      /**
       * Returns the frame element from a window object. Since browsers like MS Edge throw errors if
       * the frameElement property is being accessed from a different host address, this property
       * should be accessed carefully.
       * @param {?} window
       * @return {?}
       */


      function getFrameElement(window) {
        try {
          return (
            /** @type {?} */
            window.frameElement
          );
        } catch (_a) {
          return null;
        }
      }
      /**
       * Checks whether the specified element has any geometry / rectangles.
       * @param {?} element
       * @return {?}
       */


      function hasGeometry(element) {
        // Use logic from jQuery to check for an invisible element.
        // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12
        return !!(element.offsetWidth || element.offsetHeight || typeof element.getClientRects === 'function' && element.getClientRects().length);
      }
      /**
       * Gets whether an element's
       * @param {?} element
       * @return {?}
       */


      function isNativeFormElement(element) {
        /** @type {?} */
        var nodeName = element.nodeName.toLowerCase();
        return nodeName === 'input' || nodeName === 'select' || nodeName === 'button' || nodeName === 'textarea';
      }
      /**
       * Gets whether an element is an `<input type="hidden">`.
       * @param {?} element
       * @return {?}
       */


      function isHiddenInput(element) {
        return isInputElement(element) && element.type == 'hidden';
      }
      /**
       * Gets whether an element is an anchor that has an href attribute.
       * @param {?} element
       * @return {?}
       */


      function isAnchorWithHref(element) {
        return isAnchorElement(element) && element.hasAttribute('href');
      }
      /**
       * Gets whether an element is an input element.
       * @param {?} element
       * @return {?}
       */


      function isInputElement(element) {
        return element.nodeName.toLowerCase() == 'input';
      }
      /**
       * Gets whether an element is an anchor element.
       * @param {?} element
       * @return {?}
       */


      function isAnchorElement(element) {
        return element.nodeName.toLowerCase() == 'a';
      }
      /**
       * Gets whether an element has a valid tabindex.
       * @param {?} element
       * @return {?}
       */


      function hasValidTabIndex(element) {
        if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {
          return false;
        }
        /** @type {?} */


        var tabIndex = element.getAttribute('tabindex'); // IE11 parses tabindex="" as the value "-32768"

        if (tabIndex == '-32768') {
          return false;
        }

        return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));
      }
      /**
       * Returns the parsed tabindex from the element attributes instead of returning the
       * evaluated tabindex from the browsers defaults.
       * @param {?} element
       * @return {?}
       */


      function getTabIndexValue(element) {
        if (!hasValidTabIndex(element)) {
          return null;
        } // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054

        /** @type {?} */


        var tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);
        return isNaN(tabIndex) ? -1 : tabIndex;
      }
      /**
       * Checks whether the specified element is potentially tabbable on iOS
       * @param {?} element
       * @return {?}
       */


      function isPotentiallyTabbableIOS(element) {
        /** @type {?} */
        var nodeName = element.nodeName.toLowerCase();
        /** @type {?} */

        var inputType = nodeName === 'input' &&
        /** @type {?} */
        element.type;
        return inputType === 'text' || inputType === 'password' || nodeName === 'select' || nodeName === 'textarea';
      }
      /**
       * Gets whether an element is potentially focusable without taking current visible/disabled state
       * into account.
       * @param {?} element
       * @return {?}
       */


      function isPotentiallyFocusable(element) {
        // Inputs are potentially focusable *unless* they're type="hidden".
        if (isHiddenInput(element)) {
          return false;
        }

        return isNativeFormElement(element) || isAnchorWithHref(element) || element.hasAttribute('contenteditable') || hasValidTabIndex(element);
      }
      /**
       * Gets the parent window of a DOM node with regards of being inside of an iframe.
       * @param {?} node
       * @return {?}
       */


      function getWindow(node) {
        // ownerDocument is null if `node` itself *is* a document.
        return node.ownerDocument && node.ownerDocument.defaultView || window;
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/a11y/focus-trap/focus-trap.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Class that allows for trapping focus within a DOM element.
       *
       * This class currently uses a relatively simple approach to focus trapping.
       * It assumes that the tab order is the same as DOM order, which is not necessarily true.
       * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause to two to misalign.
       *
       * @deprecated Use `ConfigurableFocusTrap` instead.
       * \@breaking-change for 11.0.0 Remove this class.
       */


      var _FocusTrap = /*#__PURE__*/function () {
        /**
         * @param {?} _element
         * @param {?} _checker
         * @param {?} _ngZone
         * @param {?} _document
         * @param {?=} deferAnchors
         */
        function _FocusTrap(_element, _checker, _ngZone, _document) {
          var _this5 = this;

          var deferAnchors = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

          _classCallCheck(this, _FocusTrap);

          this._element = _element;
          this._checker = _checker;
          this._ngZone = _ngZone;
          this._document = _document;
          this._hasAttached = false; // Event listeners for the anchors. Need to be regular functions so that we can unbind them later.

          this.startAnchorListener =
          /**
          * @return {?}
          */
          function () {
            return _this5.focusLastTabbableElement();
          };

          this.endAnchorListener =
          /**
          * @return {?}
          */
          function () {
            return _this5.focusFirstTabbableElement();
          };

          this._enabled = true;

          if (!deferAnchors) {
            this.attachAnchors();
          }
        }
        /**
         * Whether the focus trap is active.
         * @return {?}
         */


        _createClass(_FocusTrap, [{
          key: "enabled",
          get: function get() {
            return this._enabled;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._enabled = value;

            if (this._startAnchor && this._endAnchor) {
              this._toggleAnchorTabIndex(value, this._startAnchor);

              this._toggleAnchorTabIndex(value, this._endAnchor);
            }
          }
          /**
           * Destroys the focus trap by cleaning up the anchors.
           * @return {?}
           */

        }, {
          key: "destroy",
          value: function destroy() {
            /** @type {?} */
            var startAnchor = this._startAnchor;
            /** @type {?} */

            var endAnchor = this._endAnchor;

            if (startAnchor) {
              startAnchor.removeEventListener('focus', this.startAnchorListener);

              if (startAnchor.parentNode) {
                startAnchor.parentNode.removeChild(startAnchor);
              }
            }

            if (endAnchor) {
              endAnchor.removeEventListener('focus', this.endAnchorListener);

              if (endAnchor.parentNode) {
                endAnchor.parentNode.removeChild(endAnchor);
              }
            }

            this._startAnchor = this._endAnchor = null;
          }
          /**
           * Inserts the anchors into the DOM. This is usually done automatically
           * in the constructor, but can be deferred for cases like directives with `*ngIf`.
           * @return {?} Whether the focus trap managed to attach successfuly. This may not be the case
           * if the target element isn't currently in the DOM.
           */

        }, {
          key: "attachAnchors",
          value: function attachAnchors() {
            var _this6 = this;

            // If we're not on the browser, there can be no focus to trap.
            if (this._hasAttached) {
              return true;
            }

            this._ngZone.runOutsideAngular(
            /**
            * @return {?}
            */
            function () {
              if (!_this6._startAnchor) {
                _this6._startAnchor = _this6._createAnchor();

                /** @type {?} */
                _this6._startAnchor.addEventListener('focus', _this6.startAnchorListener);
              }

              if (!_this6._endAnchor) {
                _this6._endAnchor = _this6._createAnchor();

                /** @type {?} */
                _this6._endAnchor.addEventListener('focus', _this6.endAnchorListener);
              }
            });

            if (this._element.parentNode) {
              this._element.parentNode.insertBefore(
              /** @type {?} */
              this._startAnchor, this._element);

              this._element.parentNode.insertBefore(
              /** @type {?} */
              this._endAnchor, this._element.nextSibling);

              this._hasAttached = true;
            }

            return this._hasAttached;
          }
          /**
           * Waits for the zone to stabilize, then either focuses the first element that the
           * user specified, or the first tabbable element.
           * @return {?} Returns a promise that resolves with a boolean, depending
           * on whether focus was moved successfuly.
           */

        }, {
          key: "focusInitialElementWhenReady",
          value: function focusInitialElementWhenReady() {
            var _this7 = this;

            return new Promise(
            /**
            * @param {?} resolve
            * @return {?}
            */
            function (resolve) {
              _this7._executeOnStable(
              /**
              * @return {?}
              */
              function () {
                return resolve(_this7.focusInitialElement());
              });
            });
          }
          /**
           * Waits for the zone to stabilize, then focuses
           * the first tabbable element within the focus trap region.
           * @return {?} Returns a promise that resolves with a boolean, depending
           * on whether focus was moved successfuly.
           */

        }, {
          key: "focusFirstTabbableElementWhenReady",
          value: function focusFirstTabbableElementWhenReady() {
            var _this8 = this;

            return new Promise(
            /**
            * @param {?} resolve
            * @return {?}
            */
            function (resolve) {
              _this8._executeOnStable(
              /**
              * @return {?}
              */
              function () {
                return resolve(_this8.focusFirstTabbableElement());
              });
            });
          }
          /**
           * Waits for the zone to stabilize, then focuses
           * the last tabbable element within the focus trap region.
           * @return {?} Returns a promise that resolves with a boolean, depending
           * on whether focus was moved successfuly.
           */

        }, {
          key: "focusLastTabbableElementWhenReady",
          value: function focusLastTabbableElementWhenReady() {
            var _this9 = this;

            return new Promise(
            /**
            * @param {?} resolve
            * @return {?}
            */
            function (resolve) {
              _this9._executeOnStable(
              /**
              * @return {?}
              */
              function () {
                return resolve(_this9.focusLastTabbableElement());
              });
            });
          }
          /**
           * Get the specified boundary element of the trapped region.
           * @private
           * @param {?} bound The boundary to get (start or end of trapped region).
           * @return {?} The boundary element.
           */

        }, {
          key: "_getRegionBoundary",
          value: function _getRegionBoundary(bound) {
            // Contains the deprecated version of selector, for temporary backwards comparability.

            /** @type {?} */
            var markers =
            /** @type {?} */
            this._element.querySelectorAll("[cdk-focus-region-".concat(bound, "], ") + "[cdkFocusRegion".concat(bound, "], ") + "[cdk-focus-".concat(bound, "]"));

            for (var i = 0; i < markers.length; i++) {
              // @breaking-change 8.0.0
              if (markers[i].hasAttribute("cdk-focus-".concat(bound))) {
                console.warn("Found use of deprecated attribute 'cdk-focus-".concat(bound, "', ") + "use 'cdkFocusRegion".concat(bound, "' instead. The deprecated ") + "attribute will be removed in 8.0.0.", markers[i]);
              } else if (markers[i].hasAttribute("cdk-focus-region-".concat(bound))) {
                console.warn("Found use of deprecated attribute 'cdk-focus-region-".concat(bound, "', ") + "use 'cdkFocusRegion".concat(bound, "' instead. The deprecated attribute ") + "will be removed in 8.0.0.", markers[i]);
              }
            }

            if (bound == 'start') {
              return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);
            }

            return markers.length ? markers[markers.length - 1] : this._getLastTabbableElement(this._element);
          }
          /**
           * Focuses the element that should be focused when the focus trap is initialized.
           * @return {?} Whether focus was moved successfuly.
           */

        }, {
          key: "focusInitialElement",
          value: function focusInitialElement() {
            // Contains the deprecated version of selector, for temporary backwards comparability.

            /** @type {?} */
            var redirectToElement =
            /** @type {?} */
            this._element.querySelector("[cdk-focus-initial], " + "[cdkFocusInitial]");

            if (redirectToElement) {
              // @breaking-change 8.0.0
              if (redirectToElement.hasAttribute("cdk-focus-initial")) {
                console.warn("Found use of deprecated attribute 'cdk-focus-initial', " + "use 'cdkFocusInitial' instead. The deprecated attribute " + "will be removed in 8.0.0", redirectToElement);
              } // Warn the consumer if the element they've pointed to
              // isn't focusable, when not in production mode.


              if ((0, _angular_core__WEBPACK_IMPORTED_MODULE_0__.isDevMode)() && !this._checker.isFocusable(redirectToElement)) {
                console.warn("Element matching '[cdkFocusInitial]' is not focusable.", redirectToElement);
              }

              redirectToElement.focus();
              return true;
            }

            return this.focusFirstTabbableElement();
          }
          /**
           * Focuses the first tabbable element within the focus trap region.
           * @return {?} Whether focus was moved successfuly.
           */

        }, {
          key: "focusFirstTabbableElement",
          value: function focusFirstTabbableElement() {
            /** @type {?} */
            var redirectToElement = this._getRegionBoundary('start');

            if (redirectToElement) {
              redirectToElement.focus();
            }

            return !!redirectToElement;
          }
          /**
           * Focuses the last tabbable element within the focus trap region.
           * @return {?} Whether focus was moved successfuly.
           */

        }, {
          key: "focusLastTabbableElement",
          value: function focusLastTabbableElement() {
            /** @type {?} */
            var redirectToElement = this._getRegionBoundary('end');

            if (redirectToElement) {
              redirectToElement.focus();
            }

            return !!redirectToElement;
          }
          /**
           * Checks whether the focus trap has successfuly been attached.
           * @return {?}
           */

        }, {
          key: "hasAttached",
          value: function hasAttached() {
            return this._hasAttached;
          }
          /**
           * Get the first tabbable element from a DOM subtree (inclusive).
           * @private
           * @param {?} root
           * @return {?}
           */

        }, {
          key: "_getFirstTabbableElement",
          value: function _getFirstTabbableElement(root) {
            if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {
              return root;
            } // Iterate in DOM order. Note that IE doesn't have `children` for SVG so we fall
            // back to `childNodes` which includes text nodes, comments etc.

            /** @type {?} */


            var children = root.children || root.childNodes;

            for (var i = 0; i < children.length; i++) {
              /** @type {?} */
              var tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getFirstTabbableElement(
              /** @type {?} */
              children[i]) : null;

              if (tabbableChild) {
                return tabbableChild;
              }
            }

            return null;
          }
          /**
           * Get the last tabbable element from a DOM subtree (inclusive).
           * @private
           * @param {?} root
           * @return {?}
           */

        }, {
          key: "_getLastTabbableElement",
          value: function _getLastTabbableElement(root) {
            if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {
              return root;
            } // Iterate in reverse DOM order.

            /** @type {?} */


            var children = root.children || root.childNodes;

            for (var i = children.length - 1; i >= 0; i--) {
              /** @type {?} */
              var tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getLastTabbableElement(
              /** @type {?} */
              children[i]) : null;

              if (tabbableChild) {
                return tabbableChild;
              }
            }

            return null;
          }
          /**
           * Creates an anchor element.
           * @private
           * @return {?}
           */

        }, {
          key: "_createAnchor",
          value: function _createAnchor() {
            /** @type {?} */
            var anchor = this._document.createElement('div');

            this._toggleAnchorTabIndex(this._enabled, anchor);

            anchor.classList.add('cdk-visually-hidden');
            anchor.classList.add('cdk-focus-trap-anchor');
            anchor.setAttribute('aria-hidden', 'true');
            return anchor;
          }
          /**
           * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.
           * @private
           * @param {?} isEnabled Whether the focus trap is enabled.
           * @param {?} anchor Anchor on which to toggle the tabindex.
           * @return {?}
           */

        }, {
          key: "_toggleAnchorTabIndex",
          value: function _toggleAnchorTabIndex(isEnabled, anchor) {
            // Remove the tabindex completely, rather than setting it to -1, because if the
            // element has a tabindex, the user might still hit it when navigating with the arrow keys.
            isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');
          }
          /**
           * Toggles the`tabindex` of both anchors to either trap Tab focus or allow it to escape.
           * @protected
           * @param {?} enabled
           * @return {?}
           */

        }, {
          key: "toggleAnchors",
          value: function toggleAnchors(enabled) {
            if (this._startAnchor && this._endAnchor) {
              this._toggleAnchorTabIndex(enabled, this._startAnchor);

              this._toggleAnchorTabIndex(enabled, this._endAnchor);
            }
          }
          /**
           * Executes a function when the zone is stable.
           * @private
           * @param {?} fn
           * @return {?}
           */

        }, {
          key: "_executeOnStable",
          value: function _executeOnStable(fn) {
            if (this._ngZone.isStable) {
              fn();
            } else {
              this._ngZone.onStable.asObservable().pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_10__.take)(1)).subscribe(fn);
            }
          }
        }]);

        return _FocusTrap;
      }();

      if (false) {}
      /**
       * Factory that allows easy instantiation of focus traps.
       * @deprecated Use `ConfigurableFocusTrapFactory` instead.
       * \@breaking-change for 11.0.0 Remove this class.
       */


      var _FocusTrapFactory = /*#__PURE__*/function () {
        /**
         * @param {?} _checker
         * @param {?} _ngZone
         * @param {?} _document
         */
        function _FocusTrapFactory(_checker, _ngZone, _document) {
          _classCallCheck(this, _FocusTrapFactory);

          this._checker = _checker;
          this._ngZone = _ngZone;
          this._document = _document;
        }
        /**
         * Creates a focus-trapped region around the given element.
         * @param {?} element The element around which focus will be trapped.
         * @param {?=} deferCaptureElements Defers the creation of focus-capturing elements to be done
         *     manually by the user.
         * @return {?} The created focus trap instance.
         */


        _createClass(_FocusTrapFactory, [{
          key: "create",
          value: function create(element) {
            var deferCaptureElements = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            return new _FocusTrap(element, this._checker, this._ngZone, this._document, deferCaptureElements);
          }
        }]);

        return _FocusTrapFactory;
      }();

      _FocusTrapFactory.ɵfac = function FocusTrapFactory_Factory(t) {
        return new (t || _FocusTrapFactory)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_InteractivityChecker), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT));
      };
      /** @nocollapse */


      _FocusTrapFactory.ctorParameters = function () {
        return [{
          type: _InteractivityChecker
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT]
          }]
        }];
      };
      /** @nocollapse */


      _FocusTrapFactory.ɵprov = (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
        factory: function FocusTrapFactory_Factory() {
          return new _FocusTrapFactory((0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_InteractivityChecker), (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone), (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT));
        },
        token: _FocusTrapFactory,
        providedIn: "root"
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_FocusTrapFactory, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [{
            type: _InteractivityChecker
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT]
            }]
          }];
        }, null);
      })();

      if (false) {}
      /**
       * Directive for trapping focus within a region.
       */


      var _CdkTrapFocus = /*#__PURE__*/function () {
        /**
         * @param {?} _elementRef
         * @param {?} _focusTrapFactory
         * @param {?} _document
         */
        function _CdkTrapFocus(_elementRef, _focusTrapFactory, _document) {
          _classCallCheck(this, _CdkTrapFocus);

          this._elementRef = _elementRef;
          this._focusTrapFactory = _focusTrapFactory;
          /**
           * Previously focused element to restore focus to upon destroy when using autoCapture.
           */

          this._previouslyFocusedElement = null;
          this._document = _document;
          this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);
        }
        /**
         * Whether the focus trap is active.
         * @return {?}
         */


        _createClass(_CdkTrapFocus, [{
          key: "enabled",
          get: function get() {
            return this.focusTrap.enabled;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this.focusTrap.enabled = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_11__.coerceBooleanProperty)(value);
          }
          /**
           * Whether the directive should automatially move focus into the trapped region upon
           * initialization and return focus to the previous activeElement upon destruction.
           * @return {?}
           */

        }, {
          key: "autoCapture",
          get: function get() {
            return this._autoCapture;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._autoCapture = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_11__.coerceBooleanProperty)(value);
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.focusTrap.destroy(); // If we stored a previously focused element when using autoCapture, return focus to that
            // element now that the trapped region is being destroyed.

            if (this._previouslyFocusedElement) {
              this._previouslyFocusedElement.focus();

              this._previouslyFocusedElement = null;
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngAfterContentInit",
          value: function ngAfterContentInit() {
            this.focusTrap.attachAnchors();

            if (this.autoCapture) {
              this._previouslyFocusedElement =
              /** @type {?} */
              this._document.activeElement;
              this.focusTrap.focusInitialElementWhenReady();
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngDoCheck",
          value: function ngDoCheck() {
            if (!this.focusTrap.hasAttached()) {
              this.focusTrap.attachAnchors();
            }
          }
        }]);

        return _CdkTrapFocus;
      }();

      _CdkTrapFocus.ɵfac = function CdkTrapFocus_Factory(t) {
        return new (t || _CdkTrapFocus)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_FocusTrapFactory), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT));
      };

      _CdkTrapFocus.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: _CdkTrapFocus,
        selectors: [["", "cdkTrapFocus", ""]],
        inputs: {
          enabled: ["cdkTrapFocus", "enabled"],
          autoCapture: ["cdkTrapFocusAutoCapture", "autoCapture"]
        },
        exportAs: ["cdkTrapFocus"]
      });
      /** @nocollapse */

      _CdkTrapFocus.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
        }, {
          type: _FocusTrapFactory
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT]
          }]
        }];
      };

      _CdkTrapFocus.propDecorators = {
        enabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
          args: ['cdkTrapFocus']
        }],
        autoCapture: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
          args: ['cdkTrapFocusAutoCapture']
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_CdkTrapFocus, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
          args: [{
            selector: '[cdkTrapFocus]',
            exportAs: 'cdkTrapFocus'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
          }, {
            type: _FocusTrapFactory
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT]
            }]
          }];
        }, {
          enabled: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
            args: ['cdkTrapFocus']
          }],
          autoCapture: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
            args: ['cdkTrapFocusAutoCapture']
          }]
        });
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/a11y/focus-trap/configurable-focus-trap.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Class that allows for trapping focus within a DOM element.
       *
       * This class uses a strategy pattern that determines how it traps focus.
       * See FocusTrapInertStrategy.
       */


      var _ConfigurableFocusTrap = /*#__PURE__*/function (_FocusTrap2) {
        _inherits(_ConfigurableFocusTrap, _FocusTrap2);

        var _super3 = _createSuper(_ConfigurableFocusTrap);

        /**
         * @param {?} _element
         * @param {?} _checker
         * @param {?} _ngZone
         * @param {?} _document
         * @param {?} _focusTrapManager
         * @param {?} _inertStrategy
         * @param {?} config
         */
        function _ConfigurableFocusTrap(_element, _checker, _ngZone, _document, _focusTrapManager, _inertStrategy, config) {
          var _this10;

          _classCallCheck(this, _ConfigurableFocusTrap);

          _this10 = _super3.call(this, _element, _checker, _ngZone, _document, config.defer);
          _this10._focusTrapManager = _focusTrapManager;
          _this10._inertStrategy = _inertStrategy;

          _this10._focusTrapManager.register(_assertThisInitialized(_this10));

          return _this10;
        }
        /**
         * Whether the FocusTrap is enabled.
         * @return {?}
         */


        _createClass(_ConfigurableFocusTrap, [{
          key: "enabled",
          get: function get() {
            return this._enabled;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._enabled = value;

            if (this._enabled) {
              this._focusTrapManager.register(this);
            } else {
              this._focusTrapManager.deregister(this);
            }
          }
          /**
           * Notifies the FocusTrapManager that this FocusTrap will be destroyed.
           * @return {?}
           */

        }, {
          key: "destroy",
          value: function destroy() {
            this._focusTrapManager.deregister(this);

            _get(_getPrototypeOf(_ConfigurableFocusTrap.prototype), "destroy", this).call(this);
          }
          /**
           * \@docs-private Implemented as part of ManagedFocusTrap.
           * @return {?}
           */

        }, {
          key: "_enable",
          value: function _enable() {
            this._inertStrategy.preventFocus(this);

            this.toggleAnchors(true);
          }
          /**
           * \@docs-private Implemented as part of ManagedFocusTrap.
           * @return {?}
           */

        }, {
          key: "_disable",
          value: function _disable() {
            this._inertStrategy.allowFocus(this);

            this.toggleAnchors(false);
          }
        }]);

        return _ConfigurableFocusTrap;
      }(_FocusTrap);

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/a11y/focus-trap/polyfill.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * IE 11 compatible closest implementation that is able to start from non-Element Nodes.
       * @param {?} element
       * @param {?} selector
       * @return {?}
       */


      function closest(element, selector) {
        if (!(element instanceof Node)) {
          return null;
        }
        /** @type {?} */


        var curr = element;

        while (curr != null && !(curr instanceof Element)) {
          curr = curr.parentNode;
        }

        return curr && (
        /** @type {?} */
        hasNativeClosest ? curr.closest(selector) : polyfillClosest(curr, selector));
      }
      /**
       * Polyfill for browsers without Element.closest.
       * @param {?} element
       * @param {?} selector
       * @return {?}
       */


      function polyfillClosest(element, selector) {
        /** @type {?} */
        var curr = element;

        while (curr != null && !(curr instanceof Element && matches(curr, selector))) {
          curr = curr.parentNode;
        }

        return (
          /** @type {?} */
          curr || null
        );
      }
      /** @type {?} */


      var hasNativeClosest = typeof Element != 'undefined' && !!Element.prototype.closest;
      /**
       * IE 11 compatible matches implementation.
       * @param {?} element
       * @param {?} selector
       * @return {?}
       */

      function matches(element, selector) {
        return element.matches ? element.matches(selector) :
        /** @type {?} */
        element['msMatchesSelector'](selector);
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/a11y/focus-trap/event-listener-inert-strategy.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Lightweight FocusTrapInertStrategy that adds a document focus event
       * listener to redirect focus back inside the FocusTrap.
       */


      var _EventListenerFocusTrapInertStrategy = /*#__PURE__*/function () {
        function _EventListenerFocusTrapInertStrategy() {
          _classCallCheck(this, _EventListenerFocusTrapInertStrategy);

          /**
           * Focus event handler.
           */
          this._listener = null;
        }
        /**
         * Adds a document event listener that keeps focus inside the FocusTrap.
         * @param {?} focusTrap
         * @return {?}
         */


        _createClass(_EventListenerFocusTrapInertStrategy, [{
          key: "preventFocus",
          value: function preventFocus(focusTrap) {
            var _this11 = this;

            // Ensure there's only one listener per document
            if (this._listener) {
              focusTrap._document.removeEventListener('focus',
              /** @type {?} */
              this._listener, true);
            }

            this._listener =
            /**
            * @param {?} e
            * @return {?}
            */
            function (e) {
              return _this11._trapFocus(focusTrap, e);
            };

            focusTrap._ngZone.runOutsideAngular(
            /**
            * @return {?}
            */
            function () {
              focusTrap._document.addEventListener('focus',
              /** @type {?} */
              _this11._listener, true);
            });
          }
          /**
           * Removes the event listener added in preventFocus.
           * @param {?} focusTrap
           * @return {?}
           */

        }, {
          key: "allowFocus",
          value: function allowFocus(focusTrap) {
            if (!this._listener) {
              return;
            }

            focusTrap._document.removeEventListener('focus',
            /** @type {?} */
            this._listener, true);

            this._listener = null;
          }
          /**
           * Refocuses the first element in the FocusTrap if the focus event target was outside
           * the FocusTrap.
           *
           * This is an event listener callback. The event listener is added in runOutsideAngular,
           * so all this code runs outside Angular as well.
           * @private
           * @param {?} focusTrap
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "_trapFocus",
          value: function _trapFocus(focusTrap, event) {
            /** @type {?} */
            var target =
            /** @type {?} */
            event.target;
            /** @type {?} */

            var focusTrapRoot = focusTrap._element; // Don't refocus if target was in an overlay, because the overlay might be associated
            // with an element inside the FocusTrap, ex. mat-select.

            if (!focusTrapRoot.contains(target) && closest(target, 'div.cdk-overlay-pane') === null) {
              // Some legacy FocusTrap usages have logic that focuses some element on the page
              // just before FocusTrap is destroyed. For backwards compatibility, wait
              // to be sure FocusTrap is still enabled before refocusing.
              setTimeout(
              /**
              * @return {?}
              */
              function () {
                // Check whether focus wasn't put back into the focus trap while the timeout was pending.
                if (focusTrap.enabled && !focusTrapRoot.contains(focusTrap._document.activeElement)) {
                  focusTrap.focusFirstTabbableElement();
                }
              });
            }
          }
        }]);

        return _EventListenerFocusTrapInertStrategy;
      }();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/a11y/focus-trap/configurable-focus-trap-config.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Configuration for creating a ConfigurableFocusTrap.
       */


      var ConfigurableFocusTrapConfig = function ConfigurableFocusTrapConfig() {
        _classCallCheck(this, ConfigurableFocusTrapConfig);

        /**
         * Whether to defer the creation of FocusTrap elements to be
         * done manually by the user. Default is to create them
         * automatically.
         */
        this.defer = false;
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/a11y/focus-trap/focus-trap-inert-strategy.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * The injection token used to specify the inert strategy.
       * @type {?}
       */


      var _FOCUS_TRAP_INERT_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('FOCUS_TRAP_INERT_STRATEGY');
      /**
       * A strategy that dictates how FocusTrap should prevent elements
       * outside of the FocusTrap from being focused.
       * @record
       */


      function FocusTrapInertStrategy() {}

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/a11y/focus-trap/focus-trap-manager.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * A FocusTrap managed by FocusTrapManager.
       * Implemented by ConfigurableFocusTrap to avoid circular dependency.
       * @record
       */


      function ManagedFocusTrap() {}

      if (false) {}
      /**
       * Injectable that ensures only the most recently enabled FocusTrap is active.
       */


      var FocusTrapManager = /*#__PURE__*/function () {
        function FocusTrapManager() {
          _classCallCheck(this, FocusTrapManager);

          // A stack of the FocusTraps on the page. Only the FocusTrap at the
          // top of the stack is active.
          this._focusTrapStack = [];
        }
        /**
         * Disables the FocusTrap at the top of the stack, and then pushes
         * the new FocusTrap onto the stack.
         * @param {?} focusTrap
         * @return {?}
         */


        _createClass(FocusTrapManager, [{
          key: "register",
          value: function register(focusTrap) {
            // Dedupe focusTraps that register multiple times.
            this._focusTrapStack = this._focusTrapStack.filter(
            /**
            * @param {?} ft
            * @return {?}
            */
            function (ft) {
              return ft !== focusTrap;
            });
            /** @type {?} */

            var stack = this._focusTrapStack;

            if (stack.length) {
              stack[stack.length - 1]._disable();
            }

            stack.push(focusTrap);

            focusTrap._enable();
          }
          /**
           * Removes the FocusTrap from the stack, and activates the
           * FocusTrap that is the new top of the stack.
           * @param {?} focusTrap
           * @return {?}
           */

        }, {
          key: "deregister",
          value: function deregister(focusTrap) {
            focusTrap._disable();
            /** @type {?} */


            var stack = this._focusTrapStack;
            /** @type {?} */

            var i = stack.indexOf(focusTrap);

            if (i !== -1) {
              stack.splice(i, 1);

              if (stack.length) {
                stack[stack.length - 1]._enable();
              }
            }
          }
        }]);

        return FocusTrapManager;
      }();

      FocusTrapManager.ɵfac = function FocusTrapManager_Factory(t) {
        return new (t || FocusTrapManager)();
      };
      /** @nocollapse */


      FocusTrapManager.ɵprov = (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
        factory: function FocusTrapManager_Factory() {
          return new FocusTrapManager();
        },
        token: FocusTrapManager,
        providedIn: "root"
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](FocusTrapManager, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [];
        }, null);
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/a11y/focus-trap/configurable-focus-trap-factory.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Factory that allows easy instantiation of configurable focus traps.
       */


      var _ConfigurableFocusTrapFactory = /*#__PURE__*/function () {
        /**
         * @param {?} _checker
         * @param {?} _ngZone
         * @param {?} _focusTrapManager
         * @param {?} _document
         * @param {?=} _inertStrategy
         */
        function _ConfigurableFocusTrapFactory(_checker, _ngZone, _focusTrapManager, _document, _inertStrategy) {
          _classCallCheck(this, _ConfigurableFocusTrapFactory);

          this._checker = _checker;
          this._ngZone = _ngZone;
          this._focusTrapManager = _focusTrapManager;
          this._document = _document; // TODO split up the strategies into different modules, similar to DateAdapter.

          this._inertStrategy = _inertStrategy || new _EventListenerFocusTrapInertStrategy();
        }
        /**
         * @param {?} element
         * @param {?=} config
         * @return {?}
         */


        _createClass(_ConfigurableFocusTrapFactory, [{
          key: "create",
          value: function create(element) {
            var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new ConfigurableFocusTrapConfig();

            /** @type {?} */
            var configObject;

            if (typeof config === 'boolean') {
              configObject = new ConfigurableFocusTrapConfig();
              configObject.defer = config;
            } else {
              configObject = config;
            }

            return new _ConfigurableFocusTrap(element, this._checker, this._ngZone, this._document, this._focusTrapManager, this._inertStrategy, configObject);
          }
        }]);

        return _ConfigurableFocusTrapFactory;
      }();

      _ConfigurableFocusTrapFactory.ɵfac = function ConfigurableFocusTrapFactory_Factory(t) {
        return new (t || _ConfigurableFocusTrapFactory)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_InteractivityChecker), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](FocusTrapManager), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_FOCUS_TRAP_INERT_STRATEGY, 8));
      };
      /** @nocollapse */


      _ConfigurableFocusTrapFactory.ctorParameters = function () {
        return [{
          type: _InteractivityChecker
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
        }, {
          type: FocusTrapManager
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT]
          }]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
            args: [_FOCUS_TRAP_INERT_STRATEGY]
          }]
        }];
      };
      /** @nocollapse */


      _ConfigurableFocusTrapFactory.ɵprov = (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
        factory: function ConfigurableFocusTrapFactory_Factory() {
          return new _ConfigurableFocusTrapFactory((0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_InteractivityChecker), (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone), (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(FocusTrapManager), (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT), (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_FOCUS_TRAP_INERT_STRATEGY, 8));
        },
        token: _ConfigurableFocusTrapFactory,
        providedIn: "root"
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_ConfigurableFocusTrapFactory, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [{
            type: _InteractivityChecker
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
          }, {
            type: FocusTrapManager
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT]
            }]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
              args: [_FOCUS_TRAP_INERT_STRATEGY]
            }]
          }];
        }, null);
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/a11y/live-announcer/live-announcer-tokens.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */


      var _LIVE_ANNOUNCER_ELEMENT_TOKEN = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('liveAnnouncerElement', {
        providedIn: 'root',
        factory: _LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY
      });
      /**
       * \@docs-private
       * @return {?}
       */


      function _LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY() {
        return null;
      }
      /**
       * Object that can be used to configure the default options for the LiveAnnouncer.
       * @record
       */


      function LiveAnnouncerDefaultOptions() {}

      if (false) {}
      /**
       * Injection token that can be used to configure the default options for the LiveAnnouncer.
       * @type {?}
       */


      var _LIVE_ANNOUNCER_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('LIVE_ANNOUNCER_DEFAULT_OPTIONS');
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/a11y/live-announcer/live-announcer.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var _LiveAnnouncer = /*#__PURE__*/function () {
        /**
         * @param {?} elementToken
         * @param {?} _ngZone
         * @param {?} _document
         * @param {?=} _defaultOptions
         */
        function _LiveAnnouncer(elementToken, _ngZone, _document, _defaultOptions) {
          _classCallCheck(this, _LiveAnnouncer);

          this._ngZone = _ngZone;
          this._defaultOptions = _defaultOptions; // We inject the live element and document as `any` because the constructor signature cannot
          // reference browser globals (HTMLElement, Document) on non-browser environments, since having
          // a class decorator causes TypeScript to preserve the constructor signature types.

          this._document = _document;
          this._liveElement = elementToken || this._createLiveElement();
        }
        /**
         * @param {?} message
         * @param {...?} args
         * @return {?}
         */


        _createClass(_LiveAnnouncer, [{
          key: "announce",
          value: function announce(message) {
            var _this12 = this;

            /** @type {?} */
            var defaultOptions = this._defaultOptions;
            /** @type {?} */

            var politeness;
            /** @type {?} */

            var duration;

            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }

            if (args.length === 1 && typeof args[0] === 'number') {
              duration = args[0];
            } else {
              politeness = args[0];
              duration = args[1];
            }

            this.clear();
            clearTimeout(this._previousTimeout);

            if (!politeness) {
              politeness = defaultOptions && defaultOptions.politeness ? defaultOptions.politeness : 'polite';
            }

            if (duration == null && defaultOptions) {
              duration = defaultOptions.duration;
            } // TODO: ensure changing the politeness works on all environments we support.


            this._liveElement.setAttribute('aria-live', politeness); // This 100ms timeout is necessary for some browser + screen-reader combinations:
            // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.
            // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a
            //   second time without clearing and then using a non-zero delay.
            // (using JAWS 17 at time of this writing).


            return this._ngZone.runOutsideAngular(
            /**
            * @return {?}
            */
            function () {
              return new Promise(
              /**
              * @param {?} resolve
              * @return {?}
              */
              function (resolve) {
                clearTimeout(_this12._previousTimeout);
                _this12._previousTimeout = setTimeout(
                /**
                * @return {?}
                */
                function () {
                  _this12._liveElement.textContent = message;
                  resolve();

                  if (typeof duration === 'number') {
                    _this12._previousTimeout = setTimeout(
                    /**
                    * @return {?}
                    */
                    function () {
                      return _this12.clear();
                    }, duration);
                  }
                }, 100);
              });
            });
          }
          /**
           * Clears the current text from the announcer element. Can be used to prevent
           * screen readers from reading the text out again while the user is going
           * through the page landmarks.
           * @return {?}
           */

        }, {
          key: "clear",
          value: function clear() {
            if (this._liveElement) {
              this._liveElement.textContent = '';
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            clearTimeout(this._previousTimeout);

            if (this._liveElement && this._liveElement.parentNode) {
              this._liveElement.parentNode.removeChild(this._liveElement);

              this._liveElement =
              /** @type {?} */
              null;
            }
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "_createLiveElement",
          value: function _createLiveElement() {
            /** @type {?} */
            var elementClass = 'cdk-live-announcer-element';
            /** @type {?} */

            var previousElements = this._document.getElementsByClassName(elementClass);
            /** @type {?} */


            var liveEl = this._document.createElement('div'); // Remove any old containers. This can happen when coming in from a server-side-rendered page.


            for (var i = 0; i < previousElements.length; i++) {
              /** @type {?} */
              previousElements[i].parentNode.removeChild(previousElements[i]);
            }

            liveEl.classList.add(elementClass);
            liveEl.classList.add('cdk-visually-hidden');
            liveEl.setAttribute('aria-atomic', 'true');
            liveEl.setAttribute('aria-live', 'polite');

            this._document.body.appendChild(liveEl);

            return liveEl;
          }
        }]);

        return _LiveAnnouncer;
      }();

      _LiveAnnouncer.ɵfac = function LiveAnnouncer_Factory(t) {
        return new (t || _LiveAnnouncer)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_LIVE_ANNOUNCER_DEFAULT_OPTIONS, 8));
      };
      /** @nocollapse */


      _LiveAnnouncer.ctorParameters = function () {
        return [{
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
            args: [_LIVE_ANNOUNCER_ELEMENT_TOKEN]
          }]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT]
          }]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
            args: [_LIVE_ANNOUNCER_DEFAULT_OPTIONS]
          }]
        }];
      };
      /** @nocollapse */


      _LiveAnnouncer.ɵprov = (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
        factory: function LiveAnnouncer_Factory() {
          return new _LiveAnnouncer((0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone), (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT), (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_LIVE_ANNOUNCER_DEFAULT_OPTIONS, 8));
        },
        token: _LiveAnnouncer,
        providedIn: "root"
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_LiveAnnouncer, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [{
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
              args: [_LIVE_ANNOUNCER_ELEMENT_TOKEN]
            }]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT]
            }]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
              args: [_LIVE_ANNOUNCER_DEFAULT_OPTIONS]
            }]
          }];
        }, null);
      })();

      if (false) {}
      /**
       * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility
       * with a wider range of browsers and screen readers.
       */


      var _CdkAriaLive = /*#__PURE__*/function () {
        /**
         * @param {?} _elementRef
         * @param {?} _liveAnnouncer
         * @param {?} _contentObserver
         * @param {?} _ngZone
         */
        function _CdkAriaLive(_elementRef, _liveAnnouncer, _contentObserver, _ngZone) {
          _classCallCheck(this, _CdkAriaLive);

          this._elementRef = _elementRef;
          this._liveAnnouncer = _liveAnnouncer;
          this._contentObserver = _contentObserver;
          this._ngZone = _ngZone;
          this._politeness = 'off';
        }
        /**
         * The aria-live politeness level to use when announcing messages.
         * @return {?}
         */


        _createClass(_CdkAriaLive, [{
          key: "politeness",
          get: function get() {
            return this._politeness;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            var _this13 = this;

            this._politeness = value === 'polite' || value === 'assertive' ? value : 'off';

            if (this._politeness === 'off') {
              if (this._subscription) {
                this._subscription.unsubscribe();

                this._subscription = null;
              }
            } else if (!this._subscription) {
              this._subscription = this._ngZone.runOutsideAngular(
              /**
              * @return {?}
              */
              function () {
                return _this13._contentObserver.observe(_this13._elementRef).subscribe(
                /**
                * @return {?}
                */
                function () {
                  // Note that we use textContent here, rather than innerText, in order to avoid a reflow.

                  /** @type {?} */
                  var elementText = _this13._elementRef.nativeElement.textContent; // The `MutationObserver` fires also for attribute
                  // changes which we don't want to announce.

                  if (elementText !== _this13._previousAnnouncedText) {
                    _this13._liveAnnouncer.announce(elementText, _this13._politeness);

                    _this13._previousAnnouncedText = elementText;
                  }
                });
              });
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            if (this._subscription) {
              this._subscription.unsubscribe();
            }
          }
        }]);

        return _CdkAriaLive;
      }();

      _CdkAriaLive.ɵfac = function CdkAriaLive_Factory(t) {
        return new (t || _CdkAriaLive)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_LiveAnnouncer), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_cdk_observers__WEBPACK_IMPORTED_MODULE_12__.ContentObserver), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone));
      };

      _CdkAriaLive.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: _CdkAriaLive,
        selectors: [["", "cdkAriaLive", ""]],
        inputs: {
          politeness: ["cdkAriaLive", "politeness"]
        },
        exportAs: ["cdkAriaLive"]
      });
      /** @nocollapse */

      _CdkAriaLive.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
        }, {
          type: _LiveAnnouncer
        }, {
          type: _angular_cdk_observers__WEBPACK_IMPORTED_MODULE_12__.ContentObserver
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
        }];
      };

      _CdkAriaLive.propDecorators = {
        politeness: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
          args: ['cdkAriaLive']
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_CdkAriaLive, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
          args: [{
            selector: '[cdkAriaLive]',
            exportAs: 'cdkAriaLive'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
          }, {
            type: _LiveAnnouncer
          }, {
            type: _angular_cdk_observers__WEBPACK_IMPORTED_MODULE_12__.ContentObserver
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
          }];
        }, {
          politeness: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
            args: ['cdkAriaLive']
          }]
        });
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/a11y/fake-mousedown.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Screenreaders will often fire fake mousedown events when a focusable element
       * is activated using the keyboard. We can typically distinguish between these faked
       * mousedown events and real mousedown events using the "buttons" property. While
       * real mousedowns will indicate the mouse button that was pressed (e.g. "1" for
       * the left mouse button), faked mousedowns will usually set the property value to 0.
       * @param {?} event
       * @return {?}
       */


      function _isFakeMousedownFromScreenReader(event) {
        return event.buttons === 0;
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/a11y/focus-monitor/focus-monitor.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      // This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found
      // that a value of around 650ms seems appropriate.

      /** @type {?} */


      var _TOUCH_BUFFER_MS = 650;
      /**
       * Corresponds to the options that can be passed to the native `focus` event.
       * via https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus
       * @record
       */

      function FocusOptions() {}

      if (false) {}
      /** @enum {number} */


      var FocusMonitorDetectionMode = {
        /**
         * Any mousedown, keydown, or touchstart event that happened in the previous
         * tick or the current tick will be used to assign a focus event's origin (to
         * either mouse, keyboard, or touch). This is the default option.
         */
        IMMEDIATE: 0,

        /**
         * A focus event's origin is always attributed to the last corresponding
         * mousedown, keydown, or touchstart event, no matter how long ago it occured.
         */
        EVENTUAL: 1
      };
      /**
       * Injectable service-level options for FocusMonitor.
       * @record
       */

      function FocusMonitorOptions() {}

      if (false) {}
      /**
       * InjectionToken for FocusMonitorOptions.
       * @type {?}
       */


      var _FOCUS_MONITOR_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('cdk-focus-monitor-default-options');
      /**
       * Event listener options that enable capturing and also
       * mark the listener as passive if the browser supports it.
       * @type {?}
       */


      var captureEventListenerOptions = (0, _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.normalizePassiveListenerOptions)({
        passive: true,
        capture: true
      });
      /**
       * Monitors mouse and keyboard events to determine the cause of focus events.
       */

      var _FocusMonitor = /*#__PURE__*/function () {
        /**
         * @param {?} _ngZone
         * @param {?} _platform
         * @param {?} document
         * @param {?} options
         */
        function _FocusMonitor(_ngZone, _platform,
        /** @breaking-change 11.0.0 make document required */
        document, options) {
          var _this14 = this;

          _classCallCheck(this, _FocusMonitor);

          this._ngZone = _ngZone;
          this._platform = _platform;
          /**
           * The focus origin that the next focus event is a result of.
           */

          this._origin = null;
          /**
           * Whether the window has just been focused.
           */

          this._windowFocused = false;
          /**
           * Map of elements being monitored to their info.
           */

          this._elementInfo = new Map();
          /**
           * The number of elements currently being monitored.
           */

          this._monitoredElementCount = 0;
          /**
           * Keeps track of the root nodes to which we've currently bound a focus/blur handler,
           * as well as the number of monitored elements that they contain. We have to treat focus/blur
           * handlers differently from the rest of the events, because the browser won't emit events
           * to the document when focus moves inside of a shadow root.
           */

          this._rootNodeFocusListenerCount = new Map();
          /**
           * Event listener for `keydown` events on the document.
           * Needs to be an arrow function in order to preserve the context when it gets bound.
           */

          this._documentKeydownListener =
          /**
          * @return {?}
          */
          function () {
            // On keydown record the origin and clear any touch event that may be in progress.
            _this14._lastTouchTarget = null;

            _this14._setOriginForCurrentEventQueue('keyboard');
          };
          /**
           * Event listener for `mousedown` events on the document.
           * Needs to be an arrow function in order to preserve the context when it gets bound.
           */


          this._documentMousedownListener =
          /**
          * @param {?} event
          * @return {?}
          */
          function (event) {
            // On mousedown record the origin only if there is not touch
            // target, since a mousedown can happen as a result of a touch event.
            if (!_this14._lastTouchTarget) {
              // In some cases screen readers fire fake `mousedown` events instead of `keydown`.
              // Resolve the focus source to `keyboard` if we detect one of them.

              /** @type {?} */
              var source = _isFakeMousedownFromScreenReader(event) ? 'keyboard' : 'mouse';

              _this14._setOriginForCurrentEventQueue(source);
            }
          };
          /**
           * Event listener for `touchstart` events on the document.
           * Needs to be an arrow function in order to preserve the context when it gets bound.
           */


          this._documentTouchstartListener =
          /**
          * @param {?} event
          * @return {?}
          */
          function (event) {
            // When the touchstart event fires the focus event is not yet in the event queue. This means
            // we can't rely on the trick used above (setting timeout of 1ms). Instead we wait 650ms to
            // see if a focus happens.
            if (_this14._touchTimeoutId != null) {
              clearTimeout(_this14._touchTimeoutId);
            }

            _this14._lastTouchTarget = getTarget(event);
            _this14._touchTimeoutId = setTimeout(
            /**
            * @return {?}
            */
            function () {
              return _this14._lastTouchTarget = null;
            }, _TOUCH_BUFFER_MS);
          };
          /**
           * Event listener for `focus` events on the window.
           * Needs to be an arrow function in order to preserve the context when it gets bound.
           */


          this._windowFocusListener =
          /**
          * @return {?}
          */
          function () {
            // Make a note of when the window regains focus, so we can
            // restore the origin info for the focused element.
            _this14._windowFocused = true;
            _this14._windowFocusTimeoutId = setTimeout(
            /**
            * @return {?}
            */
            function () {
              return _this14._windowFocused = false;
            });
          };
          /**
           * Event listener for `focus` and 'blur' events on the document.
           * Needs to be an arrow function in order to preserve the context when it gets bound.
           */


          this._rootNodeFocusAndBlurListener =
          /**
          * @param {?} event
          * @return {?}
          */
          function (event) {
            /** @type {?} */
            var target = getTarget(event);
            /** @type {?} */

            var handler = event.type === 'focus' ? _this14._onFocus : _this14._onBlur; // We need to walk up the ancestor chain in order to support `checkChildren`.

            for (var element = target; element; element = element.parentElement) {
              handler.call(_this14,
              /** @type {?} */
              event, element);
            }
          };

          this._document = document;
          this._detectionMode = (options === null || options === void 0 ? void 0 : options.detectionMode) || 0
          /* IMMEDIATE */
          ;
        }
        /**
         * @param {?} element
         * @param {?=} checkChildren
         * @return {?}
         */


        _createClass(_FocusMonitor, [{
          key: "monitor",
          value: function monitor(element) {
            var checkChildren = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            // Do nothing if we're not on the browser platform.
            if (!this._platform.isBrowser) {
              return (0, rxjs__WEBPACK_IMPORTED_MODULE_13__.of)(null);
            }
            /** @type {?} */


            var nativeElement = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_11__.coerceElement)(element); // If the element is inside the shadow DOM, we need to bind our focus/blur listeners to
            // the shadow root, rather than the `document`, because the browser won't emit focus events
            // to the `document`, if focus is moving within the same shadow root.

            /** @type {?} */

            var rootNode =
            /** @type {?} */
            (0, _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__._getShadowRoot)(nativeElement) || this._getDocument();
            /** @type {?} */


            var cachedInfo = this._elementInfo.get(nativeElement); // Check if we're already monitoring this element.


            if (cachedInfo) {
              if (checkChildren) {
                // TODO(COMP-318): this can be problematic, because it'll turn all non-checkChildren
                // observers into ones that behave as if `checkChildren` was turned on. We need a more
                // robust solution.
                cachedInfo.checkChildren = true;
              }

              return cachedInfo.subject.asObservable();
            } // Create monitored element info.

            /** @type {?} */


            var info = {
              checkChildren: checkChildren,
              subject: new rxjs__WEBPACK_IMPORTED_MODULE_2__.Subject(),
              rootNode: rootNode
            };

            this._elementInfo.set(nativeElement, info);

            this._registerGlobalListeners(info);

            return info.subject.asObservable();
          }
          /**
           * @param {?} element
           * @return {?}
           */

        }, {
          key: "stopMonitoring",
          value: function stopMonitoring(element) {
            /** @type {?} */
            var nativeElement = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_11__.coerceElement)(element);
            /** @type {?} */

            var elementInfo = this._elementInfo.get(nativeElement);

            if (elementInfo) {
              elementInfo.subject.complete();

              this._setClasses(nativeElement);

              this._elementInfo["delete"](nativeElement);

              this._removeGlobalListeners(elementInfo);
            }
          }
          /**
           * @param {?} element
           * @param {?} origin
           * @param {?=} options
           * @return {?}
           */

        }, {
          key: "focusVia",
          value: function focusVia(element, origin, options) {
            /** @type {?} */
            var nativeElement = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_11__.coerceElement)(element);

            this._setOriginForCurrentEventQueue(origin); // `focus` isn't available on the server


            if (typeof nativeElement.focus === 'function') {
              // Cast the element to `any`, because the TS typings don't have the `options` parameter yet.

              /** @type {?} */
              nativeElement.focus(options);
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            var _this15 = this;

            this._elementInfo.forEach(
            /**
            * @param {?} _info
            * @param {?} element
            * @return {?}
            */
            function (_info, element) {
              return _this15.stopMonitoring(element);
            });
          }
          /**
           * Access injected document if available or fallback to global document reference
           * @private
           * @return {?}
           */

        }, {
          key: "_getDocument",
          value: function _getDocument() {
            return this._document || document;
          }
          /**
           * Use defaultView of injected document if available or fallback to global window reference
           * @private
           * @return {?}
           */

        }, {
          key: "_getWindow",
          value: function _getWindow() {
            /** @type {?} */
            var doc = this._getDocument();

            return doc.defaultView || window;
          }
          /**
           * @private
           * @param {?} element
           * @param {?} className
           * @param {?} shouldSet
           * @return {?}
           */

        }, {
          key: "_toggleClass",
          value: function _toggleClass(element, className, shouldSet) {
            if (shouldSet) {
              element.classList.add(className);
            } else {
              element.classList.remove(className);
            }
          }
          /**
           * @private
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "_getFocusOrigin",
          value: function _getFocusOrigin(event) {
            // If we couldn't detect a cause for the focus event, it's due to one of three reasons:
            // 1) The window has just regained focus, in which case we want to restore the focused state of
            //    the element from before the window blurred.
            // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.
            // 3) The element was programmatically focused, in which case we should mark the origin as
            //    'program'.
            if (this._origin) {
              return this._origin;
            }

            if (this._windowFocused && this._lastFocusOrigin) {
              return this._lastFocusOrigin;
            } else if (this._wasCausedByTouch(event)) {
              return 'touch';
            } else {
              return 'program';
            }
          }
          /**
           * Sets the focus classes on the element based on the given focus origin.
           * @private
           * @param {?} element The element to update the classes on.
           * @param {?=} origin The focus origin.
           * @return {?}
           */

        }, {
          key: "_setClasses",
          value: function _setClasses(element, origin) {
            this._toggleClass(element, 'cdk-focused', !!origin);

            this._toggleClass(element, 'cdk-touch-focused', origin === 'touch');

            this._toggleClass(element, 'cdk-keyboard-focused', origin === 'keyboard');

            this._toggleClass(element, 'cdk-mouse-focused', origin === 'mouse');

            this._toggleClass(element, 'cdk-program-focused', origin === 'program');
          }
          /**
           * Sets the origin and schedules an async function to clear it at the end of the event queue.
           * If the detection mode is 'eventual', the origin is never cleared.
           * @private
           * @param {?} origin The origin to set.
           * @return {?}
           */

        }, {
          key: "_setOriginForCurrentEventQueue",
          value: function _setOriginForCurrentEventQueue(origin) {
            var _this16 = this;

            this._ngZone.runOutsideAngular(
            /**
            * @return {?}
            */
            function () {
              _this16._origin = origin;

              if (_this16._detectionMode === 0
              /* IMMEDIATE */
              ) {
                // Sometimes the focus origin won't be valid in Firefox because Firefox seems to focus *one*
                // tick after the interaction event fired. To ensure the focus origin is always correct,
                // the focus origin will be determined at the beginning of the next tick.
                _this16._originTimeoutId = setTimeout(
                /**
                * @return {?}
                */
                function () {
                  return _this16._origin = null;
                }, 1);
              }
            });
          }
          /**
           * Checks whether the given focus event was caused by a touchstart event.
           * @private
           * @param {?} event The focus event to check.
           * @return {?} Whether the event was caused by a touch.
           */

        }, {
          key: "_wasCausedByTouch",
          value: function _wasCausedByTouch(event) {
            // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.
            // Consider the following dom structure:
            //
            // <div #parent tabindex="0" cdkFocusClasses>
            //   <div #child (click)="#parent.focus()"></div>
            // </div>
            //
            // If the user touches the #child element and the #parent is programmatically focused as a
            // result, this code will still consider it to have been caused by the touch event and will
            // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a
            // relatively small edge-case that can be worked around by using
            // focusVia(parentEl, 'program') to focus the parent element.
            //
            // If we decide that we absolutely must handle this case correctly, we can do so by listening
            // for the first focus event after the touchstart, and then the first blur event after that
            // focus event. When that blur event fires we know that whatever follows is not a result of the
            // touchstart.

            /** @type {?} */
            var focusTarget = getTarget(event);
            return this._lastTouchTarget instanceof Node && focusTarget instanceof Node && (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));
          }
          /**
           * Handles focus events on a registered element.
           * @private
           * @param {?} event The focus event.
           * @param {?} element The monitored element.
           * @return {?}
           */

        }, {
          key: "_onFocus",
          value: function _onFocus(event, element) {
            // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent
            // focus event affecting the monitored element. If we want to use the origin of the first event
            // instead we should check for the cdk-focused class here and return if the element already has
            // it. (This only matters for elements that have includesChildren = true).
            // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent
            // focus event affecting the monitored element. If we want to use the origin of the first event
            // instead we should check for the cdk-focused class here and return if the element already has
            // it. (This only matters for elements that have includesChildren = true).
            // If we are not counting child-element-focus as focused, make sure that the event target is the
            // monitored element itself.

            /** @type {?} */
            var elementInfo = this._elementInfo.get(element);

            if (!elementInfo || !elementInfo.checkChildren && element !== getTarget(event)) {
              return;
            }
            /** @type {?} */


            var origin = this._getFocusOrigin(event);

            this._setClasses(element, origin);

            this._emitOrigin(elementInfo.subject, origin);

            this._lastFocusOrigin = origin;
          }
          /**
           * Handles blur events on a registered element.
           * @param {?} event The blur event.
           * @param {?} element The monitored element.
           * @return {?}
           */

        }, {
          key: "_onBlur",
          value: function _onBlur(event, element) {
            // If we are counting child-element-focus as focused, make sure that we aren't just blurring in
            // order to focus another child of the monitored element.

            /** @type {?} */
            var elementInfo = this._elementInfo.get(element);

            if (!elementInfo || elementInfo.checkChildren && event.relatedTarget instanceof Node && element.contains(event.relatedTarget)) {
              return;
            }

            this._setClasses(element);

            this._emitOrigin(elementInfo.subject, null);
          }
          /**
           * @private
           * @param {?} subject
           * @param {?} origin
           * @return {?}
           */

        }, {
          key: "_emitOrigin",
          value: function _emitOrigin(subject, origin) {
            this._ngZone.run(
            /**
            * @return {?}
            */
            function () {
              return subject.next(origin);
            });
          }
          /**
           * @private
           * @param {?} elementInfo
           * @return {?}
           */

        }, {
          key: "_registerGlobalListeners",
          value: function _registerGlobalListeners(elementInfo) {
            var _this17 = this;

            if (!this._platform.isBrowser) {
              return;
            }
            /** @type {?} */


            var rootNode = elementInfo.rootNode;
            /** @type {?} */

            var rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode) || 0;

            if (!rootNodeFocusListeners) {
              this._ngZone.runOutsideAngular(
              /**
              * @return {?}
              */
              function () {
                rootNode.addEventListener('focus', _this17._rootNodeFocusAndBlurListener, captureEventListenerOptions);
                rootNode.addEventListener('blur', _this17._rootNodeFocusAndBlurListener, captureEventListenerOptions);
              });
            }

            this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners + 1); // Register global listeners when first element is monitored.


            if (++this._monitoredElementCount === 1) {
              // Note: we listen to events in the capture phase so we
              // can detect them even if the user stops propagation.
              this._ngZone.runOutsideAngular(
              /**
              * @return {?}
              */
              function () {
                /** @type {?} */
                var document = _this17._getDocument();
                /** @type {?} */


                var window = _this17._getWindow();

                document.addEventListener('keydown', _this17._documentKeydownListener, captureEventListenerOptions);
                document.addEventListener('mousedown', _this17._documentMousedownListener, captureEventListenerOptions);
                document.addEventListener('touchstart', _this17._documentTouchstartListener, captureEventListenerOptions);
                window.addEventListener('focus', _this17._windowFocusListener);
              });
            }
          }
          /**
           * @private
           * @param {?} elementInfo
           * @return {?}
           */

        }, {
          key: "_removeGlobalListeners",
          value: function _removeGlobalListeners(elementInfo) {
            /** @type {?} */
            var rootNode = elementInfo.rootNode;

            if (this._rootNodeFocusListenerCount.has(rootNode)) {
              /** @type {?} */
              var rootNodeFocusListeners =
              /** @type {?} */
              this._rootNodeFocusListenerCount.get(rootNode);

              if (rootNodeFocusListeners > 1) {
                this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners - 1);
              } else {
                rootNode.removeEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);
                rootNode.removeEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);

                this._rootNodeFocusListenerCount["delete"](rootNode);
              }
            } // Unregister global listeners when last element is unmonitored.


            if (! --this._monitoredElementCount) {
              /** @type {?} */
              var _document2 = this._getDocument();
              /** @type {?} */


              var _window = this._getWindow();

              _document2.removeEventListener('keydown', this._documentKeydownListener, captureEventListenerOptions);

              _document2.removeEventListener('mousedown', this._documentMousedownListener, captureEventListenerOptions);

              _document2.removeEventListener('touchstart', this._documentTouchstartListener, captureEventListenerOptions);

              _window.removeEventListener('focus', this._windowFocusListener); // Clear timeouts for all potentially pending timeouts to prevent the leaks.


              clearTimeout(this._windowFocusTimeoutId);
              clearTimeout(this._touchTimeoutId);
              clearTimeout(this._originTimeoutId);
            }
          }
        }]);

        return _FocusMonitor;
      }();

      _FocusMonitor.ɵfac = function FocusMonitor_Factory(t) {
        return new (t || _FocusMonitor)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.Platform), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_FOCUS_MONITOR_DEFAULT_OPTIONS, 8));
      };
      /** @nocollapse */


      _FocusMonitor.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
        }, {
          type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.Platform
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT]
          }]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
            args: [_FOCUS_MONITOR_DEFAULT_OPTIONS]
          }]
        }];
      };
      /** @nocollapse */


      _FocusMonitor.ɵprov = (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
        factory: function FocusMonitor_Factory() {
          return new _FocusMonitor((0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone), (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.Platform), (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT, 8), (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_FOCUS_MONITOR_DEFAULT_OPTIONS, 8));
        },
        token: _FocusMonitor,
        providedIn: "root"
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_FocusMonitor, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
          }, {
            type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.Platform
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT]
            }]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
              args: [_FOCUS_MONITOR_DEFAULT_OPTIONS]
            }]
          }];
        }, null);
      })();

      if (false) {}
      /**
       * Gets the target of an event, accounting for Shadow DOM.
       * @param {?} event
       * @return {?}
       */


      function getTarget(event) {
        // If an event is bound outside the Shadow DOM, the `event.target` will
        // point to the shadow root so we have to use `composedPath` instead.
        return (
          /** @type {?} */
          event.composedPath ? event.composedPath()[0] : event.target
        );
      }
      /**
       * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or
       * programmatically) and adds corresponding classes to the element.
       *
       * There are two variants of this directive:
       * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is
       *    focused.
       * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.
       */


      var _CdkMonitorFocus = /*#__PURE__*/function () {
        /**
         * @param {?} _elementRef
         * @param {?} _focusMonitor
         */
        function _CdkMonitorFocus(_elementRef, _focusMonitor) {
          var _this18 = this;

          _classCallCheck(this, _CdkMonitorFocus);

          this._elementRef = _elementRef;
          this._focusMonitor = _focusMonitor;
          this.cdkFocusChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
          this._monitorSubscription = this._focusMonitor.monitor(this._elementRef, this._elementRef.nativeElement.hasAttribute('cdkMonitorSubtreeFocus')).subscribe(
          /**
          * @param {?} origin
          * @return {?}
          */
          function (origin) {
            return _this18.cdkFocusChange.emit(origin);
          });
        }
        /**
         * @return {?}
         */


        _createClass(_CdkMonitorFocus, [{
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this._focusMonitor.stopMonitoring(this._elementRef);

            this._monitorSubscription.unsubscribe();
          }
        }]);

        return _CdkMonitorFocus;
      }();

      _CdkMonitorFocus.ɵfac = function CdkMonitorFocus_Factory(t) {
        return new (t || _CdkMonitorFocus)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_FocusMonitor));
      };

      _CdkMonitorFocus.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: _CdkMonitorFocus,
        selectors: [["", "cdkMonitorElementFocus", ""], ["", "cdkMonitorSubtreeFocus", ""]],
        outputs: {
          cdkFocusChange: "cdkFocusChange"
        }
      });
      /** @nocollapse */

      _CdkMonitorFocus.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
        }, {
          type: _FocusMonitor
        }];
      };

      _CdkMonitorFocus.propDecorators = {
        cdkFocusChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_CdkMonitorFocus, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
          args: [{
            selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
          }, {
            type: _FocusMonitor
          }];
        }, {
          cdkFocusChange: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
          }]
        });
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/a11y/high-contrast-mode/high-contrast-mode-detector.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @enum {number} */


      var HighContrastMode = {
        NONE: 0,
        BLACK_ON_WHITE: 1,
        WHITE_ON_BLACK: 2
      };
      /**
       * CSS class applied to the document body when in black-on-white high-contrast mode.
       * @type {?}
       */

      var BLACK_ON_WHITE_CSS_CLASS = 'cdk-high-contrast-black-on-white';
      /**
       * CSS class applied to the document body when in white-on-black high-contrast mode.
       * @type {?}
       */

      var WHITE_ON_BLACK_CSS_CLASS = 'cdk-high-contrast-white-on-black';
      /**
       * CSS class applied to the document body when in high-contrast mode.
       * @type {?}
       */

      var HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS = 'cdk-high-contrast-active';
      /**
       * Service to determine whether the browser is currently in a high-contrast-mode environment.
       *
       * Microsoft Windows supports an accessibility feature called "High Contrast Mode". This mode
       * changes the appearance of all applications, including web applications, to dramatically increase
       * contrast.
       *
       * IE, Edge, and Firefox currently support this mode. Chrome does not support Windows High Contrast
       * Mode. This service does not detect high-contrast mode as added by the Chrome "High Contrast"
       * browser extension.
       */

      var _HighContrastModeDetector = /*#__PURE__*/function () {
        /**
         * @param {?} _platform
         * @param {?} document
         */
        function _HighContrastModeDetector(_platform, document) {
          _classCallCheck(this, _HighContrastModeDetector);

          this._platform = _platform;
          this._document = document;
        }
        /**
         * Gets the current high-contrast-mode for the page.
         * @return {?}
         */


        _createClass(_HighContrastModeDetector, [{
          key: "getHighContrastMode",
          value: function getHighContrastMode() {
            if (!this._platform.isBrowser) {
              return 0
              /* NONE */
              ;
            } // Create a test element with an arbitrary background-color that is neither black nor
            // white; high-contrast mode will coerce the color to either black or white. Also ensure that
            // appending the test element to the DOM does not affect layout by absolutely positioning it

            /** @type {?} */


            var testElement = this._document.createElement('div');

            testElement.style.backgroundColor = 'rgb(1,2,3)';
            testElement.style.position = 'absolute';

            this._document.body.appendChild(testElement); // Get the computed style for the background color, collapsing spaces to normalize between
            // browsers. Once we get this color, we no longer need the test element. Access the `window`
            // via the document so we can fake it in tests. Note that we have extra null checks, because
            // this logic will likely run during app bootstrap and throwing can break the entire app.

            /** @type {?} */


            var documentWindow = this._document.defaultView || window;
            /** @type {?} */

            var computedStyle = documentWindow && documentWindow.getComputedStyle ? documentWindow.getComputedStyle(testElement) : null;
            /** @type {?} */

            var computedColor = (computedStyle && computedStyle.backgroundColor || '').replace(/ /g, '');

            this._document.body.removeChild(testElement);

            switch (computedColor) {
              case 'rgb(0,0,0)':
                return 2
                /* WHITE_ON_BLACK */
                ;

              case 'rgb(255,255,255)':
                return 1
                /* BLACK_ON_WHITE */
                ;
            }

            return 0
            /* NONE */
            ;
          }
          /**
           * Applies CSS classes indicating high-contrast mode to document body (browser-only).
           * @return {?}
           */

        }, {
          key: "_applyBodyHighContrastModeCssClasses",
          value: function _applyBodyHighContrastModeCssClasses() {
            if (this._platform.isBrowser && this._document.body) {
              /** @type {?} */
              var bodyClasses = this._document.body.classList; // IE11 doesn't support `classList` operations with multiple arguments

              bodyClasses.remove(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);
              bodyClasses.remove(BLACK_ON_WHITE_CSS_CLASS);
              bodyClasses.remove(WHITE_ON_BLACK_CSS_CLASS);
              /** @type {?} */

              var mode = this.getHighContrastMode();

              if (mode === 1
              /* BLACK_ON_WHITE */
              ) {
                bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);
                bodyClasses.add(BLACK_ON_WHITE_CSS_CLASS);
              } else if (mode === 2
              /* WHITE_ON_BLACK */
              ) {
                bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);
                bodyClasses.add(WHITE_ON_BLACK_CSS_CLASS);
              }
            }
          }
        }]);

        return _HighContrastModeDetector;
      }();

      _HighContrastModeDetector.ɵfac = function HighContrastModeDetector_Factory(t) {
        return new (t || _HighContrastModeDetector)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.Platform), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT));
      };
      /** @nocollapse */


      _HighContrastModeDetector.ctorParameters = function () {
        return [{
          type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.Platform
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT]
          }]
        }];
      };
      /** @nocollapse */


      _HighContrastModeDetector.ɵprov = (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
        factory: function HighContrastModeDetector_Factory() {
          return new _HighContrastModeDetector((0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.Platform), (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT));
        },
        token: _HighContrastModeDetector,
        providedIn: "root"
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_HighContrastModeDetector, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [{
            type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.Platform
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT]
            }]
          }];
        }, null);
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/a11y/a11y-module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var _A11yModule =
      /**
       * @param {?} highContrastModeDetector
       */
      function _A11yModule(highContrastModeDetector) {
        _classCallCheck(this, _A11yModule);

        highContrastModeDetector._applyBodyHighContrastModeCssClasses();
      };

      _A11yModule.ɵfac = function A11yModule_Factory(t) {
        return new (t || _A11yModule)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_HighContrastModeDetector));
      };

      _A11yModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: _A11yModule
      });
      _A11yModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        imports: [[_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.PlatformModule, _angular_cdk_observers__WEBPACK_IMPORTED_MODULE_12__.ObserversModule]]
      });
      /** @nocollapse */

      _A11yModule.ctorParameters = function () {
        return [{
          type: _HighContrastModeDetector
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_A11yModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
          args: [{
            imports: [_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.PlatformModule, _angular_cdk_observers__WEBPACK_IMPORTED_MODULE_12__.ObserversModule],
            declarations: [_CdkAriaLive, _CdkTrapFocus, _CdkMonitorFocus],
            exports: [_CdkAriaLive, _CdkTrapFocus, _CdkMonitorFocus]
          }]
        }], function () {
          return [{
            type: _HighContrastModeDetector
          }];
        }, null);
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](_A11yModule, {
          declarations: function declarations() {
            return [_CdkAriaLive, _CdkTrapFocus, _CdkMonitorFocus];
          },
          imports: function imports() {
            return [_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.PlatformModule, _angular_cdk_observers__WEBPACK_IMPORTED_MODULE_12__.ObserversModule];
          },
          exports: function exports() {
            return [_CdkAriaLive, _CdkTrapFocus, _CdkMonitorFocus];
          }
        });
      })();
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/a11y/public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Generated bundle index. Do not edit.
       */

      /***/

    },

    /***/
    772:
    /*!*****************************************************************!*\
      !*** ./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/bidi.js ***!
      \*****************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "BidiModule": function BidiModule() {
          return (
            /* binding */
            _BidiModule
          );
        },

        /* harmony export */
        "DIR_DOCUMENT": function DIR_DOCUMENT() {
          return (
            /* binding */
            _DIR_DOCUMENT
          );
        },

        /* harmony export */
        "Dir": function Dir() {
          return (
            /* binding */
            _Dir
          );
        },

        /* harmony export */
        "Directionality": function Directionality() {
          return (
            /* binding */
            _Directionality
          );
        },

        /* harmony export */
        "ɵangular_material_src_cdk_bidi_bidi_a": function ɵangular_material_src_cdk_bidi_bidi_a() {
          return (
            /* binding */
            DIR_DOCUMENT_FACTORY
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      2316);
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/common */
      54364);
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/bidi/dir-document-token.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Injection token used to inject the document into Directionality.
       * This is used so that the value can be faked in tests.
       *
       * We can't use the real document in tests because changing the real `dir` causes geometry-based
       * tests in Safari to fail.
       *
       * We also can't re-provide the DOCUMENT token from platform-brower because the unit tests
       * themselves use things like `querySelector` in test code.
       *
       * This token is defined in a separate file from Directionality as a workaround for
       * https://github.com/angular/angular/issues/22559
       *
       * \@docs-private
       * @type {?}
       */


      var _DIR_DOCUMENT = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('cdk-dir-doc', {
        providedIn: 'root',
        factory: DIR_DOCUMENT_FACTORY
      });
      /**
       * \@docs-private
       * @return {?}
       */


      function DIR_DOCUMENT_FACTORY() {
        return (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT);
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/bidi/directionality.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * The directionality (LTR / RTL) context for the application (or a subtree of it).
       * Exposes the current direction and a stream of direction changes.
       */


      var _Directionality = /*#__PURE__*/function () {
        /**
         * @param {?=} _document
         */
        function _Directionality(_document) {
          _classCallCheck(this, _Directionality);

          /**
           * The current 'ltr' or 'rtl' value.
           */
          this.value = 'ltr';
          /**
           * Stream that emits whenever the 'ltr' / 'rtl' state changes.
           */

          this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();

          if (_document) {
            // TODO: handle 'auto' value -
            // We still need to account for dir="auto".
            // It looks like HTMLElemenet.dir is also "auto" when that's set to the attribute,
            // but getComputedStyle return either "ltr" or "rtl". avoiding getComputedStyle for now

            /** @type {?} */
            var bodyDir = _document.body ? _document.body.dir : null;
            /** @type {?} */

            var htmlDir = _document.documentElement ? _document.documentElement.dir : null;
            /** @type {?} */

            var value = bodyDir || htmlDir;
            this.value = value === 'ltr' || value === 'rtl' ? value : 'ltr';
          }
        }
        /**
         * @return {?}
         */


        _createClass(_Directionality, [{
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.change.complete();
          }
        }]);

        return _Directionality;
      }();

      _Directionality.ɵfac = function Directionality_Factory(t) {
        return new (t || _Directionality)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_DIR_DOCUMENT, 8));
      };
      /** @nocollapse */


      _Directionality.ctorParameters = function () {
        return [{
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
            args: [_DIR_DOCUMENT]
          }]
        }];
      };
      /** @nocollapse */


      _Directionality.ɵprov = (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
        factory: function Directionality_Factory() {
          return new _Directionality((0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_DIR_DOCUMENT, 8));
        },
        token: _Directionality,
        providedIn: "root"
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_Directionality, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [{
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
              args: [_DIR_DOCUMENT]
            }]
          }];
        }, null);
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/bidi/dir.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Directive to listen for changes of direction of part of the DOM.
       *
       * Provides itself as Directionality such that descendant directives only need to ever inject
       * Directionality to get the closest direction.
       */


      var _Dir = /*#__PURE__*/function () {
        function _Dir() {
          _classCallCheck(this, _Dir);

          /**
           * Normalized direction that accounts for invalid/unsupported values.
           */
          this._dir = 'ltr';
          /**
           * Whether the `value` has been set to its initial value.
           */

          this._isInitialized = false;
          /**
           * Event emitted when the direction changes.
           */

          this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
        }
        /**
         * \@docs-private
         * @return {?}
         */


        _createClass(_Dir, [{
          key: "dir",
          get: function get() {
            return this._dir;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            /** @type {?} */
            var old = this._dir;
            /** @type {?} */

            var normalizedValue = value ? value.toLowerCase() : value;
            this._rawDir = value;
            this._dir = normalizedValue === 'ltr' || normalizedValue === 'rtl' ? normalizedValue : 'ltr';

            if (old !== this._dir && this._isInitialized) {
              this.change.emit(this._dir);
            }
          }
          /**
           * Current layout direction of the element.
           * @return {?}
           */

        }, {
          key: "value",
          get: function get() {
            return this.dir;
          }
          /**
           * Initialize once default value has been set.
           * @return {?}
           */

        }, {
          key: "ngAfterContentInit",
          value: function ngAfterContentInit() {
            this._isInitialized = true;
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.change.complete();
          }
        }]);

        return _Dir;
      }();

      _Dir.ɵfac = function Dir_Factory(t) {
        return new (t || _Dir)();
      };

      _Dir.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: _Dir,
        selectors: [["", "dir", ""]],
        hostVars: 1,
        hostBindings: function Dir_HostBindings(rf, ctx) {
          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("dir", ctx._rawDir);
          }
        },
        inputs: {
          dir: "dir"
        },
        outputs: {
          change: "dirChange"
        },
        exportAs: ["dir"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
          provide: _Directionality,
          useExisting: _Dir
        }])]
      });
      _Dir.propDecorators = {
        change: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output,
          args: ['dirChange']
        }],
        dir: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_Dir, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
          args: [{
            selector: '[dir]',
            providers: [{
              provide: _Directionality,
              useExisting: _Dir
            }],
            host: {
              '[attr.dir]': '_rawDir'
            },
            exportAs: 'dir'
          }]
        }], function () {
          return [];
        }, {
          change: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output,
            args: ['dirChange']
          }],
          dir: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }]
        });
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/bidi/bidi-module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var _BidiModule = function _BidiModule() {
        _classCallCheck(this, _BidiModule);
      };

      _BidiModule.ɵfac = function BidiModule_Factory(t) {
        return new (t || _BidiModule)();
      };

      _BidiModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: _BidiModule
      });
      _BidiModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({});

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_BidiModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
          args: [{
            exports: [_Dir],
            declarations: [_Dir]
          }]
        }], null, null);
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](_BidiModule, {
          declarations: [_Dir],
          exports: [_Dir]
        });
      })();
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/bidi/public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Generated bundle index. Do not edit.
       */

      /***/

    },

    /***/
    62604:
    /*!************************************************************************!*\
      !*** ./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/collections.js ***!
      \************************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "ArrayDataSource": function ArrayDataSource() {
          return (
            /* binding */
            _ArrayDataSource
          );
        },

        /* harmony export */
        "DataSource": function DataSource() {
          return (
            /* binding */
            _DataSource
          );
        },

        /* harmony export */
        "SelectionModel": function SelectionModel() {
          return (
            /* binding */
            _SelectionModel
          );
        },

        /* harmony export */
        "UniqueSelectionDispatcher": function UniqueSelectionDispatcher() {
          return (
            /* binding */
            _UniqueSelectionDispatcher
          );
        },

        /* harmony export */
        "getMultipleValuesInSingleSelectionError": function getMultipleValuesInSingleSelectionError() {
          return (
            /* binding */
            _getMultipleValuesInSingleSelectionError
          );
        },

        /* harmony export */
        "isDataSource": function isDataSource() {
          return (
            /* binding */
            _isDataSource
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! rxjs */
      64674);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! rxjs */
      81134);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! rxjs */
      79441);
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/core */
      2316);
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/collections/data-source.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @abstract
       * @template T
       */


      var _DataSource = function _DataSource() {
        _classCallCheck(this, _DataSource);
      };

      if (false) {}
      /**
       * Checks whether an object is a data source.
       * @param {?} value
       * @return {?}
       */


      function _isDataSource(value) {
        // Check if the value is a DataSource by observing if it has a connect function. Cannot
        // be checked as an `instanceof DataSource` since people could create their own sources
        // that match the interface, but don't extend DataSource.
        return value && typeof value.connect === 'function';
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/collections/array-data-source.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * DataSource wrapper for a native array.
       * @template T
       */


      var _ArrayDataSource = /*#__PURE__*/function (_DataSource2) {
        _inherits(_ArrayDataSource, _DataSource2);

        var _super4 = _createSuper(_ArrayDataSource);

        /**
         * @param {?} _data
         */
        function _ArrayDataSource(_data) {
          var _this19;

          _classCallCheck(this, _ArrayDataSource);

          _this19 = _super4.call(this);
          _this19._data = _data;
          return _this19;
        }
        /**
         * @return {?}
         */


        _createClass(_ArrayDataSource, [{
          key: "connect",
          value: function connect() {
            return (0, rxjs__WEBPACK_IMPORTED_MODULE_0__.isObservable)(this._data) ? this._data : (0, rxjs__WEBPACK_IMPORTED_MODULE_1__.of)(this._data);
          }
          /**
           * @return {?}
           */

        }, {
          key: "disconnect",
          value: function disconnect() {}
        }]);

        return _ArrayDataSource;
      }(_DataSource);

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/collections/collection-viewer.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Interface for any component that provides a view of some data collection and wants to provide
       * information regarding the view and any changes made.
       * @record
       */


      function CollectionViewer() {}

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/collections/selection-model.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Class to be used to power selecting one or more options from a list.
       * @template T
       */


      var _SelectionModel = /*#__PURE__*/function () {
        /**
         * @param {?=} _multiple
         * @param {?=} initiallySelectedValues
         * @param {?=} _emitChanges
         */
        function _SelectionModel() {
          var _this20 = this;

          var _multiple = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

          var initiallySelectedValues = arguments.length > 1 ? arguments[1] : undefined;

          var _emitChanges = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

          _classCallCheck(this, _SelectionModel);

          this._multiple = _multiple;
          this._emitChanges = _emitChanges;
          /**
           * Currently-selected values.
           */

          this._selection = new Set();
          /**
           * Keeps track of the deselected options that haven't been emitted by the change event.
           */

          this._deselectedToEmit = [];
          /**
           * Keeps track of the selected options that haven't been emitted by the change event.
           */

          this._selectedToEmit = [];
          /**
           * Event emitted when the value has changed.
           */

          this.changed = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Subject();

          if (initiallySelectedValues && initiallySelectedValues.length) {
            if (_multiple) {
              initiallySelectedValues.forEach(
              /**
              * @param {?} value
              * @return {?}
              */
              function (value) {
                return _this20._markSelected(value);
              });
            } else {
              this._markSelected(initiallySelectedValues[0]);
            } // Clear the array in order to avoid firing the change event for preselected values.


            this._selectedToEmit.length = 0;
          }
        }
        /**
         * Selected values.
         * @return {?}
         */


        _createClass(_SelectionModel, [{
          key: "selected",
          get: function get() {
            if (!this._selected) {
              this._selected = Array.from(this._selection.values());
            }

            return this._selected;
          }
          /**
           * Selects a value or an array of values.
           * @param {...?} values
           * @return {?}
           */

        }, {
          key: "select",
          value: function select() {
            var _this21 = this;

            for (var _len2 = arguments.length, values = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              values[_key2] = arguments[_key2];
            }

            this._verifyValueAssignment(values);

            values.forEach(
            /**
            * @param {?} value
            * @return {?}
            */
            function (value) {
              return _this21._markSelected(value);
            });

            this._emitChangeEvent();
          }
          /**
           * Deselects a value or an array of values.
           * @param {...?} values
           * @return {?}
           */

        }, {
          key: "deselect",
          value: function deselect() {
            var _this22 = this;

            for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
              values[_key3] = arguments[_key3];
            }

            this._verifyValueAssignment(values);

            values.forEach(
            /**
            * @param {?} value
            * @return {?}
            */
            function (value) {
              return _this22._unmarkSelected(value);
            });

            this._emitChangeEvent();
          }
          /**
           * Toggles a value between selected and deselected.
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "toggle",
          value: function toggle(value) {
            this.isSelected(value) ? this.deselect(value) : this.select(value);
          }
          /**
           * Clears all of the selected values.
           * @return {?}
           */

        }, {
          key: "clear",
          value: function clear() {
            this._unmarkAll();

            this._emitChangeEvent();
          }
          /**
           * Determines whether a value is selected.
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "isSelected",
          value: function isSelected(value) {
            return this._selection.has(value);
          }
          /**
           * Determines whether the model does not have a value.
           * @return {?}
           */

        }, {
          key: "isEmpty",
          value: function isEmpty() {
            return this._selection.size === 0;
          }
          /**
           * Determines whether the model has a value.
           * @return {?}
           */

        }, {
          key: "hasValue",
          value: function hasValue() {
            return !this.isEmpty();
          }
          /**
           * Sorts the selected values based on a predicate function.
           * @param {?=} predicate
           * @return {?}
           */

        }, {
          key: "sort",
          value: function sort(predicate) {
            if (this._multiple && this.selected) {
              /** @type {?} */
              this._selected.sort(predicate);
            }
          }
          /**
           * Gets whether multiple values can be selected.
           * @return {?}
           */

        }, {
          key: "isMultipleSelection",
          value: function isMultipleSelection() {
            return this._multiple;
          }
          /**
           * Emits a change event and clears the records of selected and deselected values.
           * @private
           * @return {?}
           */

        }, {
          key: "_emitChangeEvent",
          value: function _emitChangeEvent() {
            // Clear the selected values so they can be re-cached.
            this._selected = null;

            if (this._selectedToEmit.length || this._deselectedToEmit.length) {
              this.changed.next({
                source: this,
                added: this._selectedToEmit,
                removed: this._deselectedToEmit
              });
              this._deselectedToEmit = [];
              this._selectedToEmit = [];
            }
          }
          /**
           * Selects a value.
           * @private
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "_markSelected",
          value: function _markSelected(value) {
            if (!this.isSelected(value)) {
              if (!this._multiple) {
                this._unmarkAll();
              }

              this._selection.add(value);

              if (this._emitChanges) {
                this._selectedToEmit.push(value);
              }
            }
          }
          /**
           * Deselects a value.
           * @private
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "_unmarkSelected",
          value: function _unmarkSelected(value) {
            if (this.isSelected(value)) {
              this._selection["delete"](value);

              if (this._emitChanges) {
                this._deselectedToEmit.push(value);
              }
            }
          }
          /**
           * Clears out the selected values.
           * @private
           * @return {?}
           */

        }, {
          key: "_unmarkAll",
          value: function _unmarkAll() {
            var _this23 = this;

            if (!this.isEmpty()) {
              this._selection.forEach(
              /**
              * @param {?} value
              * @return {?}
              */
              function (value) {
                return _this23._unmarkSelected(value);
              });
            }
          }
          /**
           * Verifies the value assignment and throws an error if the specified value array is
           * including multiple values while the selection model is not supporting multiple values.
           * @private
           * @param {?} values
           * @return {?}
           */

        }, {
          key: "_verifyValueAssignment",
          value: function _verifyValueAssignment(values) {
            if (values.length > 1 && !this._multiple) {
              throw _getMultipleValuesInSingleSelectionError();
            }
          }
        }]);

        return _SelectionModel;
      }();

      if (false) {}
      /**
       * Event emitted when the value of a MatSelectionModel has changed.
       * \@docs-private
       * @record
       * @template T
       */


      function SelectionChange() {}

      if (false) {}
      /**
       * Returns an error that reports that multiple values are passed into a selection model
       * with a single value.
       * \@docs-private
       * @return {?}
       */


      function _getMultipleValuesInSingleSelectionError() {
        return Error('Cannot pass multiple values into SelectionModel with single-value mode.');
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/collections/unique-selection-dispatcher.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Class to coordinate unique selection based on name.
       * Intended to be consumed as an Angular service.
       * This service is needed because native radio change events are only fired on the item currently
       * being selected, and we still need to uncheck the previous selection.
       *
       * This service does not *store* any IDs and names because they may change at any time, so it is
       * less error-prone if they are simply passed through when the events occur.
       */


      var _UniqueSelectionDispatcher = /*#__PURE__*/function () {
        function _UniqueSelectionDispatcher() {
          _classCallCheck(this, _UniqueSelectionDispatcher);

          this._listeners = [];
        }
        /**
         * Notify other items that selection for the given name has been set.
         * @param {?} id ID of the item.
         * @param {?} name Name of the item.
         * @return {?}
         */


        _createClass(_UniqueSelectionDispatcher, [{
          key: "notify",
          value: function notify(id, name) {
            var _iterator = _createForOfIteratorHelper(this._listeners),
                _step;

            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var listener = _step.value;
                listener(id, name);
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
          }
          /**
           * Listen for future changes to item selection.
           * @param {?} listener
           * @return {?} Function used to deregister listener
           */

        }, {
          key: "listen",
          value: function listen(listener) {
            var _this24 = this;

            this._listeners.push(listener);

            return (
              /**
              * @return {?}
              */
              function () {
                _this24._listeners = _this24._listeners.filter(
                /**
                * @param {?} registered
                * @return {?}
                */
                function (registered) {
                  return listener !== registered;
                });
              }
            );
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this._listeners = [];
          }
        }]);

        return _UniqueSelectionDispatcher;
      }();

      _UniqueSelectionDispatcher.ɵfac = function UniqueSelectionDispatcher_Factory(t) {
        return new (t || _UniqueSelectionDispatcher)();
      };
      /** @nocollapse */


      _UniqueSelectionDispatcher.ɵprov = (0, _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineInjectable"])({
        factory: function UniqueSelectionDispatcher_Factory() {
          return new _UniqueSelectionDispatcher();
        },
        token: _UniqueSelectionDispatcher,
        providedIn: "root"
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵsetClassMetadata"](_UniqueSelectionDispatcher, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Injectable,
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [];
        }, null);
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/collections/tree-adapter.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Interface for a class that can flatten hierarchical structured data and re-expand the flattened
       * data back into its original structure. Should be used in conjunction with the cdk-tree.
       * @record
       * @template T
       */


      function TreeDataNodeFlattener() {}

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/collections/public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Generated bundle index. Do not edit.
       */

      /***/

    },

    /***/
    90084:
    /*!*********************************************************************!*\
      !*** ./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/keycodes.js ***!
      \*********************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "A": function A() {
          return (
            /* binding */
            _A
          );
        },

        /* harmony export */
        "ALT": function ALT() {
          return (
            /* binding */
            _ALT
          );
        },

        /* harmony export */
        "APOSTROPHE": function APOSTROPHE() {
          return (
            /* binding */
            _APOSTROPHE
          );
        },

        /* harmony export */
        "AT_SIGN": function AT_SIGN() {
          return (
            /* binding */
            _AT_SIGN
          );
        },

        /* harmony export */
        "B": function B() {
          return (
            /* binding */
            _B
          );
        },

        /* harmony export */
        "BACKSLASH": function BACKSLASH() {
          return (
            /* binding */
            _BACKSLASH
          );
        },

        /* harmony export */
        "BACKSPACE": function BACKSPACE() {
          return (
            /* binding */
            _BACKSPACE
          );
        },

        /* harmony export */
        "C": function C() {
          return (
            /* binding */
            _C
          );
        },

        /* harmony export */
        "CAPS_LOCK": function CAPS_LOCK() {
          return (
            /* binding */
            _CAPS_LOCK
          );
        },

        /* harmony export */
        "CLOSE_SQUARE_BRACKET": function CLOSE_SQUARE_BRACKET() {
          return (
            /* binding */
            _CLOSE_SQUARE_BRACKET
          );
        },

        /* harmony export */
        "COMMA": function COMMA() {
          return (
            /* binding */
            _COMMA
          );
        },

        /* harmony export */
        "CONTEXT_MENU": function CONTEXT_MENU() {
          return (
            /* binding */
            _CONTEXT_MENU
          );
        },

        /* harmony export */
        "CONTROL": function CONTROL() {
          return (
            /* binding */
            _CONTROL
          );
        },

        /* harmony export */
        "D": function D() {
          return (
            /* binding */
            _D
          );
        },

        /* harmony export */
        "DASH": function DASH() {
          return (
            /* binding */
            _DASH
          );
        },

        /* harmony export */
        "DELETE": function DELETE() {
          return (
            /* binding */
            _DELETE
          );
        },

        /* harmony export */
        "DOWN_ARROW": function DOWN_ARROW() {
          return (
            /* binding */
            _DOWN_ARROW
          );
        },

        /* harmony export */
        "E": function E() {
          return (
            /* binding */
            _E
          );
        },

        /* harmony export */
        "EIGHT": function EIGHT() {
          return (
            /* binding */
            _EIGHT
          );
        },

        /* harmony export */
        "END": function END() {
          return (
            /* binding */
            _END
          );
        },

        /* harmony export */
        "ENTER": function ENTER() {
          return (
            /* binding */
            _ENTER
          );
        },

        /* harmony export */
        "EQUALS": function EQUALS() {
          return (
            /* binding */
            _EQUALS
          );
        },

        /* harmony export */
        "ESCAPE": function ESCAPE() {
          return (
            /* binding */
            _ESCAPE
          );
        },

        /* harmony export */
        "F": function F() {
          return (
            /* binding */
            _F
          );
        },

        /* harmony export */
        "F1": function F1() {
          return (
            /* binding */
            _F2
          );
        },

        /* harmony export */
        "F10": function F10() {
          return (
            /* binding */
            _F3
          );
        },

        /* harmony export */
        "F11": function F11() {
          return (
            /* binding */
            _F4
          );
        },

        /* harmony export */
        "F12": function F12() {
          return (
            /* binding */
            _F5
          );
        },

        /* harmony export */
        "F2": function F2() {
          return (
            /* binding */
            _F6
          );
        },

        /* harmony export */
        "F3": function F3() {
          return (
            /* binding */
            _F7
          );
        },

        /* harmony export */
        "F4": function F4() {
          return (
            /* binding */
            _F8
          );
        },

        /* harmony export */
        "F5": function F5() {
          return (
            /* binding */
            _F9
          );
        },

        /* harmony export */
        "F6": function F6() {
          return (
            /* binding */
            _F10
          );
        },

        /* harmony export */
        "F7": function F7() {
          return (
            /* binding */
            _F11
          );
        },

        /* harmony export */
        "F8": function F8() {
          return (
            /* binding */
            _F12
          );
        },

        /* harmony export */
        "F9": function F9() {
          return (
            /* binding */
            _F13
          );
        },

        /* harmony export */
        "FF_EQUALS": function FF_EQUALS() {
          return (
            /* binding */
            _FF_EQUALS
          );
        },

        /* harmony export */
        "FF_MINUS": function FF_MINUS() {
          return (
            /* binding */
            _FF_MINUS
          );
        },

        /* harmony export */
        "FF_MUTE": function FF_MUTE() {
          return (
            /* binding */
            _FF_MUTE
          );
        },

        /* harmony export */
        "FF_SEMICOLON": function FF_SEMICOLON() {
          return (
            /* binding */
            _FF_SEMICOLON
          );
        },

        /* harmony export */
        "FF_VOLUME_DOWN": function FF_VOLUME_DOWN() {
          return (
            /* binding */
            _FF_VOLUME_DOWN
          );
        },

        /* harmony export */
        "FF_VOLUME_UP": function FF_VOLUME_UP() {
          return (
            /* binding */
            _FF_VOLUME_UP
          );
        },

        /* harmony export */
        "FIRST_MEDIA": function FIRST_MEDIA() {
          return (
            /* binding */
            _FIRST_MEDIA
          );
        },

        /* harmony export */
        "FIVE": function FIVE() {
          return (
            /* binding */
            _FIVE
          );
        },

        /* harmony export */
        "FOUR": function FOUR() {
          return (
            /* binding */
            _FOUR
          );
        },

        /* harmony export */
        "G": function G() {
          return (
            /* binding */
            _G
          );
        },

        /* harmony export */
        "H": function H() {
          return (
            /* binding */
            _H
          );
        },

        /* harmony export */
        "HOME": function HOME() {
          return (
            /* binding */
            _HOME
          );
        },

        /* harmony export */
        "I": function I() {
          return (
            /* binding */
            _I
          );
        },

        /* harmony export */
        "INSERT": function INSERT() {
          return (
            /* binding */
            _INSERT
          );
        },

        /* harmony export */
        "J": function J() {
          return (
            /* binding */
            _J
          );
        },

        /* harmony export */
        "K": function K() {
          return (
            /* binding */
            _K
          );
        },

        /* harmony export */
        "L": function L() {
          return (
            /* binding */
            _L
          );
        },

        /* harmony export */
        "LAST_MEDIA": function LAST_MEDIA() {
          return (
            /* binding */
            _LAST_MEDIA
          );
        },

        /* harmony export */
        "LEFT_ARROW": function LEFT_ARROW() {
          return (
            /* binding */
            _LEFT_ARROW
          );
        },

        /* harmony export */
        "M": function M() {
          return (
            /* binding */
            _M
          );
        },

        /* harmony export */
        "MAC_ENTER": function MAC_ENTER() {
          return (
            /* binding */
            _MAC_ENTER
          );
        },

        /* harmony export */
        "MAC_META": function MAC_META() {
          return (
            /* binding */
            _MAC_META
          );
        },

        /* harmony export */
        "MAC_WK_CMD_LEFT": function MAC_WK_CMD_LEFT() {
          return (
            /* binding */
            _MAC_WK_CMD_LEFT
          );
        },

        /* harmony export */
        "MAC_WK_CMD_RIGHT": function MAC_WK_CMD_RIGHT() {
          return (
            /* binding */
            _MAC_WK_CMD_RIGHT
          );
        },

        /* harmony export */
        "META": function META() {
          return (
            /* binding */
            _META
          );
        },

        /* harmony export */
        "MUTE": function MUTE() {
          return (
            /* binding */
            _MUTE
          );
        },

        /* harmony export */
        "N": function N() {
          return (
            /* binding */
            _N
          );
        },

        /* harmony export */
        "NINE": function NINE() {
          return (
            /* binding */
            _NINE
          );
        },

        /* harmony export */
        "NUMPAD_DIVIDE": function NUMPAD_DIVIDE() {
          return (
            /* binding */
            _NUMPAD_DIVIDE
          );
        },

        /* harmony export */
        "NUMPAD_EIGHT": function NUMPAD_EIGHT() {
          return (
            /* binding */
            _NUMPAD_EIGHT
          );
        },

        /* harmony export */
        "NUMPAD_FIVE": function NUMPAD_FIVE() {
          return (
            /* binding */
            _NUMPAD_FIVE
          );
        },

        /* harmony export */
        "NUMPAD_FOUR": function NUMPAD_FOUR() {
          return (
            /* binding */
            _NUMPAD_FOUR
          );
        },

        /* harmony export */
        "NUMPAD_MINUS": function NUMPAD_MINUS() {
          return (
            /* binding */
            _NUMPAD_MINUS
          );
        },

        /* harmony export */
        "NUMPAD_MULTIPLY": function NUMPAD_MULTIPLY() {
          return (
            /* binding */
            _NUMPAD_MULTIPLY
          );
        },

        /* harmony export */
        "NUMPAD_NINE": function NUMPAD_NINE() {
          return (
            /* binding */
            _NUMPAD_NINE
          );
        },

        /* harmony export */
        "NUMPAD_ONE": function NUMPAD_ONE() {
          return (
            /* binding */
            _NUMPAD_ONE
          );
        },

        /* harmony export */
        "NUMPAD_PERIOD": function NUMPAD_PERIOD() {
          return (
            /* binding */
            _NUMPAD_PERIOD
          );
        },

        /* harmony export */
        "NUMPAD_PLUS": function NUMPAD_PLUS() {
          return (
            /* binding */
            _NUMPAD_PLUS
          );
        },

        /* harmony export */
        "NUMPAD_SEVEN": function NUMPAD_SEVEN() {
          return (
            /* binding */
            _NUMPAD_SEVEN
          );
        },

        /* harmony export */
        "NUMPAD_SIX": function NUMPAD_SIX() {
          return (
            /* binding */
            _NUMPAD_SIX
          );
        },

        /* harmony export */
        "NUMPAD_THREE": function NUMPAD_THREE() {
          return (
            /* binding */
            _NUMPAD_THREE
          );
        },

        /* harmony export */
        "NUMPAD_TWO": function NUMPAD_TWO() {
          return (
            /* binding */
            _NUMPAD_TWO
          );
        },

        /* harmony export */
        "NUMPAD_ZERO": function NUMPAD_ZERO() {
          return (
            /* binding */
            _NUMPAD_ZERO
          );
        },

        /* harmony export */
        "NUM_CENTER": function NUM_CENTER() {
          return (
            /* binding */
            _NUM_CENTER
          );
        },

        /* harmony export */
        "NUM_LOCK": function NUM_LOCK() {
          return (
            /* binding */
            _NUM_LOCK
          );
        },

        /* harmony export */
        "O": function O() {
          return (
            /* binding */
            _O
          );
        },

        /* harmony export */
        "ONE": function ONE() {
          return (
            /* binding */
            _ONE
          );
        },

        /* harmony export */
        "OPEN_SQUARE_BRACKET": function OPEN_SQUARE_BRACKET() {
          return (
            /* binding */
            _OPEN_SQUARE_BRACKET
          );
        },

        /* harmony export */
        "P": function P() {
          return (
            /* binding */
            _P
          );
        },

        /* harmony export */
        "PAGE_DOWN": function PAGE_DOWN() {
          return (
            /* binding */
            _PAGE_DOWN
          );
        },

        /* harmony export */
        "PAGE_UP": function PAGE_UP() {
          return (
            /* binding */
            _PAGE_UP
          );
        },

        /* harmony export */
        "PAUSE": function PAUSE() {
          return (
            /* binding */
            _PAUSE
          );
        },

        /* harmony export */
        "PLUS_SIGN": function PLUS_SIGN() {
          return (
            /* binding */
            _PLUS_SIGN
          );
        },

        /* harmony export */
        "PRINT_SCREEN": function PRINT_SCREEN() {
          return (
            /* binding */
            _PRINT_SCREEN
          );
        },

        /* harmony export */
        "Q": function Q() {
          return (
            /* binding */
            _Q
          );
        },

        /* harmony export */
        "QUESTION_MARK": function QUESTION_MARK() {
          return (
            /* binding */
            _QUESTION_MARK
          );
        },

        /* harmony export */
        "R": function R() {
          return (
            /* binding */
            _R
          );
        },

        /* harmony export */
        "RIGHT_ARROW": function RIGHT_ARROW() {
          return (
            /* binding */
            _RIGHT_ARROW
          );
        },

        /* harmony export */
        "S": function S() {
          return (
            /* binding */
            _S
          );
        },

        /* harmony export */
        "SCROLL_LOCK": function SCROLL_LOCK() {
          return (
            /* binding */
            _SCROLL_LOCK
          );
        },

        /* harmony export */
        "SEMICOLON": function SEMICOLON() {
          return (
            /* binding */
            _SEMICOLON
          );
        },

        /* harmony export */
        "SEVEN": function SEVEN() {
          return (
            /* binding */
            _SEVEN
          );
        },

        /* harmony export */
        "SHIFT": function SHIFT() {
          return (
            /* binding */
            _SHIFT
          );
        },

        /* harmony export */
        "SINGLE_QUOTE": function SINGLE_QUOTE() {
          return (
            /* binding */
            _SINGLE_QUOTE
          );
        },

        /* harmony export */
        "SIX": function SIX() {
          return (
            /* binding */
            _SIX
          );
        },

        /* harmony export */
        "SLASH": function SLASH() {
          return (
            /* binding */
            _SLASH
          );
        },

        /* harmony export */
        "SPACE": function SPACE() {
          return (
            /* binding */
            _SPACE
          );
        },

        /* harmony export */
        "T": function T() {
          return (
            /* binding */
            _T
          );
        },

        /* harmony export */
        "TAB": function TAB() {
          return (
            /* binding */
            _TAB
          );
        },

        /* harmony export */
        "THREE": function THREE() {
          return (
            /* binding */
            _THREE
          );
        },

        /* harmony export */
        "TILDE": function TILDE() {
          return (
            /* binding */
            _TILDE
          );
        },

        /* harmony export */
        "TWO": function TWO() {
          return (
            /* binding */
            _TWO
          );
        },

        /* harmony export */
        "U": function U() {
          return (
            /* binding */
            _U
          );
        },

        /* harmony export */
        "UP_ARROW": function UP_ARROW() {
          return (
            /* binding */
            _UP_ARROW
          );
        },

        /* harmony export */
        "V": function V() {
          return (
            /* binding */
            _V
          );
        },

        /* harmony export */
        "VOLUME_DOWN": function VOLUME_DOWN() {
          return (
            /* binding */
            _VOLUME_DOWN
          );
        },

        /* harmony export */
        "VOLUME_UP": function VOLUME_UP() {
          return (
            /* binding */
            _VOLUME_UP
          );
        },

        /* harmony export */
        "W": function W() {
          return (
            /* binding */
            _W
          );
        },

        /* harmony export */
        "X": function X() {
          return (
            /* binding */
            _X
          );
        },

        /* harmony export */
        "Y": function Y() {
          return (
            /* binding */
            _Y
          );
        },

        /* harmony export */
        "Z": function Z() {
          return (
            /* binding */
            _Z
          );
        },

        /* harmony export */
        "ZERO": function ZERO() {
          return (
            /* binding */
            _ZERO
          );
        },

        /* harmony export */
        "hasModifierKey": function hasModifierKey() {
          return (
            /* binding */
            _hasModifierKey
          );
        }
        /* harmony export */

      });
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/keycodes/keycodes.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** @type {?} */


      var _MAC_ENTER = 3;
      /** @type {?} */

      var _BACKSPACE = 8;
      /** @type {?} */

      var _TAB = 9;
      /** @type {?} */

      var _NUM_CENTER = 12;
      /** @type {?} */

      var _ENTER = 13;
      /** @type {?} */

      var _SHIFT = 16;
      /** @type {?} */

      var _CONTROL = 17;
      /** @type {?} */

      var _ALT = 18;
      /** @type {?} */

      var _PAUSE = 19;
      /** @type {?} */

      var _CAPS_LOCK = 20;
      /** @type {?} */

      var _ESCAPE = 27;
      /** @type {?} */

      var _SPACE = 32;
      /** @type {?} */

      var _PAGE_UP = 33;
      /** @type {?} */

      var _PAGE_DOWN = 34;
      /** @type {?} */

      var _END = 35;
      /** @type {?} */

      var _HOME = 36;
      /** @type {?} */

      var _LEFT_ARROW = 37;
      /** @type {?} */

      var _UP_ARROW = 38;
      /** @type {?} */

      var _RIGHT_ARROW = 39;
      /** @type {?} */

      var _DOWN_ARROW = 40;
      /** @type {?} */

      var _PLUS_SIGN = 43;
      /** @type {?} */

      var _PRINT_SCREEN = 44;
      /** @type {?} */

      var _INSERT = 45;
      /** @type {?} */

      var _DELETE = 46;
      /** @type {?} */

      var _ZERO = 48;
      /** @type {?} */

      var _ONE = 49;
      /** @type {?} */

      var _TWO = 50;
      /** @type {?} */

      var _THREE = 51;
      /** @type {?} */

      var _FOUR = 52;
      /** @type {?} */

      var _FIVE = 53;
      /** @type {?} */

      var _SIX = 54;
      /** @type {?} */

      var _SEVEN = 55;
      /** @type {?} */

      var _EIGHT = 56;
      /** @type {?} */

      var _NINE = 57;
      /** @type {?} */

      var _FF_SEMICOLON = 59; // Firefox (Gecko) fires this for semicolon instead of 186

      /** @type {?} */

      var _FF_EQUALS = 61; // Firefox (Gecko) fires this for equals instead of 187

      /** @type {?} */

      var _QUESTION_MARK = 63;
      /** @type {?} */

      var _AT_SIGN = 64;
      /** @type {?} */

      var _A = 65;
      /** @type {?} */

      var _B = 66;
      /** @type {?} */

      var _C = 67;
      /** @type {?} */

      var _D = 68;
      /** @type {?} */

      var _E = 69;
      /** @type {?} */

      var _F = 70;
      /** @type {?} */

      var _G = 71;
      /** @type {?} */

      var _H = 72;
      /** @type {?} */

      var _I = 73;
      /** @type {?} */

      var _J = 74;
      /** @type {?} */

      var _K = 75;
      /** @type {?} */

      var _L = 76;
      /** @type {?} */

      var _M = 77;
      /** @type {?} */

      var _N = 78;
      /** @type {?} */

      var _O = 79;
      /** @type {?} */

      var _P = 80;
      /** @type {?} */

      var _Q = 81;
      /** @type {?} */

      var _R = 82;
      /** @type {?} */

      var _S = 83;
      /** @type {?} */

      var _T = 84;
      /** @type {?} */

      var _U = 85;
      /** @type {?} */

      var _V = 86;
      /** @type {?} */

      var _W = 87;
      /** @type {?} */

      var _X = 88;
      /** @type {?} */

      var _Y = 89;
      /** @type {?} */

      var _Z = 90;
      /** @type {?} */

      var _META = 91; // WIN_KEY_LEFT

      /** @type {?} */

      var _MAC_WK_CMD_LEFT = 91;
      /** @type {?} */

      var _MAC_WK_CMD_RIGHT = 93;
      /** @type {?} */

      var _CONTEXT_MENU = 93;
      /** @type {?} */

      var _NUMPAD_ZERO = 96;
      /** @type {?} */

      var _NUMPAD_ONE = 97;
      /** @type {?} */

      var _NUMPAD_TWO = 98;
      /** @type {?} */

      var _NUMPAD_THREE = 99;
      /** @type {?} */

      var _NUMPAD_FOUR = 100;
      /** @type {?} */

      var _NUMPAD_FIVE = 101;
      /** @type {?} */

      var _NUMPAD_SIX = 102;
      /** @type {?} */

      var _NUMPAD_SEVEN = 103;
      /** @type {?} */

      var _NUMPAD_EIGHT = 104;
      /** @type {?} */

      var _NUMPAD_NINE = 105;
      /** @type {?} */

      var _NUMPAD_MULTIPLY = 106;
      /** @type {?} */

      var _NUMPAD_PLUS = 107;
      /** @type {?} */

      var _NUMPAD_MINUS = 109;
      /** @type {?} */

      var _NUMPAD_PERIOD = 110;
      /** @type {?} */

      var _NUMPAD_DIVIDE = 111;
      /** @type {?} */

      var _F2 = 112;
      /** @type {?} */

      var _F6 = 113;
      /** @type {?} */

      var _F7 = 114;
      /** @type {?} */

      var _F8 = 115;
      /** @type {?} */

      var _F9 = 116;
      /** @type {?} */

      var _F10 = 117;
      /** @type {?} */

      var _F11 = 118;
      /** @type {?} */

      var _F12 = 119;
      /** @type {?} */

      var _F13 = 120;
      /** @type {?} */

      var _F3 = 121;
      /** @type {?} */

      var _F4 = 122;
      /** @type {?} */

      var _F5 = 123;
      /** @type {?} */

      var _NUM_LOCK = 144;
      /** @type {?} */

      var _SCROLL_LOCK = 145;
      /** @type {?} */

      var _FIRST_MEDIA = 166;
      /** @type {?} */

      var _FF_MINUS = 173;
      /** @type {?} */

      var _MUTE = 173; // Firefox (Gecko) fires 181 for MUTE

      /** @type {?} */

      var _VOLUME_DOWN = 174; // Firefox (Gecko) fires 182 for VOLUME_DOWN

      /** @type {?} */

      var _VOLUME_UP = 175; // Firefox (Gecko) fires 183 for VOLUME_UP

      /** @type {?} */

      var _FF_MUTE = 181;
      /** @type {?} */

      var _FF_VOLUME_DOWN = 182;
      /** @type {?} */

      var _LAST_MEDIA = 183;
      /** @type {?} */

      var _FF_VOLUME_UP = 183;
      /** @type {?} */

      var _SEMICOLON = 186; // Firefox (Gecko) fires 59 for SEMICOLON

      /** @type {?} */

      var _EQUALS = 187; // Firefox (Gecko) fires 61 for EQUALS

      /** @type {?} */

      var _COMMA = 188;
      /** @type {?} */

      var _DASH = 189; // Firefox (Gecko) fires 173 for DASH/MINUS

      /** @type {?} */

      var _SLASH = 191;
      /** @type {?} */

      var _APOSTROPHE = 192;
      /** @type {?} */

      var _TILDE = 192;
      /** @type {?} */

      var _OPEN_SQUARE_BRACKET = 219;
      /** @type {?} */

      var _BACKSLASH = 220;
      /** @type {?} */

      var _CLOSE_SQUARE_BRACKET = 221;
      /** @type {?} */

      var _SINGLE_QUOTE = 222;
      /** @type {?} */

      var _MAC_META = 224;
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/keycodes/modifiers.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Checks whether a modifier key is pressed.
       * @param {?} event Event to be checked.
       * @param {...?} modifiers
       * @return {?}
       */

      function _hasModifierKey(event) {
        for (var _len4 = arguments.length, modifiers = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
          modifiers[_key4 - 1] = arguments[_key4];
        }

        if (modifiers.length) {
          return modifiers.some(
          /**
          * @param {?} modifier
          * @return {?}
          */
          function (modifier) {
            return event[modifier];
          });
        }

        return event.altKey || event.shiftKey || event.ctrlKey || event.metaKey;
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/keycodes/public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Generated bundle index. Do not edit.
       */

      /***/

    },

    /***/
    66883:
    /*!*******************************************************************!*\
      !*** ./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/layout.js ***!
      \*******************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "BreakpointObserver": function BreakpointObserver() {
          return (
            /* binding */
            _BreakpointObserver
          );
        },

        /* harmony export */
        "Breakpoints": function Breakpoints() {
          return (
            /* binding */
            _Breakpoints
          );
        },

        /* harmony export */
        "LayoutModule": function LayoutModule() {
          return (
            /* binding */
            _LayoutModule
          );
        },

        /* harmony export */
        "MediaMatcher": function MediaMatcher() {
          return (
            /* binding */
            _MediaMatcher
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      2316);
      /* harmony import */


      var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/cdk/platform */
      36145);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! rxjs */
      79441);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! rxjs */
      61486);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! rxjs */
      76461);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! rxjs */
      25160);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! rxjs/operators */
      53466);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! rxjs/operators */
      84515);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! rxjs/operators */
      80639);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! rxjs/operators */
      33927);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
      /*! rxjs/operators */
      1143);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
      /*! rxjs/operators */
      22663);
      /* harmony import */


      var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/cdk/coercion */
      20657);
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/layout/layout-module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var _LayoutModule = function _LayoutModule() {
        _classCallCheck(this, _LayoutModule);
      };

      _LayoutModule.ɵfac = function LayoutModule_Factory(t) {
        return new (t || _LayoutModule)();
      };

      _LayoutModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: _LayoutModule
      });
      _LayoutModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({});

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_LayoutModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
          args: [{}]
        }], null, null);
      })();
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/layout/media-matcher.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Global registry for all dynamically-created, injected media queries.
       * @type {?}
       */


      var mediaQueriesForWebkitCompatibility = new Set();
      /**
       * Style tag that holds all of the dynamically-created media queries.
       * @type {?}
       */

      var mediaQueryStyleNode;
      /**
       * A utility for calling matchMedia queries.
       */

      var _MediaMatcher = /*#__PURE__*/function () {
        /**
         * @param {?} _platform
         */
        function _MediaMatcher(_platform) {
          _classCallCheck(this, _MediaMatcher);

          this._platform = _platform;
          this._matchMedia = this._platform.isBrowser && window.matchMedia ? // matchMedia is bound to the window scope intentionally as it is an illegal invocation to
          // call it from a different scope.
          window.matchMedia.bind(window) : noopMatchMedia;
        }
        /**
         * Evaluates the given media query and returns the native MediaQueryList from which results
         * can be retrieved.
         * Confirms the layout engine will trigger for the selector query provided and returns the
         * MediaQueryList for the query provided.
         * @param {?} query
         * @return {?}
         */


        _createClass(_MediaMatcher, [{
          key: "matchMedia",
          value: function matchMedia(query) {
            if (this._platform.WEBKIT) {
              createEmptyStyleRule(query);
            }

            return this._matchMedia(query);
          }
        }]);

        return _MediaMatcher;
      }();

      _MediaMatcher.ɵfac = function MediaMatcher_Factory(t) {
        return new (t || _MediaMatcher)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__.Platform));
      };
      /** @nocollapse */


      _MediaMatcher.ctorParameters = function () {
        return [{
          type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__.Platform
        }];
      };
      /** @nocollapse */


      _MediaMatcher.ɵprov = (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
        factory: function MediaMatcher_Factory() {
          return new _MediaMatcher((0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__.Platform));
        },
        token: _MediaMatcher,
        providedIn: "root"
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_MediaMatcher, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [{
            type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__.Platform
          }];
        }, null);
      })();

      if (false) {}
      /**
       * For Webkit engines that only trigger the MediaQueryListListener when
       * there is at least one CSS selector for the respective media query.
       * @param {?} query
       * @return {?}
       */


      function createEmptyStyleRule(query) {
        if (mediaQueriesForWebkitCompatibility.has(query)) {
          return;
        }

        try {
          if (!mediaQueryStyleNode) {
            mediaQueryStyleNode = document.createElement('style');
            mediaQueryStyleNode.setAttribute('type', 'text/css');

            /** @type {?} */
            document.head.appendChild(mediaQueryStyleNode);
          }

          if (mediaQueryStyleNode.sheet) {
            /** @type {?} */
            mediaQueryStyleNode.sheet.insertRule("@media ".concat(query, " {.fx-query-test{ }}"), 0);
            mediaQueriesForWebkitCompatibility.add(query);
          }
        } catch (e) {
          console.error(e);
        }
      }
      /**
       * No-op matchMedia replacement for non-browser platforms.
       * @param {?} query
       * @return {?}
       */


      function noopMatchMedia(query) {
        // Use `as any` here to avoid adding additional necessary properties for
        // the noop matcher.
        return (
          /** @type {?} */
          {
            matches: query === 'all' || query === '',
            media: query,
            addListener:
            /**
            * @return {?}
            */
            function addListener() {},
            removeListener:
            /**
            * @return {?}
            */
            function removeListener() {}
          }
        );
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/layout/breakpoints-observer.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * The current state of a layout breakpoint.
       * @record
       */


      function BreakpointState() {}

      if (false) {}
      /**
       * The current state of a layout breakpoint.
       * @record
       */


      function InternalBreakpointState() {}

      if (false) {}
      /**
       * @record
       */


      function Query() {}

      if (false) {}
      /**
       * Utility for checking the matching state of \@media queries.
       */


      var _BreakpointObserver = /*#__PURE__*/function () {
        /**
         * @param {?} _mediaMatcher
         * @param {?} _zone
         */
        function _BreakpointObserver(_mediaMatcher, _zone) {
          _classCallCheck(this, _BreakpointObserver);

          this._mediaMatcher = _mediaMatcher;
          this._zone = _zone;
          /**
           * A map of all media queries currently being listened for.
           */

          this._queries = new Map();
          /**
           * A subject for all other observables to takeUntil based on.
           */

          this._destroySubject = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Subject();
        }
        /**
         * Completes the active subject, signalling to all other observables to complete.
         * @return {?}
         */


        _createClass(_BreakpointObserver, [{
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this._destroySubject.next();

            this._destroySubject.complete();
          }
          /**
           * Whether one or more media queries match the current viewport size.
           * @param {?} value One or more media queries to check.
           * @return {?} Whether any of the media queries match.
           */

        }, {
          key: "isMatched",
          value: function isMatched(value) {
            var _this25 = this;

            /** @type {?} */
            var queries = splitQueries((0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__.coerceArray)(value));
            return queries.some(
            /**
            * @param {?} mediaQuery
            * @return {?}
            */
            function (mediaQuery) {
              return _this25._registerQuery(mediaQuery).mql.matches;
            });
          }
          /**
           * Gets an observable of results for the given queries that will emit new results for any changes
           * in matching of the given queries.
           * @param {?} value One or more media queries to check.
           * @return {?} A stream of matches for the given queries.
           */

        }, {
          key: "observe",
          value: function observe(value) {
            var _this26 = this;

            /** @type {?} */
            var queries = splitQueries((0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__.coerceArray)(value));
            /** @type {?} */

            var observables = queries.map(
            /**
            * @param {?} query
            * @return {?}
            */
            function (query) {
              return _this26._registerQuery(query).observable;
            });
            /** @type {?} */

            var stateObservable = (0, rxjs__WEBPACK_IMPORTED_MODULE_4__.combineLatest)(observables); // Emit the first state immediately, and then debounce the subsequent emissions.

            stateObservable = (0, rxjs__WEBPACK_IMPORTED_MODULE_5__.concat)(stateObservable.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.take)(1)), stateObservable.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.skip)(1), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.debounceTime)(0)));
            return stateObservable.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.map)(
            /**
            * @param {?} breakpointStates
            * @return {?}
            */
            function (breakpointStates) {
              /** @type {?} */
              var response = {
                matches: false,
                breakpoints: {}
              };
              breakpointStates.forEach(
              /**
              * @param {?} state
              * @return {?}
              */
              function (state) {
                response.matches = response.matches || state.matches;
                response.breakpoints[state.query] = state.matches;
              });
              return response;
            }));
          }
          /**
           * Registers a specific query to be listened for.
           * @private
           * @param {?} query
           * @return {?}
           */

        }, {
          key: "_registerQuery",
          value: function _registerQuery(query) {
            var _this27 = this;

            // Only set up a new MediaQueryList if it is not already being listened for.
            if (this._queries.has(query)) {
              return (
                /** @type {?} */
                this._queries.get(query)
              );
            }
            /** @type {?} */


            var mql = this._mediaMatcher.matchMedia(query); // Create callback for match changes and add it is as a listener.

            /** @type {?} */


            var queryObservable = new rxjs__WEBPACK_IMPORTED_MODULE_10__.Observable(
            /**
            * @param {?} observer
            * @return {?}
            */
            function (observer) {
              // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed
              // back into the zone because matchMedia is only included in Zone.js by loading the
              // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not
              // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js
              // patches it.

              /** @type {?} */
              var handler =
              /**
              * @param {?} e
              * @return {?}
              */
              function handler(e) {
                return _this27._zone.run(
                /**
                * @return {?}
                */
                function () {
                  return observer.next(e);
                });
              };

              mql.addListener(handler);
              return (
                /**
                * @return {?}
                */
                function () {
                  mql.removeListener(handler);
                }
              );
            }).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_11__.startWith)(mql), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.map)(
            /**
            * @param {?} nextMql
            * @return {?}
            */
            function (nextMql) {
              return {
                query: query,
                matches: nextMql.matches
              };
            }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.takeUntil)(this._destroySubject)); // Add the MediaQueryList to the set of queries.

            /** @type {?} */

            var output = {
              observable: queryObservable,
              mql: mql
            };

            this._queries.set(query, output);

            return output;
          }
        }]);

        return _BreakpointObserver;
      }();

      _BreakpointObserver.ɵfac = function BreakpointObserver_Factory(t) {
        return new (t || _BreakpointObserver)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_MediaMatcher), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone));
      };
      /** @nocollapse */


      _BreakpointObserver.ctorParameters = function () {
        return [{
          type: _MediaMatcher
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
        }];
      };
      /** @nocollapse */


      _BreakpointObserver.ɵprov = (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
        factory: function BreakpointObserver_Factory() {
          return new _BreakpointObserver((0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_MediaMatcher), (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone));
        },
        token: _BreakpointObserver,
        providedIn: "root"
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_BreakpointObserver, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [{
            type: _MediaMatcher
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
          }];
        }, null);
      })();

      if (false) {}
      /**
       * Split each query string into separate query strings if two queries are provided as comma
       * separated.
       * @param {?} queries
       * @return {?}
       */


      function splitQueries(queries) {
        return queries.map(
        /**
        * @param {?} query
        * @return {?}
        */
        function (query) {
          return query.split(',');
        }).reduce(
        /**
        * @param {?} a1
        * @param {?} a2
        * @return {?}
        */
        function (a1, a2) {
          return a1.concat(a2);
        }).map(
        /**
        * @param {?} query
        * @return {?}
        */
        function (query) {
          return query.trim();
        });
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/layout/breakpoints.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      // PascalCase is being used as Breakpoints is used like an enum.
      // tslint:disable-next-line:variable-name

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       * @type {?}
       */


      var _Breakpoints = {
        XSmall: '(max-width: 599.99px)',
        Small: '(min-width: 600px) and (max-width: 959.99px)',
        Medium: '(min-width: 960px) and (max-width: 1279.99px)',
        Large: '(min-width: 1280px) and (max-width: 1919.99px)',
        XLarge: '(min-width: 1920px)',
        Handset: '(max-width: 599.99px) and (orientation: portrait), ' + '(max-width: 959.99px) and (orientation: landscape)',
        Tablet: '(min-width: 600px) and (max-width: 839.99px) and (orientation: portrait), ' + '(min-width: 960px) and (max-width: 1279.99px) and (orientation: landscape)',
        Web: '(min-width: 840px) and (orientation: portrait), ' + '(min-width: 1280px) and (orientation: landscape)',
        HandsetPortrait: '(max-width: 599.99px) and (orientation: portrait)',
        TabletPortrait: '(min-width: 600px) and (max-width: 839.99px) and (orientation: portrait)',
        WebPortrait: '(min-width: 840px) and (orientation: portrait)',
        HandsetLandscape: '(max-width: 959.99px) and (orientation: landscape)',
        TabletLandscape: '(min-width: 960px) and (max-width: 1279.99px) and (orientation: landscape)',
        WebLandscape: '(min-width: 1280px) and (orientation: landscape)'
      };
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/layout/public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Generated bundle index. Do not edit.
       */

      /***/
    },

    /***/
    90851:
    /*!**********************************************************************!*\
      !*** ./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/observers.js ***!
      \**********************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "CdkObserveContent": function CdkObserveContent() {
          return (
            /* binding */
            _CdkObserveContent
          );
        },

        /* harmony export */
        "ContentObserver": function ContentObserver() {
          return (
            /* binding */
            _ContentObserver
          );
        },

        /* harmony export */
        "MutationObserverFactory": function MutationObserverFactory() {
          return (
            /* binding */
            _MutationObserverFactory
          );
        },

        /* harmony export */
        "ObserversModule": function ObserversModule() {
          return (
            /* binding */
            _ObserversModule
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/cdk/coercion */
      20657);
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      2316);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! rxjs */
      25160);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! rxjs */
      79441);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! rxjs/operators */
      80639);
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/observers/observe-content.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.
       * \@docs-private
       */


      var _MutationObserverFactory = /*#__PURE__*/function () {
        function _MutationObserverFactory() {
          _classCallCheck(this, _MutationObserverFactory);
        }

        _createClass(_MutationObserverFactory, [{
          key: "create",
          value:
          /**
           * @param {?} callback
           * @return {?}
           */
          function create(callback) {
            return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);
          }
        }]);

        return _MutationObserverFactory;
      }();

      _MutationObserverFactory.ɵfac = function MutationObserverFactory_Factory(t) {
        return new (t || _MutationObserverFactory)();
      };
      /** @nocollapse */


      _MutationObserverFactory.ɵprov = (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
        factory: function MutationObserverFactory_Factory() {
          return new _MutationObserverFactory();
        },
        token: _MutationObserverFactory,
        providedIn: "root"
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_MutationObserverFactory, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
          args: [{
            providedIn: 'root'
          }]
        }], null, null);
      })();
      /**
       * An injectable service that allows watching elements for changes to their content.
       */


      var _ContentObserver = /*#__PURE__*/function () {
        /**
         * @param {?} _mutationObserverFactory
         */
        function _ContentObserver(_mutationObserverFactory) {
          _classCallCheck(this, _ContentObserver);

          this._mutationObserverFactory = _mutationObserverFactory;
          /**
           * Keeps track of the existing MutationObservers so they can be reused.
           */

          this._observedElements = new Map();
        }
        /**
         * @return {?}
         */


        _createClass(_ContentObserver, [{
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            var _this28 = this;

            this._observedElements.forEach(
            /**
            * @param {?} _
            * @param {?} element
            * @return {?}
            */
            function (_, element) {
              return _this28._cleanupObserver(element);
            });
          }
          /**
           * @param {?} elementOrRef
           * @return {?}
           */

        }, {
          key: "observe",
          value: function observe(elementOrRef) {
            var _this29 = this;

            /** @type {?} */
            var element = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceElement)(elementOrRef);
            return new rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable(
            /**
            * @param {?} observer
            * @return {?}
            */
            function (observer) {
              /** @type {?} */
              var stream = _this29._observeElement(element);
              /** @type {?} */


              var subscription = stream.subscribe(observer);
              return (
                /**
                * @return {?}
                */
                function () {
                  subscription.unsubscribe();

                  _this29._unobserveElement(element);
                }
              );
            });
          }
          /**
           * Observes the given element by using the existing MutationObserver if available, or creating a
           * new one if not.
           * @private
           * @param {?} element
           * @return {?}
           */

        }, {
          key: "_observeElement",
          value: function _observeElement(element) {
            if (!this._observedElements.has(element)) {
              /** @type {?} */
              var stream = new rxjs__WEBPACK_IMPORTED_MODULE_3__.Subject();
              /** @type {?} */

              var observer = this._mutationObserverFactory.create(
              /**
              * @param {?} mutations
              * @return {?}
              */
              function (mutations) {
                return stream.next(mutations);
              });

              if (observer) {
                observer.observe(element, {
                  characterData: true,
                  childList: true,
                  subtree: true
                });
              }

              this._observedElements.set(element, {
                observer: observer,
                stream: stream,
                count: 1
              });
            } else {
              /** @type {?} */this._observedElements.get(element).count++;
            }

            return (
              /** @type {?} */
              this._observedElements.get(element).stream
            );
          }
          /**
           * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is
           * observing this element.
           * @private
           * @param {?} element
           * @return {?}
           */

        }, {
          key: "_unobserveElement",
          value: function _unobserveElement(element) {
            if (this._observedElements.has(element)) {
              /** @type {?} */this._observedElements.get(element).count--;

              if (!
              /** @type {?} */
              this._observedElements.get(element).count) {
                this._cleanupObserver(element);
              }
            }
          }
          /**
           * Clean up the underlying MutationObserver for the specified element.
           * @private
           * @param {?} element
           * @return {?}
           */

        }, {
          key: "_cleanupObserver",
          value: function _cleanupObserver(element) {
            if (this._observedElements.has(element)) {
              var _this$_observedElemen =
              /** @type {?} */
              this._observedElements.get(element),
                  observer = _this$_observedElemen.observer,
                  stream = _this$_observedElemen.stream;

              if (observer) {
                observer.disconnect();
              }

              stream.complete();

              this._observedElements["delete"](element);
            }
          }
        }]);

        return _ContentObserver;
      }();

      _ContentObserver.ɵfac = function ContentObserver_Factory(t) {
        return new (t || _ContentObserver)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_MutationObserverFactory));
      };
      /** @nocollapse */


      _ContentObserver.ctorParameters = function () {
        return [{
          type: _MutationObserverFactory
        }];
      };
      /** @nocollapse */


      _ContentObserver.ɵprov = (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
        factory: function ContentObserver_Factory() {
          return new _ContentObserver((0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_MutationObserverFactory));
        },
        token: _ContentObserver,
        providedIn: "root"
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_ContentObserver, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [{
            type: _MutationObserverFactory
          }];
        }, null);
      })();

      if (false) {}
      /**
       * Directive that triggers a callback whenever the content of
       * its associated element has changed.
       */


      var _CdkObserveContent = /*#__PURE__*/function () {
        /**
         * @param {?} _contentObserver
         * @param {?} _elementRef
         * @param {?} _ngZone
         */
        function _CdkObserveContent(_contentObserver, _elementRef, _ngZone) {
          _classCallCheck(this, _CdkObserveContent);

          this._contentObserver = _contentObserver;
          this._elementRef = _elementRef;
          this._ngZone = _ngZone;
          /**
           * Event emitted for each change in the element's content.
           */

          this.event = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
          this._disabled = false;
          this._currentSubscription = null;
        }
        /**
         * Whether observing content is disabled. This option can be used
         * to disconnect the underlying MutationObserver until it is needed.
         * @return {?}
         */


        _createClass(_CdkObserveContent, [{
          key: "disabled",
          get: function get() {
            return this._disabled;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._disabled = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceBooleanProperty)(value);
            this._disabled ? this._unsubscribe() : this._subscribe();
          }
          /**
           * Debounce interval for emitting the changes.
           * @return {?}
           */

        }, {
          key: "debounce",
          get: function get() {
            return this._debounce;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._debounce = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceNumberProperty)(value);

            this._subscribe();
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngAfterContentInit",
          value: function ngAfterContentInit() {
            if (!this._currentSubscription && !this.disabled) {
              this._subscribe();
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this._unsubscribe();
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "_subscribe",
          value: function _subscribe() {
            var _this30 = this;

            this._unsubscribe();
            /** @type {?} */


            var stream = this._contentObserver.observe(this._elementRef); // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.
            // Consider brining it back inside the zone next time we're making breaking changes.
            // Bringing it back inside can cause things like infinite change detection loops and changed
            // after checked errors if people's code isn't handling it properly.


            this._ngZone.runOutsideAngular(
            /**
            * @return {?}
            */
            function () {
              _this30._currentSubscription = (_this30.debounce ? stream.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.debounceTime)(_this30.debounce)) : stream).subscribe(_this30.event);
            });
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "_unsubscribe",
          value: function _unsubscribe() {
            if (this._currentSubscription) {
              this._currentSubscription.unsubscribe();
            }
          }
        }]);

        return _CdkObserveContent;
      }();

      _CdkObserveContent.ɵfac = function CdkObserveContent_Factory(t) {
        return new (t || _CdkObserveContent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_ContentObserver), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone));
      };

      _CdkObserveContent.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: _CdkObserveContent,
        selectors: [["", "cdkObserveContent", ""]],
        inputs: {
          disabled: ["cdkObserveContentDisabled", "disabled"],
          debounce: "debounce"
        },
        outputs: {
          event: "cdkObserveContent"
        },
        exportAs: ["cdkObserveContent"]
      });
      /** @nocollapse */

      _CdkObserveContent.ctorParameters = function () {
        return [{
          type: _ContentObserver
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
        }];
      };

      _CdkObserveContent.propDecorators = {
        event: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output,
          args: ['cdkObserveContent']
        }],
        disabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
          args: ['cdkObserveContentDisabled']
        }],
        debounce: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_CdkObserveContent, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
          args: [{
            selector: '[cdkObserveContent]',
            exportAs: 'cdkObserveContent'
          }]
        }], function () {
          return [{
            type: _ContentObserver
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
          }];
        }, {
          event: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output,
            args: ['cdkObserveContent']
          }],
          disabled: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
            args: ['cdkObserveContentDisabled']
          }],
          debounce: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }]
        });
      })();

      if (false) {}

      var _ObserversModule = function _ObserversModule() {
        _classCallCheck(this, _ObserversModule);
      };

      _ObserversModule.ɵfac = function ObserversModule_Factory(t) {
        return new (t || _ObserversModule)();
      };

      _ObserversModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: _ObserversModule
      });
      _ObserversModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        providers: [_MutationObserverFactory]
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_ObserversModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
          args: [{
            exports: [_CdkObserveContent],
            declarations: [_CdkObserveContent],
            providers: [_MutationObserverFactory]
          }]
        }], null, null);
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](_ObserversModule, {
          declarations: [_CdkObserveContent],
          exports: [_CdkObserveContent]
        });
      })();
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/observers/public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Generated bundle index. Do not edit.
       */

      /***/

    },

    /***/
    45129:
    /*!********************************************************************!*\
      !*** ./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/overlay.js ***!
      \********************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "CdkScrollable": function CdkScrollable() {
          return (
            /* reexport safe */
            _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_0__.CdkScrollable
          );
        },

        /* harmony export */
        "ScrollDispatcher": function ScrollDispatcher() {
          return (
            /* reexport safe */
            _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_0__.ScrollDispatcher
          );
        },

        /* harmony export */
        "ViewportRuler": function ViewportRuler() {
          return (
            /* reexport safe */
            _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_0__.ViewportRuler
          );
        },

        /* harmony export */
        "BlockScrollStrategy": function BlockScrollStrategy() {
          return (
            /* binding */
            _BlockScrollStrategy
          );
        },

        /* harmony export */
        "CdkConnectedOverlay": function CdkConnectedOverlay() {
          return (
            /* binding */
            _CdkConnectedOverlay
          );
        },

        /* harmony export */
        "CdkOverlayOrigin": function CdkOverlayOrigin() {
          return (
            /* binding */
            _CdkOverlayOrigin
          );
        },

        /* harmony export */
        "CloseScrollStrategy": function CloseScrollStrategy() {
          return (
            /* binding */
            _CloseScrollStrategy
          );
        },

        /* harmony export */
        "ConnectedOverlayPositionChange": function ConnectedOverlayPositionChange() {
          return (
            /* binding */
            _ConnectedOverlayPositionChange
          );
        },

        /* harmony export */
        "ConnectedPositionStrategy": function ConnectedPositionStrategy() {
          return (
            /* binding */
            _ConnectedPositionStrategy
          );
        },

        /* harmony export */
        "ConnectionPositionPair": function ConnectionPositionPair() {
          return (
            /* binding */
            _ConnectionPositionPair
          );
        },

        /* harmony export */
        "FlexibleConnectedPositionStrategy": function FlexibleConnectedPositionStrategy() {
          return (
            /* binding */
            _FlexibleConnectedPositionStrategy
          );
        },

        /* harmony export */
        "FullscreenOverlayContainer": function FullscreenOverlayContainer() {
          return (
            /* binding */
            _FullscreenOverlayContainer
          );
        },

        /* harmony export */
        "GlobalPositionStrategy": function GlobalPositionStrategy() {
          return (
            /* binding */
            _GlobalPositionStrategy
          );
        },

        /* harmony export */
        "NoopScrollStrategy": function NoopScrollStrategy() {
          return (
            /* binding */
            _NoopScrollStrategy
          );
        },

        /* harmony export */
        "OVERLAY_PROVIDERS": function OVERLAY_PROVIDERS() {
          return (
            /* binding */
            _OVERLAY_PROVIDERS
          );
        },

        /* harmony export */
        "Overlay": function Overlay() {
          return (
            /* binding */
            _Overlay
          );
        },

        /* harmony export */
        "OverlayConfig": function OverlayConfig() {
          return (
            /* binding */
            _OverlayConfig
          );
        },

        /* harmony export */
        "OverlayContainer": function OverlayContainer() {
          return (
            /* binding */
            _OverlayContainer
          );
        },

        /* harmony export */
        "OverlayKeyboardDispatcher": function OverlayKeyboardDispatcher() {
          return (
            /* binding */
            _OverlayKeyboardDispatcher
          );
        },

        /* harmony export */
        "OverlayModule": function OverlayModule() {
          return (
            /* binding */
            _OverlayModule
          );
        },

        /* harmony export */
        "OverlayPositionBuilder": function OverlayPositionBuilder() {
          return (
            /* binding */
            _OverlayPositionBuilder
          );
        },

        /* harmony export */
        "OverlayRef": function OverlayRef() {
          return (
            /* binding */
            _OverlayRef
          );
        },

        /* harmony export */
        "RepositionScrollStrategy": function RepositionScrollStrategy() {
          return (
            /* binding */
            _RepositionScrollStrategy
          );
        },

        /* harmony export */
        "ScrollStrategyOptions": function ScrollStrategyOptions() {
          return (
            /* binding */
            _ScrollStrategyOptions
          );
        },

        /* harmony export */
        "ScrollingVisibility": function ScrollingVisibility() {
          return (
            /* binding */
            _ScrollingVisibility
          );
        },

        /* harmony export */
        "validateHorizontalPosition": function validateHorizontalPosition() {
          return (
            /* binding */
            _validateHorizontalPosition
          );
        },

        /* harmony export */
        "validateVerticalPosition": function validateVerticalPosition() {
          return (
            /* binding */
            _validateVerticalPosition
          );
        },

        /* harmony export */
        "ɵangular_material_src_cdk_overlay_overlay_a": function ɵangular_material_src_cdk_overlay_overlay_a() {
          return (
            /* binding */
            OVERLAY_CONTAINER_PROVIDER_FACTORY
          );
        },

        /* harmony export */
        "ɵangular_material_src_cdk_overlay_overlay_b": function ɵangular_material_src_cdk_overlay_overlay_b() {
          return (
            /* binding */
            OVERLAY_CONTAINER_PROVIDER
          );
        },

        /* harmony export */
        "ɵangular_material_src_cdk_overlay_overlay_c": function ɵangular_material_src_cdk_overlay_overlay_c() {
          return (
            /* binding */
            CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY
          );
        },

        /* harmony export */
        "ɵangular_material_src_cdk_overlay_overlay_d": function ɵangular_material_src_cdk_overlay_overlay_d() {
          return (
            /* binding */
            CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY
          );
        },

        /* harmony export */
        "ɵangular_material_src_cdk_overlay_overlay_e": function ɵangular_material_src_cdk_overlay_overlay_e() {
          return (
            /* binding */
            CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER
          );
        },

        /* harmony export */
        "ɵangular_material_src_cdk_overlay_overlay_f": function ɵangular_material_src_cdk_overlay_overlay_f() {
          return (
            /* binding */
            OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY
          );
        },

        /* harmony export */
        "ɵangular_material_src_cdk_overlay_overlay_g": function ɵangular_material_src_cdk_overlay_overlay_g() {
          return (
            /* binding */
            OVERLAY_KEYBOARD_DISPATCHER_PROVIDER
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/cdk/scrolling */
      42791);
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/core */
      2316);
      /* harmony import */


      var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/cdk/platform */
      36145);
      /* harmony import */


      var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
      /*! @angular/cdk/bidi */
      772);
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/common */
      54364);
      /* harmony import */


      var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/cdk/coercion */
      20657);
      /* harmony import */


      var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! @angular/cdk/portal */
      40912);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! rxjs */
      79441);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! rxjs */
      94283);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! rxjs */
      89919);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! rxjs/operators */
      53466);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! rxjs/operators */
      22663);
      /* harmony import */


      var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
      /*! @angular/cdk/keycodes */
      90084);
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/overlay/scroll/block-scroll-strategy.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Strategy that will prevent the user from scrolling while the overlay is visible.
       */


      var _BlockScrollStrategy = /*#__PURE__*/function () {
        /**
         * @param {?} _viewportRuler
         * @param {?} document
         */
        function _BlockScrollStrategy(_viewportRuler, document) {
          _classCallCheck(this, _BlockScrollStrategy);

          this._viewportRuler = _viewportRuler;
          this._previousHTMLStyles = {
            top: '',
            left: ''
          };
          this._isEnabled = false;
          this._document = document;
        }
        /**
         * Attaches this scroll strategy to an overlay.
         * @return {?}
         */


        _createClass(_BlockScrollStrategy, [{
          key: "attach",
          value: function attach() {}
          /**
           * Blocks page-level scroll while the attached overlay is open.
           * @return {?}
           */

        }, {
          key: "enable",
          value: function enable() {
            if (this._canBeEnabled()) {
              /** @type {?} */
              var root =
              /** @type {?} */
              this._document.documentElement;
              this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition(); // Cache the previous inline styles in case the user had set them.

              this._previousHTMLStyles.left = root.style.left || '';
              this._previousHTMLStyles.top = root.style.top || ''; // Note: we're using the `html` node, instead of the `body`, because the `body` may
              // have the user agent margin, whereas the `html` is guaranteed not to have one.

              root.style.left = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceCssPixelValue)(-this._previousScrollPosition.left);
              root.style.top = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceCssPixelValue)(-this._previousScrollPosition.top);
              root.classList.add('cdk-global-scrollblock');
              this._isEnabled = true;
            }
          }
          /**
           * Unblocks page-level scroll while the attached overlay is open.
           * @return {?}
           */

        }, {
          key: "disable",
          value: function disable() {
            if (this._isEnabled) {
              /** @type {?} */
              var html =
              /** @type {?} */
              this._document.documentElement;
              /** @type {?} */

              var body =
              /** @type {?} */
              this._document.body;
              /** @type {?} */

              var htmlStyle =
              /** @type {?} */
              html.style;
              /** @type {?} */

              var bodyStyle =
              /** @type {?} */
              body.style;
              /** @type {?} */

              var previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';
              /** @type {?} */

              var previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';
              this._isEnabled = false;
              htmlStyle.left = this._previousHTMLStyles.left;
              htmlStyle.top = this._previousHTMLStyles.top;
              html.classList.remove('cdk-global-scrollblock'); // Disable user-defined smooth scrolling temporarily while we restore the scroll position.
              // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior

              htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';
              window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);
              htmlStyle.scrollBehavior = previousHtmlScrollBehavior;
              bodyStyle.scrollBehavior = previousBodyScrollBehavior;
            }
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "_canBeEnabled",
          value: function _canBeEnabled() {
            // Since the scroll strategies can't be singletons, we have to use a global CSS class
            // (`cdk-global-scrollblock`) to make sure that we don't try to disable global
            // scrolling multiple times.

            /** @type {?} */
            var html =
            /** @type {?} */
            this._document.documentElement;

            if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {
              return false;
            }
            /** @type {?} */


            var body = this._document.body;
            /** @type {?} */

            var viewport = this._viewportRuler.getViewportSize();

            return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;
          }
        }]);

        return _BlockScrollStrategy;
      }();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/overlay/scroll/scroll-strategy.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Describes a strategy that will be used by an overlay to handle scroll events while it is open.
       * @record
       */


      function ScrollStrategy() {}

      if (false) {}
      /**
       * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.
       * @return {?}
       */


      function getMatScrollStrategyAlreadyAttachedError() {
        return Error("Scroll strategy has already been attached.");
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/overlay/scroll/close-scroll-strategy.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Config options for the CloseScrollStrategy.
       * @record
       */


      function CloseScrollStrategyConfig() {}

      if (false) {}
      /**
       * Strategy that will close the overlay as soon as the user starts scrolling.
       */


      var _CloseScrollStrategy = /*#__PURE__*/function () {
        /**
         * @param {?} _scrollDispatcher
         * @param {?} _ngZone
         * @param {?} _viewportRuler
         * @param {?=} _config
         */
        function _CloseScrollStrategy(_scrollDispatcher, _ngZone, _viewportRuler, _config) {
          var _this31 = this;

          _classCallCheck(this, _CloseScrollStrategy);

          this._scrollDispatcher = _scrollDispatcher;
          this._ngZone = _ngZone;
          this._viewportRuler = _viewportRuler;
          this._config = _config;
          this._scrollSubscription = null;
          /**
           * Detaches the overlay ref and disables the scroll strategy.
           */

          this._detach =
          /**
          * @return {?}
          */
          function () {
            _this31.disable();

            if (_this31._overlayRef.hasAttached()) {
              _this31._ngZone.run(
              /**
              * @return {?}
              */
              function () {
                return _this31._overlayRef.detach();
              });
            }
          };
        }
        /**
         * Attaches this scroll strategy to an overlay.
         * @param {?} overlayRef
         * @return {?}
         */


        _createClass(_CloseScrollStrategy, [{
          key: "attach",
          value: function attach(overlayRef) {
            if (this._overlayRef) {
              throw getMatScrollStrategyAlreadyAttachedError();
            }

            this._overlayRef = overlayRef;
          }
          /**
           * Enables the closing of the attached overlay on scroll.
           * @return {?}
           */

        }, {
          key: "enable",
          value: function enable() {
            var _this32 = this;

            if (this._scrollSubscription) {
              return;
            }
            /** @type {?} */


            var stream = this._scrollDispatcher.scrolled(0);

            if (this._config && this._config.threshold && this._config.threshold > 1) {
              this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;
              this._scrollSubscription = stream.subscribe(
              /**
              * @return {?}
              */
              function () {
                /** @type {?} */
                var scrollPosition = _this32._viewportRuler.getViewportScrollPosition().top;

                if (Math.abs(scrollPosition - _this32._initialScrollPosition) >
                /** @type {?} */

                /** @type {?} */
                _this32._config.threshold) {
                  _this32._detach();
                } else {
                  _this32._overlayRef.updatePosition();
                }
              });
            } else {
              this._scrollSubscription = stream.subscribe(this._detach);
            }
          }
          /**
           * Disables the closing the attached overlay on scroll.
           * @return {?}
           */

        }, {
          key: "disable",
          value: function disable() {
            if (this._scrollSubscription) {
              this._scrollSubscription.unsubscribe();

              this._scrollSubscription = null;
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "detach",
          value: function detach() {
            this.disable();
            this._overlayRef =
            /** @type {?} */
            null;
          }
        }]);

        return _CloseScrollStrategy;
      }();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/overlay/scroll/noop-scroll-strategy.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Scroll strategy that doesn't do anything.
       */


      var _NoopScrollStrategy = /*#__PURE__*/function () {
        function _NoopScrollStrategy() {
          _classCallCheck(this, _NoopScrollStrategy);
        }

        _createClass(_NoopScrollStrategy, [{
          key: "enable",
          value:
          /**
           * Does nothing, as this scroll strategy is a no-op.
           * @return {?}
           */
          function enable() {}
          /**
           * Does nothing, as this scroll strategy is a no-op.
           * @return {?}
           */

        }, {
          key: "disable",
          value: function disable() {}
          /**
           * Does nothing, as this scroll strategy is a no-op.
           * @return {?}
           */

        }, {
          key: "attach",
          value: function attach() {}
        }]);

        return _NoopScrollStrategy;
      }();
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/overlay/position/scroll-clip.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // TODO(jelbourn): move this to live with the rest of the scrolling code
      // TODO(jelbourn): someday replace this with IntersectionObservers

      /**
       * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.
       * \@docs-private
       * @param {?} element Dimensions of the element (from getBoundingClientRect)
       * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)
       * @return {?} Whether the element is scrolled out of view
       */


      function isElementScrolledOutsideView(element, scrollContainers) {
        return scrollContainers.some(
        /**
        * @param {?} containerBounds
        * @return {?}
        */
        function (containerBounds) {
          /** @type {?} */
          var outsideAbove = element.bottom < containerBounds.top;
          /** @type {?} */

          var outsideBelow = element.top > containerBounds.bottom;
          /** @type {?} */

          var outsideLeft = element.right < containerBounds.left;
          /** @type {?} */

          var outsideRight = element.left > containerBounds.right;
          return outsideAbove || outsideBelow || outsideLeft || outsideRight;
        });
      }
      /**
       * Gets whether an element is clipped by any of its scrolling containers.
       * \@docs-private
       * @param {?} element Dimensions of the element (from getBoundingClientRect)
       * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)
       * @return {?} Whether the element is clipped
       */


      function isElementClippedByScrolling(element, scrollContainers) {
        return scrollContainers.some(
        /**
        * @param {?} scrollContainerRect
        * @return {?}
        */
        function (scrollContainerRect) {
          /** @type {?} */
          var clippedAbove = element.top < scrollContainerRect.top;
          /** @type {?} */

          var clippedBelow = element.bottom > scrollContainerRect.bottom;
          /** @type {?} */

          var clippedLeft = element.left < scrollContainerRect.left;
          /** @type {?} */

          var clippedRight = element.right > scrollContainerRect.right;
          return clippedAbove || clippedBelow || clippedLeft || clippedRight;
        });
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/overlay/scroll/reposition-scroll-strategy.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Config options for the RepositionScrollStrategy.
       * @record
       */


      function RepositionScrollStrategyConfig() {}

      if (false) {}
      /**
       * Strategy that will update the element position as the user is scrolling.
       */


      var _RepositionScrollStrategy = /*#__PURE__*/function () {
        /**
         * @param {?} _scrollDispatcher
         * @param {?} _viewportRuler
         * @param {?} _ngZone
         * @param {?=} _config
         */
        function _RepositionScrollStrategy(_scrollDispatcher, _viewportRuler, _ngZone, _config) {
          _classCallCheck(this, _RepositionScrollStrategy);

          this._scrollDispatcher = _scrollDispatcher;
          this._viewportRuler = _viewportRuler;
          this._ngZone = _ngZone;
          this._config = _config;
          this._scrollSubscription = null;
        }
        /**
         * Attaches this scroll strategy to an overlay.
         * @param {?} overlayRef
         * @return {?}
         */


        _createClass(_RepositionScrollStrategy, [{
          key: "attach",
          value: function attach(overlayRef) {
            if (this._overlayRef) {
              throw getMatScrollStrategyAlreadyAttachedError();
            }

            this._overlayRef = overlayRef;
          }
          /**
           * Enables repositioning of the attached overlay on scroll.
           * @return {?}
           */

        }, {
          key: "enable",
          value: function enable() {
            var _this33 = this;

            if (!this._scrollSubscription) {
              /** @type {?} */
              var throttle = this._config ? this._config.scrollThrottle : 0;
              this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(
              /**
              * @return {?}
              */
              function () {
                _this33._overlayRef.updatePosition(); // TODO(crisbeto): make `close` on by default once all components can handle it.


                if (_this33._config && _this33._config.autoClose) {
                  /** @type {?} */
                  var overlayRect = _this33._overlayRef.overlayElement.getBoundingClientRect();

                  var _this33$_viewportRule = _this33._viewportRuler.getViewportSize(),
                      width = _this33$_viewportRule.width,
                      height = _this33$_viewportRule.height; // TODO(crisbeto): include all ancestor scroll containers here once
                  // we have a way of exposing the trigger element to the scroll strategy.

                  /** @type {?} */


                  var parentRects = [{
                    width: width,
                    height: height,
                    bottom: height,
                    right: width,
                    top: 0,
                    left: 0
                  }];

                  if (isElementScrolledOutsideView(overlayRect, parentRects)) {
                    _this33.disable();

                    _this33._ngZone.run(
                    /**
                    * @return {?}
                    */
                    function () {
                      return _this33._overlayRef.detach();
                    });
                  }
                }
              });
            }
          }
          /**
           * Disables repositioning of the attached overlay on scroll.
           * @return {?}
           */

        }, {
          key: "disable",
          value: function disable() {
            if (this._scrollSubscription) {
              this._scrollSubscription.unsubscribe();

              this._scrollSubscription = null;
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "detach",
          value: function detach() {
            this.disable();
            this._overlayRef =
            /** @type {?} */
            null;
          }
        }]);

        return _RepositionScrollStrategy;
      }();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/overlay/scroll/scroll-strategy-options.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Options for how an overlay will handle scrolling.
       *
       * Users can provide a custom value for `ScrollStrategyOptions` to replace the default
       * behaviors. This class primarily acts as a factory for ScrollStrategy instances.
       */


      var _ScrollStrategyOptions =
      /**
       * @param {?} _scrollDispatcher
       * @param {?} _viewportRuler
       * @param {?} _ngZone
       * @param {?} document
       */
      function _ScrollStrategyOptions(_scrollDispatcher, _viewportRuler, _ngZone, document) {
        var _this34 = this;

        _classCallCheck(this, _ScrollStrategyOptions);

        this._scrollDispatcher = _scrollDispatcher;
        this._viewportRuler = _viewportRuler;
        this._ngZone = _ngZone;
        /**
         * Do nothing on scroll.
         */

        this.noop =
        /**
        * @return {?}
        */
        function () {
          return new _NoopScrollStrategy();
        };
        /**
         * Close the overlay as soon as the user scrolls.
         * @param config Configuration to be used inside the scroll strategy.
         */


        this.close =
        /**
        * @param {?=} config
        * @return {?}
        */
        function (config) {
          return new _CloseScrollStrategy(_this34._scrollDispatcher, _this34._ngZone, _this34._viewportRuler, config);
        };
        /**
         * Block scrolling.
         */


        this.block =
        /**
        * @return {?}
        */
        function () {
          return new _BlockScrollStrategy(_this34._viewportRuler, _this34._document);
        };
        /**
         * Update the overlay's position on scroll.
         * @param config Configuration to be used inside the scroll strategy.
         * Allows debouncing the reposition calls.
         */


        this.reposition =
        /**
        * @param {?=} config
        * @return {?}
        */
        function (config) {
          return new _RepositionScrollStrategy(_this34._scrollDispatcher, _this34._viewportRuler, _this34._ngZone, config);
        };

        this._document = document;
      };

      _ScrollStrategyOptions.ɵfac = function ScrollStrategyOptions_Factory(t) {
        return new (t || _ScrollStrategyOptions)(_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"](_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_0__.ScrollDispatcher), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"](_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_0__.ViewportRuler), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_2__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_3__.DOCUMENT));
      };
      /** @nocollapse */


      _ScrollStrategyOptions.ctorParameters = function () {
        return [{
          type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_0__.ScrollDispatcher
        }, {
          type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_0__.ViewportRuler
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.NgZone
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Inject,
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_3__.DOCUMENT]
          }]
        }];
      };
      /** @nocollapse */


      _ScrollStrategyOptions.ɵprov = (0, _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineInjectable"])({
        factory: function ScrollStrategyOptions_Factory() {
          return new _ScrollStrategyOptions((0, _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"])(_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_0__.ScrollDispatcher), (0, _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"])(_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_0__.ViewportRuler), (0, _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_2__.NgZone), (0, _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_3__.DOCUMENT));
        },
        token: _ScrollStrategyOptions,
        providedIn: "root"
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵsetClassMetadata"](_ScrollStrategyOptions, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Injectable,
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [{
            type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_0__.ScrollDispatcher
          }, {
            type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_0__.ViewportRuler
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.NgZone
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Inject,
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_3__.DOCUMENT]
            }]
          }];
        }, null);
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/overlay/scroll/index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/overlay/overlay-config.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Initial configuration used when creating an overlay.
       */


      var _OverlayConfig =
      /**
       * @param {?=} config
       */
      function _OverlayConfig(config) {
        _classCallCheck(this, _OverlayConfig);

        /**
         * Strategy to be used when handling scroll events while the overlay is open.
         */
        this.scrollStrategy = new _NoopScrollStrategy();
        /**
         * Custom class to add to the overlay pane.
         */

        this.panelClass = '';
        /**
         * Whether the overlay has a backdrop.
         */

        this.hasBackdrop = false;
        /**
         * Custom class to add to the backdrop
         */

        this.backdropClass = 'cdk-overlay-dark-backdrop';
        /**
         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.
         * Note that this usually doesn't include clicking on links (unless the user is using
         * the `HashLocationStrategy`).
         */

        this.disposeOnNavigation = false;

        if (config) {
          // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,
          // loses the array generic type in the `for of`. But we *also* have to use `Array` because
          // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`

          /** @type {?} */
          var configKeys =
          /** @type {?} */
          Object.keys(config);

          for (var _i = 0, _configKeys = configKeys; _i < _configKeys.length; _i++) {
            var key = _configKeys[_i];

            if (config[key] !== undefined) {
              // TypeScript, as of version 3.5, sees the left-hand-side of this expression
              // as "I don't know *which* key this is, so the only valid value is the intersection
              // of all the posible values." In this case, that happens to be `undefined`. TypeScript
              // is not smart enough to see that the right-hand-side is actually an access of the same
              // exact type with the same exact key, meaning that the value type must be identical.
              // So we use `any` to work around this.
              this[key] =
              /** @type {?} */
              config[key];
            }
          }
        }
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/overlay/position/connected-position.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * A connection point on the origin element.
       * @record
       */


      function OriginConnectionPosition() {}

      if (false) {}
      /**
       * A connection point on the overlay element.
       * @record
       */


      function OverlayConnectionPosition() {}

      if (false) {}
      /**
       * The points of the origin element and the overlay element to connect.
       */


      var _ConnectionPositionPair =
      /**
       * @param {?} origin
       * @param {?} overlay
       * @param {?=} offsetX
       * @param {?=} offsetY
       * @param {?=} panelClass
       */
      function _ConnectionPositionPair(origin, overlay, offsetX, offsetY, panelClass) {
        _classCallCheck(this, _ConnectionPositionPair);

        this.offsetX = offsetX;
        this.offsetY = offsetY;
        this.panelClass = panelClass;
        this.originX = origin.originX;
        this.originY = origin.originY;
        this.overlayX = overlay.overlayX;
        this.overlayY = overlay.overlayY;
      };

      if (false) {}
      /**
       * Set of properties regarding the position of the origin and overlay relative to the viewport
       * with respect to the containing Scrollable elements.
       *
       * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the
       * bounds of any one of the strategy's Scrollable's bounding client rectangle.
       *
       * The overlay and origin are outside view if there is no overlap between their bounding client
       * rectangle and any one of the strategy's Scrollable's bounding client rectangle.
       *
       *       -----------                    -----------
       *       | outside |                    | clipped |
       *       |  view   |              --------------------------
       *       |         |              |     |         |        |
       *       ----------               |     -----------        |
       *  --------------------------    |                        |
       *  |                        |    |      Scrollable        |
       *  |                        |    |                        |
       *  |                        |     --------------------------
       *  |      Scrollable        |
       *  |                        |
       *  --------------------------
       *
       * \@docs-private
       */


      var _ScrollingVisibility = function _ScrollingVisibility() {
        _classCallCheck(this, _ScrollingVisibility);
      };

      if (false) {}
      /**
       * The change event emitted by the strategy when a fallback position is used.
       */


      var _ConnectedOverlayPositionChange =
      /**
       * @param {?} connectionPair
       * @param {?} scrollableViewProperties
       */
      function _ConnectedOverlayPositionChange(connectionPair, scrollableViewProperties) {
        _classCallCheck(this, _ConnectedOverlayPositionChange);

        this.connectionPair = connectionPair;
        this.scrollableViewProperties = scrollableViewProperties;
      };
      /** @nocollapse */


      _ConnectedOverlayPositionChange.ctorParameters = function () {
        return [{
          type: _ConnectionPositionPair
        }, {
          type: _ScrollingVisibility,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Optional
          }]
        }];
      };

      if (false) {}
      /**
       * Validates whether a vertical position property matches the expected values.
       * \@docs-private
       * @param {?} property Name of the property being validated.
       * @param {?} value Value of the property being validated.
       * @return {?}
       */


      function _validateVerticalPosition(property, value) {
        if (value !== 'top' && value !== 'bottom' && value !== 'center') {
          throw Error("ConnectedPosition: Invalid ".concat(property, " \"").concat(value, "\". ") + "Expected \"top\", \"bottom\" or \"center\".");
        }
      }
      /**
       * Validates whether a horizontal position property matches the expected values.
       * \@docs-private
       * @param {?} property Name of the property being validated.
       * @param {?} value Value of the property being validated.
       * @return {?}
       */


      function _validateHorizontalPosition(property, value) {
        if (value !== 'start' && value !== 'end' && value !== 'center') {
          throw Error("ConnectedPosition: Invalid ".concat(property, " \"").concat(value, "\". ") + "Expected \"start\", \"end\" or \"center\".");
        }
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/overlay/keyboard/overlay-keyboard-dispatcher.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Service for dispatching keyboard events that land on the body to appropriate overlay ref,
       * if any. It maintains a list of attached overlays to determine best suited overlay based
       * on event target and order of overlay opens.
       */


      var _OverlayKeyboardDispatcher = /*#__PURE__*/function () {
        /**
         * @param {?} document
         */
        function _OverlayKeyboardDispatcher(document) {
          var _this35 = this;

          _classCallCheck(this, _OverlayKeyboardDispatcher);

          /**
           * Currently attached overlays in the order they were attached.
           */
          this._attachedOverlays = [];
          /**
           * Keyboard event listener that will be attached to the body.
           */

          this._keydownListener =
          /**
          * @param {?} event
          * @return {?}
          */
          function (event) {
            /** @type {?} */
            var overlays = _this35._attachedOverlays;

            for (var i = overlays.length - 1; i > -1; i--) {
              // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.
              // We want to target the most recent overlay, rather than trying to match where the event came
              // from, because some components might open an overlay, but keep focus on a trigger element
              // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,
              // because we don't want overlays that don't handle keyboard events to block the ones below
              // them that do.
              if (overlays[i]._keydownEvents.observers.length > 0) {
                overlays[i]._keydownEvents.next(event);

                break;
              }
            }
          };

          this._document = document;
        }
        /**
         * @return {?}
         */


        _createClass(_OverlayKeyboardDispatcher, [{
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this._detach();
          }
          /**
           * Add a new overlay to the list of attached overlay refs.
           * @param {?} overlayRef
           * @return {?}
           */

        }, {
          key: "add",
          value: function add(overlayRef) {
            // Ensure that we don't get the same overlay multiple times.
            this.remove(overlayRef); // Lazily start dispatcher once first overlay is added

            if (!this._isAttached) {
              this._document.body.addEventListener('keydown', this._keydownListener);

              this._isAttached = true;
            }

            this._attachedOverlays.push(overlayRef);
          }
          /**
           * Remove an overlay from the list of attached overlay refs.
           * @param {?} overlayRef
           * @return {?}
           */

        }, {
          key: "remove",
          value: function remove(overlayRef) {
            /** @type {?} */
            var index = this._attachedOverlays.indexOf(overlayRef);

            if (index > -1) {
              this._attachedOverlays.splice(index, 1);
            } // Remove the global listener once there are no more overlays.


            if (this._attachedOverlays.length === 0) {
              this._detach();
            }
          }
          /**
           * Detaches the global keyboard event listener.
           * @private
           * @return {?}
           */

        }, {
          key: "_detach",
          value: function _detach() {
            if (this._isAttached) {
              this._document.body.removeEventListener('keydown', this._keydownListener);

              this._isAttached = false;
            }
          }
        }]);

        return _OverlayKeyboardDispatcher;
      }();

      _OverlayKeyboardDispatcher.ɵfac = function OverlayKeyboardDispatcher_Factory(t) {
        return new (t || _OverlayKeyboardDispatcher)(_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_3__.DOCUMENT));
      };
      /** @nocollapse */


      _OverlayKeyboardDispatcher.ctorParameters = function () {
        return [{
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Inject,
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_3__.DOCUMENT]
          }]
        }];
      };
      /** @nocollapse */


      _OverlayKeyboardDispatcher.ɵprov = (0, _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineInjectable"])({
        factory: function OverlayKeyboardDispatcher_Factory() {
          return new _OverlayKeyboardDispatcher((0, _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_3__.DOCUMENT));
        },
        token: _OverlayKeyboardDispatcher,
        providedIn: "root"
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵsetClassMetadata"](_OverlayKeyboardDispatcher, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Injectable,
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [{
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Inject,
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_3__.DOCUMENT]
            }]
          }];
        }, null);
      })();

      if (false) {}
      /**
       * \@docs-private \@deprecated \@breaking-change 8.0.0
       * @param {?} dispatcher
       * @param {?} _document
       * @return {?}
       */


      function OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(dispatcher, _document) {
        return dispatcher || new _OverlayKeyboardDispatcher(_document);
      }
      /**
       * \@docs-private \@deprecated \@breaking-change 8.0.0
       * @type {?}
       */


      var OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {
        // If there is already an OverlayKeyboardDispatcher available, use that.
        // Otherwise, provide a new one.
        provide: _OverlayKeyboardDispatcher,
        deps: [[new _angular_core__WEBPACK_IMPORTED_MODULE_2__.Optional(), new _angular_core__WEBPACK_IMPORTED_MODULE_2__.SkipSelf(), _OverlayKeyboardDispatcher],
        /** @type {?} */
        // Coerce to `InjectionToken` so that the `deps` match the "shape"
        // of the type expected by Angular
        _angular_common__WEBPACK_IMPORTED_MODULE_3__.DOCUMENT],
        useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY
      };
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/overlay/overlay-container.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Whether we're in a testing environment.
       * TODO(crisbeto): remove this once we have an overlay testing module.
       * @type {?}
       */

      var isTestEnvironment = typeof window !== 'undefined' && !!window && !!(
      /** @type {?} */
      window.__karma__ ||
      /** @type {?} */
      window.jasmine);
      /**
       * Container inside which all overlays will render.
       */

      var _OverlayContainer = /*#__PURE__*/function () {
        /**
         * @param {?} document
         * @param {?=} _platform
         */
        function _OverlayContainer(document, _platform) {
          _classCallCheck(this, _OverlayContainer);

          this._platform = _platform;
          this._document = document;
        }
        /**
         * @return {?}
         */


        _createClass(_OverlayContainer, [{
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            /** @type {?} */
            var container = this._containerElement;

            if (container && container.parentNode) {
              container.parentNode.removeChild(container);
            }
          }
          /**
           * This method returns the overlay container element. It will lazily
           * create the element the first time  it is called to facilitate using
           * the container in non-browser environments.
           * @return {?} the container element
           */

        }, {
          key: "getContainerElement",
          value: function getContainerElement() {
            if (!this._containerElement) {
              this._createContainer();
            }

            return this._containerElement;
          }
          /**
           * Create the overlay container element, which is simply a div
           * with the 'cdk-overlay-container' class on the document body.
           * @protected
           * @return {?}
           */

        }, {
          key: "_createContainer",
          value: function _createContainer() {
            // @breaking-change 10.0.0 Remove null check for `_platform`.

            /** @type {?} */
            var isBrowser = this._platform ? this._platform.isBrowser : typeof window !== 'undefined';
            /** @type {?} */

            var containerClass = 'cdk-overlay-container';

            if (isBrowser || isTestEnvironment) {
              /** @type {?} */
              var oppositePlatformContainers = this._document.querySelectorAll(".".concat(containerClass, "[platform=\"server\"], ") + ".".concat(containerClass, "[platform=\"test\"]")); // Remove any old containers from the opposite platform.
              // This can happen when transitioning from the server to the client.


              for (var i = 0; i < oppositePlatformContainers.length; i++) {
                /** @type {?} */
                oppositePlatformContainers[i].parentNode.removeChild(oppositePlatformContainers[i]);
              }
            }
            /** @type {?} */


            var container = this._document.createElement('div');

            container.classList.add(containerClass); // A long time ago we kept adding new overlay containers whenever a new app was instantiated,
            // but at some point we added logic which clears the duplicate ones in order to avoid leaks.
            // The new logic was a little too aggressive since it was breaking some legitimate use cases.
            // To mitigate the problem we made it so that only containers from a different platform are
            // cleared, but the side-effect was that people started depending on the overly-aggressive
            // logic to clean up their tests for them. Until we can introduce an overlay-specific testing
            // module which does the cleanup, we try to detect that we're in a test environment and we
            // always clear the container. See #17006.
            // TODO(crisbeto): remove the test environment check once we have an overlay testing module.

            if (isTestEnvironment) {
              container.setAttribute('platform', 'test');
            } else if (!isBrowser) {
              container.setAttribute('platform', 'server');
            }

            this._document.body.appendChild(container);

            this._containerElement = container;
          }
        }]);

        return _OverlayContainer;
      }();

      _OverlayContainer.ɵfac = function OverlayContainer_Factory(t) {
        return new (t || _OverlayContainer)(_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_3__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__.Platform));
      };
      /** @nocollapse */


      _OverlayContainer.ctorParameters = function () {
        return [{
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Inject,
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_3__.DOCUMENT]
          }]
        }, {
          type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__.Platform
        }];
      };
      /** @nocollapse */


      _OverlayContainer.ɵprov = (0, _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineInjectable"])({
        factory: function OverlayContainer_Factory() {
          return new _OverlayContainer((0, _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_3__.DOCUMENT), (0, _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"])(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__.Platform));
        },
        token: _OverlayContainer,
        providedIn: "root"
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵsetClassMetadata"](_OverlayContainer, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Injectable,
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [{
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Inject,
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_3__.DOCUMENT]
            }]
          }, {
            type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__.Platform
          }];
        }, null);
      })();

      if (false) {}
      /**
       * \@docs-private \@deprecated \@breaking-change 8.0.0
       * @param {?} parentContainer
       * @param {?} _document
       * @return {?}
       */


      function OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer, _document) {
        return parentContainer || new _OverlayContainer(_document);
      }
      /**
       * \@docs-private \@deprecated \@breaking-change 8.0.0
       * @type {?}
       */


      var OVERLAY_CONTAINER_PROVIDER = {
        // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.
        provide: _OverlayContainer,
        deps: [[new _angular_core__WEBPACK_IMPORTED_MODULE_2__.Optional(), new _angular_core__WEBPACK_IMPORTED_MODULE_2__.SkipSelf(), _OverlayContainer],
        /** @type {?} */
        _angular_common__WEBPACK_IMPORTED_MODULE_3__.DOCUMENT],
        useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY
      };
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/overlay/overlay-ref.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Reference to an overlay that has been created with the Overlay service.
       * Used to manipulate or dispose of said overlay.
       */

      var _OverlayRef = /*#__PURE__*/function () {
        /**
         * @param {?} _portalOutlet
         * @param {?} _host
         * @param {?} _pane
         * @param {?} _config
         * @param {?} _ngZone
         * @param {?} _keyboardDispatcher
         * @param {?} _document
         * @param {?=} _location
         */
        function _OverlayRef(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location) {
          var _this36 = this;

          _classCallCheck(this, _OverlayRef);

          this._portalOutlet = _portalOutlet;
          this._host = _host;
          this._pane = _pane;
          this._config = _config;
          this._ngZone = _ngZone;
          this._keyboardDispatcher = _keyboardDispatcher;
          this._document = _document;
          this._location = _location;
          this._backdropElement = null;
          this._backdropClick = new rxjs__WEBPACK_IMPORTED_MODULE_5__.Subject();
          this._attachments = new rxjs__WEBPACK_IMPORTED_MODULE_5__.Subject();
          this._detachments = new rxjs__WEBPACK_IMPORTED_MODULE_5__.Subject();
          this._locationChanges = rxjs__WEBPACK_IMPORTED_MODULE_6__.Subscription.EMPTY;

          this._backdropClickHandler =
          /**
          * @param {?} event
          * @return {?}
          */
          function (event) {
            return _this36._backdropClick.next(event);
          };
          /**
           * Stream of keydown events dispatched to this overlay.
           */


          this._keydownEvents = new rxjs__WEBPACK_IMPORTED_MODULE_5__.Subject();

          if (_config.scrollStrategy) {
            this._scrollStrategy = _config.scrollStrategy;

            this._scrollStrategy.attach(this);
          }

          this._positionStrategy = _config.positionStrategy;
        }
        /**
         * The overlay's HTML element
         * @return {?}
         */


        _createClass(_OverlayRef, [{
          key: "overlayElement",
          get: function get() {
            return this._pane;
          }
          /**
           * The overlay's backdrop HTML element.
           * @return {?}
           */

        }, {
          key: "backdropElement",
          get: function get() {
            return this._backdropElement;
          }
          /**
           * Wrapper around the panel element. Can be used for advanced
           * positioning where a wrapper with specific styling is
           * required around the overlay pane.
           * @return {?}
           */

        }, {
          key: "hostElement",
          get: function get() {
            return this._host;
          }
          /**
           * Attaches content, given via a Portal, to the overlay.
           * If the overlay is configured to have a backdrop, it will be created.
           *
           * @param {?} portal Portal instance to which to attach the overlay.
           * @return {?} The portal attachment result.
           */

        }, {
          key: "attach",
          value: function attach(portal) {
            var _this37 = this;

            /** @type {?} */
            var attachResult = this._portalOutlet.attach(portal); // Update the pane element with the given configuration.


            if (!this._host.parentElement && this._previousHostParent) {
              this._previousHostParent.appendChild(this._host);
            }

            if (this._positionStrategy) {
              this._positionStrategy.attach(this);
            }

            this._updateStackingOrder();

            this._updateElementSize();

            this._updateElementDirection();

            if (this._scrollStrategy) {
              this._scrollStrategy.enable();
            } // Update the position once the zone is stable so that the overlay will be fully rendered
            // before attempting to position it, as the position may depend on the size of the rendered
            // content.


            this._ngZone.onStable.asObservable().pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.take)(1)).subscribe(
            /**
            * @return {?}
            */
            function () {
              // The overlay could've been detached before the zone has stabilized.
              if (_this37.hasAttached()) {
                _this37.updatePosition();
              }
            }); // Enable pointer events for the overlay pane element.


            this._togglePointerEvents(true);

            if (this._config.hasBackdrop) {
              this._attachBackdrop();
            }

            if (this._config.panelClass) {
              this._toggleClasses(this._pane, this._config.panelClass, true);
            } // Only emit the `attachments` event once all other setup is done.


            this._attachments.next(); // Track this overlay by the keyboard dispatcher


            this._keyboardDispatcher.add(this); // @breaking-change 8.0.0 remove the null check for `_location`
            // once the constructor parameter is made required.


            if (this._config.disposeOnNavigation && this._location) {
              this._locationChanges = this._location.subscribe(
              /**
              * @return {?}
              */
              function () {
                return _this37.dispose();
              });
            }

            return attachResult;
          }
          /**
           * Detaches an overlay from a portal.
           * @return {?} The portal detachment result.
           */

        }, {
          key: "detach",
          value: function detach() {
            if (!this.hasAttached()) {
              return;
            }

            this.detachBackdrop(); // When the overlay is detached, the pane element should disable pointer events.
            // This is necessary because otherwise the pane element will cover the page and disable
            // pointer events therefore. Depends on the position strategy and the applied pane boundaries.

            this._togglePointerEvents(false);

            if (this._positionStrategy && this._positionStrategy.detach) {
              this._positionStrategy.detach();
            }

            if (this._scrollStrategy) {
              this._scrollStrategy.disable();
            }
            /** @type {?} */


            var detachmentResult = this._portalOutlet.detach(); // Only emit after everything is detached.


            this._detachments.next(); // Remove this overlay from keyboard dispatcher tracking.


            this._keyboardDispatcher.remove(this); // Keeping the host element in the DOM can cause scroll jank, because it still gets
            // rendered, even though it's transparent and unclickable which is why we remove it.


            this._detachContentWhenStable(); // Stop listening for location changes.


            this._locationChanges.unsubscribe();

            return detachmentResult;
          }
          /**
           * Cleans up the overlay from the DOM.
           * @return {?}
           */

        }, {
          key: "dispose",
          value: function dispose() {
            /** @type {?} */
            var isAttached = this.hasAttached();

            if (this._positionStrategy) {
              this._positionStrategy.dispose();
            }

            this._disposeScrollStrategy();

            this.detachBackdrop();

            this._locationChanges.unsubscribe();

            this._keyboardDispatcher.remove(this);

            this._portalOutlet.dispose();

            this._attachments.complete();

            this._backdropClick.complete();

            this._keydownEvents.complete();

            if (this._host && this._host.parentNode) {
              this._host.parentNode.removeChild(this._host);

              this._host =
              /** @type {?} */
              null;
            }

            this._previousHostParent = this._pane =
            /** @type {?} */
            null;

            if (isAttached) {
              this._detachments.next();
            }

            this._detachments.complete();
          }
          /**
           * Whether the overlay has attached content.
           * @return {?}
           */

        }, {
          key: "hasAttached",
          value: function hasAttached() {
            return this._portalOutlet.hasAttached();
          }
          /**
           * Gets an observable that emits when the backdrop has been clicked.
           * @return {?}
           */

        }, {
          key: "backdropClick",
          value: function backdropClick() {
            return this._backdropClick.asObservable();
          }
          /**
           * Gets an observable that emits when the overlay has been attached.
           * @return {?}
           */

        }, {
          key: "attachments",
          value: function attachments() {
            return this._attachments.asObservable();
          }
          /**
           * Gets an observable that emits when the overlay has been detached.
           * @return {?}
           */

        }, {
          key: "detachments",
          value: function detachments() {
            return this._detachments.asObservable();
          }
          /**
           * Gets an observable of keydown events targeted to this overlay.
           * @return {?}
           */

        }, {
          key: "keydownEvents",
          value: function keydownEvents() {
            return this._keydownEvents.asObservable();
          }
          /**
           * Gets the current overlay configuration, which is immutable.
           * @return {?}
           */

        }, {
          key: "getConfig",
          value: function getConfig() {
            return this._config;
          }
          /**
           * Updates the position of the overlay based on the position strategy.
           * @return {?}
           */

        }, {
          key: "updatePosition",
          value: function updatePosition() {
            if (this._positionStrategy) {
              this._positionStrategy.apply();
            }
          }
          /**
           * Switches to a new position strategy and updates the overlay position.
           * @param {?} strategy
           * @return {?}
           */

        }, {
          key: "updatePositionStrategy",
          value: function updatePositionStrategy(strategy) {
            if (strategy === this._positionStrategy) {
              return;
            }

            if (this._positionStrategy) {
              this._positionStrategy.dispose();
            }

            this._positionStrategy = strategy;

            if (this.hasAttached()) {
              strategy.attach(this);
              this.updatePosition();
            }
          }
          /**
           * Update the size properties of the overlay.
           * @param {?} sizeConfig
           * @return {?}
           */

        }, {
          key: "updateSize",
          value: function updateSize(sizeConfig) {
            this._config = Object.assign(Object.assign({}, this._config), sizeConfig);

            this._updateElementSize();
          }
          /**
           * Sets the LTR/RTL direction for the overlay.
           * @param {?} dir
           * @return {?}
           */

        }, {
          key: "setDirection",
          value: function setDirection(dir) {
            this._config = Object.assign(Object.assign({}, this._config), {
              direction: dir
            });

            this._updateElementDirection();
          }
          /**
           * Add a CSS class or an array of classes to the overlay pane.
           * @param {?} classes
           * @return {?}
           */

        }, {
          key: "addPanelClass",
          value: function addPanelClass(classes) {
            if (this._pane) {
              this._toggleClasses(this._pane, classes, true);
            }
          }
          /**
           * Remove a CSS class or an array of classes from the overlay pane.
           * @param {?} classes
           * @return {?}
           */

        }, {
          key: "removePanelClass",
          value: function removePanelClass(classes) {
            if (this._pane) {
              this._toggleClasses(this._pane, classes, false);
            }
          }
          /**
           * Returns the layout direction of the overlay panel.
           * @return {?}
           */

        }, {
          key: "getDirection",
          value: function getDirection() {
            /** @type {?} */
            var direction = this._config.direction;

            if (!direction) {
              return 'ltr';
            }

            return typeof direction === 'string' ? direction : direction.value;
          }
          /**
           * Switches to a new scroll strategy.
           * @param {?} strategy
           * @return {?}
           */

        }, {
          key: "updateScrollStrategy",
          value: function updateScrollStrategy(strategy) {
            if (strategy === this._scrollStrategy) {
              return;
            }

            this._disposeScrollStrategy();

            this._scrollStrategy = strategy;

            if (this.hasAttached()) {
              strategy.attach(this);
              strategy.enable();
            }
          }
          /**
           * Updates the text direction of the overlay panel.
           * @private
           * @return {?}
           */

        }, {
          key: "_updateElementDirection",
          value: function _updateElementDirection() {
            this._host.setAttribute('dir', this.getDirection());
          }
          /**
           * Updates the size of the overlay element based on the overlay config.
           * @private
           * @return {?}
           */

        }, {
          key: "_updateElementSize",
          value: function _updateElementSize() {
            if (!this._pane) {
              return;
            }
            /** @type {?} */


            var style = this._pane.style;
            style.width = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceCssPixelValue)(this._config.width);
            style.height = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceCssPixelValue)(this._config.height);
            style.minWidth = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceCssPixelValue)(this._config.minWidth);
            style.minHeight = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceCssPixelValue)(this._config.minHeight);
            style.maxWidth = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceCssPixelValue)(this._config.maxWidth);
            style.maxHeight = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceCssPixelValue)(this._config.maxHeight);
          }
          /**
           * Toggles the pointer events for the overlay pane element.
           * @private
           * @param {?} enablePointer
           * @return {?}
           */

        }, {
          key: "_togglePointerEvents",
          value: function _togglePointerEvents(enablePointer) {
            this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';
          }
          /**
           * Attaches a backdrop for this overlay.
           * @private
           * @return {?}
           */

        }, {
          key: "_attachBackdrop",
          value: function _attachBackdrop() {
            var _this38 = this;

            /** @type {?} */
            var showingClass = 'cdk-overlay-backdrop-showing';
            this._backdropElement = this._document.createElement('div');

            this._backdropElement.classList.add('cdk-overlay-backdrop');

            if (this._config.backdropClass) {
              this._toggleClasses(this._backdropElement, this._config.backdropClass, true);
            } // Insert the backdrop before the pane in the DOM order,
            // in order to handle stacked overlays properly.


            /** @type {?} */
            this._host.parentElement.insertBefore(this._backdropElement, this._host); // Forward backdrop clicks such that the consumer of the overlay can perform whatever
            // action desired when such a click occurs (usually closing the overlay).


            this._backdropElement.addEventListener('click', this._backdropClickHandler); // Add class to fade-in the backdrop after one frame.


            if (typeof requestAnimationFrame !== 'undefined') {
              this._ngZone.runOutsideAngular(
              /**
              * @return {?}
              */
              function () {
                requestAnimationFrame(
                /**
                * @return {?}
                */
                function () {
                  if (_this38._backdropElement) {
                    _this38._backdropElement.classList.add(showingClass);
                  }
                });
              });
            } else {
              this._backdropElement.classList.add(showingClass);
            }
          }
          /**
           * Updates the stacking order of the element, moving it to the top if necessary.
           * This is required in cases where one overlay was detached, while another one,
           * that should be behind it, was destroyed. The next time both of them are opened,
           * the stacking will be wrong, because the detached element's pane will still be
           * in its original DOM position.
           * @private
           * @return {?}
           */

        }, {
          key: "_updateStackingOrder",
          value: function _updateStackingOrder() {
            if (this._host.nextSibling) {
              /** @type {?} */
              this._host.parentNode.appendChild(this._host);
            }
          }
          /**
           * Detaches the backdrop (if any) associated with the overlay.
           * @return {?}
           */

        }, {
          key: "detachBackdrop",
          value: function detachBackdrop() {
            var _this39 = this;

            /** @type {?} */
            var backdropToDetach = this._backdropElement;

            if (!backdropToDetach) {
              return;
            }
            /** @type {?} */


            var timeoutId;
            /** @type {?} */

            var finishDetach =
            /**
            * @return {?}
            */
            function finishDetach() {
              // It may not be attached to anything in certain cases (e.g. unit tests).
              if (backdropToDetach) {
                backdropToDetach.removeEventListener('click', _this39._backdropClickHandler);
                backdropToDetach.removeEventListener('transitionend', finishDetach);

                if (backdropToDetach.parentNode) {
                  backdropToDetach.parentNode.removeChild(backdropToDetach);
                }
              } // It is possible that a new portal has been attached to this overlay since we started
              // removing the backdrop. If that is the case, only clear the backdrop reference if it
              // is still the same instance that we started to remove.


              if (_this39._backdropElement == backdropToDetach) {
                _this39._backdropElement = null;
              }

              if (_this39._config.backdropClass) {
                _this39._toggleClasses(
                /** @type {?} */
                backdropToDetach, _this39._config.backdropClass, false);
              }

              clearTimeout(timeoutId);
            };

            backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');

            this._ngZone.runOutsideAngular(
            /**
            * @return {?}
            */
            function () {
              /** @type {?} */
              backdropToDetach.addEventListener('transitionend', finishDetach);
            }); // If the backdrop doesn't have a transition, the `transitionend` event won't fire.
            // In this case we make it unclickable and we try to remove it after a delay.


            backdropToDetach.style.pointerEvents = 'none'; // Run this outside the Angular zone because there's nothing that Angular cares about.
            // If it were to run inside the Angular zone, every test that used Overlay would have to be
            // either async or fakeAsync.

            timeoutId = this._ngZone.runOutsideAngular(
            /**
            * @return {?}
            */
            function () {
              return setTimeout(finishDetach, 500);
            });
          }
          /**
           * Toggles a single CSS class or an array of classes on an element.
           * @private
           * @param {?} element
           * @param {?} cssClasses
           * @param {?} isAdd
           * @return {?}
           */

        }, {
          key: "_toggleClasses",
          value: function _toggleClasses(element, cssClasses, isAdd) {
            /** @type {?} */
            var classList = element.classList;
            (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceArray)(cssClasses).forEach(
            /**
            * @param {?} cssClass
            * @return {?}
            */
            function (cssClass) {
              // We can't do a spread here, because IE doesn't support setting multiple classes.
              // Also trying to add an empty string to a DOMTokenList will throw.
              if (cssClass) {
                isAdd ? classList.add(cssClass) : classList.remove(cssClass);
              }
            });
          }
          /**
           * Detaches the overlay content next time the zone stabilizes.
           * @private
           * @return {?}
           */

        }, {
          key: "_detachContentWhenStable",
          value: function _detachContentWhenStable() {
            var _this40 = this;

            // Normally we wouldn't have to explicitly run this outside the `NgZone`, however
            // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will
            // be patched to run inside the zone, which will throw us into an infinite loop.
            this._ngZone.runOutsideAngular(
            /**
            * @return {?}
            */
            function () {
              // We can't remove the host here immediately, because the overlay pane's content
              // might still be animating. This stream helps us avoid interrupting the animation
              // by waiting for the pane to become empty.

              /** @type {?} */
              var subscription = _this40._ngZone.onStable.asObservable().pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.takeUntil)((0, rxjs__WEBPACK_IMPORTED_MODULE_9__.merge)(_this40._attachments, _this40._detachments))).subscribe(
              /**
              * @return {?}
              */
              function () {
                // Needs a couple of checks for the pane and host, because
                // they may have been removed by the time the zone stabilizes.
                if (!_this40._pane || !_this40._host || _this40._pane.children.length === 0) {
                  if (_this40._pane && _this40._config.panelClass) {
                    _this40._toggleClasses(_this40._pane, _this40._config.panelClass, false);
                  }

                  if (_this40._host && _this40._host.parentElement) {
                    _this40._previousHostParent = _this40._host.parentElement;

                    _this40._previousHostParent.removeChild(_this40._host);
                  }

                  subscription.unsubscribe();
                }
              });
            });
          }
          /**
           * Disposes of a scroll strategy.
           * @private
           * @return {?}
           */

        }, {
          key: "_disposeScrollStrategy",
          value: function _disposeScrollStrategy() {
            /** @type {?} */
            var scrollStrategy = this._scrollStrategy;

            if (scrollStrategy) {
              scrollStrategy.disable();

              if (scrollStrategy.detach) {
                scrollStrategy.detach();
              }
            }
          }
        }]);

        return _OverlayRef;
      }();

      if (false) {}
      /**
       * Size properties for an overlay.
       * @record
       */


      function OverlaySizeConfig() {}

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/overlay/position/flexible-connected-position-strategy.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      // TODO: refactor clipping detection into a separate thing (part of scrolling module)
      // TODO: doesn't handle both flexible width and height when it has to scroll along both axis.

      /**
       * Class to be added to the overlay bounding box.
       * @type {?}
       */


      var boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';
      /**
       * Regex used to split a string on its CSS units.
       * @type {?}
       */

      var cssUnitPattern = /([A-Za-z%]+)$/;
      /**
       * A strategy for positioning overlays. Using this strategy, an overlay is given an
       * implicit position relative some origin element. The relative position is defined in terms of
       * a point on the origin element that is connected to a point on the overlay element. For example,
       * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner
       * of the overlay.
       */

      var _FlexibleConnectedPositionStrategy = /*#__PURE__*/function () {
        /**
         * @param {?} connectedTo
         * @param {?} _viewportRuler
         * @param {?} _document
         * @param {?} _platform
         * @param {?} _overlayContainer
         */
        function _FlexibleConnectedPositionStrategy(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {
          _classCallCheck(this, _FlexibleConnectedPositionStrategy);

          this._viewportRuler = _viewportRuler;
          this._document = _document;
          this._platform = _platform;
          this._overlayContainer = _overlayContainer;
          /**
           * Last size used for the bounding box. Used to avoid resizing the overlay after open.
           */

          this._lastBoundingBoxSize = {
            width: 0,
            height: 0
          };
          /**
           * Whether the overlay was pushed in a previous positioning.
           */

          this._isPushed = false;
          /**
           * Whether the overlay can be pushed on-screen on the initial open.
           */

          this._canPush = true;
          /**
           * Whether the overlay can grow via flexible width/height after the initial open.
           */

          this._growAfterOpen = false;
          /**
           * Whether the overlay's width and height can be constrained to fit within the viewport.
           */

          this._hasFlexibleDimensions = true;
          /**
           * Whether the overlay position is locked.
           */

          this._positionLocked = false;
          /**
           * Amount of space that must be maintained between the overlay and the edge of the viewport.
           */

          this._viewportMargin = 0;
          /**
           * The Scrollable containers used to check scrollable view properties on position change.
           */

          this._scrollables = [];
          /**
           * Ordered list of preferred positions, from most to least desirable.
           */

          this._preferredPositions = [];
          /**
           * Subject that emits whenever the position changes.
           */

          this._positionChanges = new rxjs__WEBPACK_IMPORTED_MODULE_5__.Subject();
          /**
           * Subscription to viewport size changes.
           */

          this._resizeSubscription = rxjs__WEBPACK_IMPORTED_MODULE_6__.Subscription.EMPTY;
          /**
           * Default offset for the overlay along the x axis.
           */

          this._offsetX = 0;
          /**
           * Default offset for the overlay along the y axis.
           */

          this._offsetY = 0;
          /**
           * Keeps track of the CSS classes that the position strategy has applied on the overlay panel.
           */

          this._appliedPanelClasses = [];
          /**
           * Observable sequence of position changes.
           */

          this.positionChanges = this._positionChanges.asObservable();
          this.setOrigin(connectedTo);
        }
        /**
         * Ordered list of preferred positions, from most to least desirable.
         * @return {?}
         */


        _createClass(_FlexibleConnectedPositionStrategy, [{
          key: "positions",
          get: function get() {
            return this._preferredPositions;
          }
          /**
           * Attaches this position strategy to an overlay.
           * @param {?} overlayRef
           * @return {?}
           */

        }, {
          key: "attach",
          value: function attach(overlayRef) {
            var _this41 = this;

            if (this._overlayRef && overlayRef !== this._overlayRef) {
              throw Error('This position strategy is already attached to an overlay');
            }

            this._validatePositions();

            overlayRef.hostElement.classList.add(boundingBoxClass);
            this._overlayRef = overlayRef;
            this._boundingBox = overlayRef.hostElement;
            this._pane = overlayRef.overlayElement;
            this._isDisposed = false;
            this._isInitialRender = true;
            this._lastPosition = null;

            this._resizeSubscription.unsubscribe();

            this._resizeSubscription = this._viewportRuler.change().subscribe(
            /**
            * @return {?}
            */
            function () {
              // When the window is resized, we want to trigger the next reposition as if it
              // was an initial render, in order for the strategy to pick a new optimal position,
              // otherwise position locking will cause it to stay at the old one.
              _this41._isInitialRender = true;

              _this41.apply();
            });
          }
          /**
           * Updates the position of the overlay element, using whichever preferred position relative
           * to the origin best fits on-screen.
           *
           * The selection of a position goes as follows:
           *  - If any positions fit completely within the viewport as-is,
           *      choose the first position that does so.
           *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,
           *      choose the position with the greatest available size modified by the positions' weight.
           *  - If pushing is enabled, take the position that went off-screen the least and push it
           *      on-screen.
           *  - If none of the previous criteria were met, use the position that goes off-screen the least.
           * \@docs-private
           * @return {?}
           */

        }, {
          key: "apply",
          value: function apply() {
            // We shouldn't do anything if the strategy was disposed or we're on the server.
            if (this._isDisposed || !this._platform.isBrowser) {
              return;
            } // If the position has been applied already (e.g. when the overlay was opened) and the
            // consumer opted into locking in the position, re-use the old position, in order to
            // prevent the overlay from jumping around.


            if (!this._isInitialRender && this._positionLocked && this._lastPosition) {
              this.reapplyLastPosition();
              return;
            }

            this._clearPanelClasses();

            this._resetOverlayElementStyles();

            this._resetBoundingBoxStyles(); // We need the bounding rects for the origin and the overlay to determine how to position
            // the overlay relative to the origin.
            // We use the viewport rect to determine whether a position would go off-screen.


            this._viewportRect = this._getNarrowedViewportRect();
            this._originRect = this._getOriginRect();
            this._overlayRect = this._pane.getBoundingClientRect();
            /** @type {?} */

            var originRect = this._originRect;
            /** @type {?} */

            var overlayRect = this._overlayRect;
            /** @type {?} */

            var viewportRect = this._viewportRect; // Positions where the overlay will fit with flexible dimensions.

            /** @type {?} */

            var flexibleFits = []; // Fallback if none of the preferred positions fit within the viewport.

            /** @type {?} */

            var fallback; // Go through each of the preferred positions looking for a good fit.
            // If a good fit is found, it will be applied immediately.

            var _iterator2 = _createForOfIteratorHelper(this._preferredPositions),
                _step2;

            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                var pos = _step2.value;

                // Get the exact (x, y) coordinate for the point-of-origin on the origin element.

                /** @type {?} */
                var originPoint = this._getOriginPoint(originRect, pos); // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the
                // overlay in this position. We use the top-left corner for calculations and later translate
                // this into an appropriate (top, left, bottom, right) style.

                /** @type {?} */


                var overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos); // Calculate how well the overlay would fit into the viewport with this point.

                /** @type {?} */


                var overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos); // If the overlay, without any further work, fits into the viewport, use this position.


                if (overlayFit.isCompletelyWithinViewport) {
                  this._isPushed = false;

                  this._applyPosition(pos, originPoint);

                  return;
                } // If the overlay has flexible dimensions, we can use this position
                // so long as there's enough space for the minimum dimensions.


                if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {
                  // Save positions where the overlay will fit with flexible dimensions. We will use these
                  // if none of the positions fit *without* flexible dimensions.
                  flexibleFits.push({
                    position: pos,
                    origin: originPoint,
                    overlayRect: overlayRect,
                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)
                  });
                  continue;
                } // If the current preferred position does not fit on the screen, remember the position
                // if it has more visible area on-screen than we've seen and move onto the next preferred
                // position.


                if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {
                  fallback = {
                    overlayFit: overlayFit,
                    overlayPoint: overlayPoint,
                    originPoint: originPoint,
                    position: pos,
                    overlayRect: overlayRect
                  };
                }
              } // If there are any positions where the overlay would fit with flexible dimensions, choose the
              // one that has the greatest area available modified by the position's weight

            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }

            if (flexibleFits.length) {
              /** @type {?} */
              var bestFit = null;
              /** @type {?} */

              var bestScore = -1;

              var _iterator3 = _createForOfIteratorHelper(flexibleFits),
                  _step3;

              try {
                for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                  var fit = _step3.value;

                  /** @type {?} */
                  var score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);

                  if (score > bestScore) {
                    bestScore = score;
                    bestFit = fit;
                  }
                }
              } catch (err) {
                _iterator3.e(err);
              } finally {
                _iterator3.f();
              }

              this._isPushed = false;

              this._applyPosition(
              /** @type {?} */
              bestFit.position,
              /** @type {?} */
              bestFit.origin);

              return;
            } // When none of the preferred positions fit within the viewport, take the position
            // that went off-screen the least and attempt to push it on-screen.


            if (this._canPush) {
              // TODO(jelbourn): after pushing, the opening "direction" of the overlay might not make sense.
              this._isPushed = true;

              this._applyPosition(
              /** @type {?} */
              fallback.position,
              /** @type {?} */
              fallback.originPoint);

              return;
            } // All options for getting the overlay within the viewport have been exhausted, so go with the
            // position that went off-screen the least.


            this._applyPosition(
            /** @type {?} */
            fallback.position,
            /** @type {?} */
            fallback.originPoint);
          }
          /**
           * @return {?}
           */

        }, {
          key: "detach",
          value: function detach() {
            this._clearPanelClasses();

            this._lastPosition = null;
            this._previousPushAmount = null;

            this._resizeSubscription.unsubscribe();
          }
          /**
           * Cleanup after the element gets destroyed.
           * @return {?}
           */

        }, {
          key: "dispose",
          value: function dispose() {
            if (this._isDisposed) {
              return;
            } // We can't use `_resetBoundingBoxStyles` here, because it resets
            // some properties to zero, rather than removing them.


            if (this._boundingBox) {
              extendStyles(this._boundingBox.style,
              /** @type {?} */
              {
                top: '',
                left: '',
                right: '',
                bottom: '',
                height: '',
                width: '',
                alignItems: '',
                justifyContent: ''
              });
            }

            if (this._pane) {
              this._resetOverlayElementStyles();
            }

            if (this._overlayRef) {
              this._overlayRef.hostElement.classList.remove(boundingBoxClass);
            }

            this.detach();

            this._positionChanges.complete();

            this._overlayRef = this._boundingBox =
            /** @type {?} */
            null;
            this._isDisposed = true;
          }
          /**
           * This re-aligns the overlay element with the trigger in its last calculated position,
           * even if a position higher in the "preferred positions" list would now fit. This
           * allows one to re-align the panel without changing the orientation of the panel.
           * @return {?}
           */

        }, {
          key: "reapplyLastPosition",
          value: function reapplyLastPosition() {
            if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {
              this._originRect = this._getOriginRect();
              this._overlayRect = this._pane.getBoundingClientRect();
              this._viewportRect = this._getNarrowedViewportRect();
              /** @type {?} */

              var lastPosition = this._lastPosition || this._preferredPositions[0];
              /** @type {?} */

              var originPoint = this._getOriginPoint(this._originRect, lastPosition);

              this._applyPosition(lastPosition, originPoint);
            }
          }
          /**
           * Sets the list of Scrollable containers that host the origin element so that
           * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every
           * Scrollable must be an ancestor element of the strategy's origin element.
           * @template THIS
           * @this {THIS}
           * @param {?} scrollables
           * @return {THIS}
           */

        }, {
          key: "withScrollableContainers",
          value: function withScrollableContainers(scrollables) {
            /** @type {?} */
            this._scrollables = scrollables;
            return (
              /** @type {?} */
              this
            );
          }
          /**
           * Adds new preferred positions.
           * @template THIS
           * @this {THIS}
           * @param {?} positions List of positions options for this overlay.
           * @return {THIS}
           */

        }, {
          key: "withPositions",
          value: function withPositions(positions) {
            /** @type {?} */
            this._preferredPositions = positions; // If the last calculated position object isn't part of the positions anymore, clear
            // it in order to avoid it being picked up if the consumer tries to re-apply.

            if (positions.indexOf(
            /** @type {?} */

            /** @type {?} */
            this._lastPosition) === -1) {
              /** @type {?} */
              this._lastPosition = null;
            }

            /** @type {?} */
            this._validatePositions();

            return (
              /** @type {?} */
              this
            );
          }
          /**
           * Sets a minimum distance the overlay may be positioned to the edge of the viewport.
           * @template THIS
           * @this {THIS}
           * @param {?} margin Required margin between the overlay and the viewport edge in pixels.
           * @return {THIS}
           */

        }, {
          key: "withViewportMargin",
          value: function withViewportMargin(margin) {
            /** @type {?} */
            this._viewportMargin = margin;
            return (
              /** @type {?} */
              this
            );
          }
          /**
           * Sets whether the overlay's width and height can be constrained to fit within the viewport.
           * @template THIS
           * @this {THIS}
           * @param {?=} flexibleDimensions
           * @return {THIS}
           */

        }, {
          key: "withFlexibleDimensions",
          value: function withFlexibleDimensions() {
            var flexibleDimensions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

            /** @type {?} */
            this._hasFlexibleDimensions = flexibleDimensions;
            return (
              /** @type {?} */
              this
            );
          }
          /**
           * Sets whether the overlay can grow after the initial open via flexible width/height.
           * @template THIS
           * @this {THIS}
           * @param {?=} growAfterOpen
           * @return {THIS}
           */

        }, {
          key: "withGrowAfterOpen",
          value: function withGrowAfterOpen() {
            var growAfterOpen = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

            /** @type {?} */
            this._growAfterOpen = growAfterOpen;
            return (
              /** @type {?} */
              this
            );
          }
          /**
           * Sets whether the overlay can be pushed on-screen if none of the provided positions fit.
           * @template THIS
           * @this {THIS}
           * @param {?=} canPush
           * @return {THIS}
           */

        }, {
          key: "withPush",
          value: function withPush() {
            var canPush = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

            /** @type {?} */
            this._canPush = canPush;
            return (
              /** @type {?} */
              this
            );
          }
          /**
           * Sets whether the overlay's position should be locked in after it is positioned
           * initially. When an overlay is locked in, it won't attempt to reposition itself
           * when the position is re-applied (e.g. when the user scrolls away).
           * @template THIS
           * @this {THIS}
           * @param {?=} isLocked Whether the overlay should locked in.
           * @return {THIS}
           */

        }, {
          key: "withLockedPosition",
          value: function withLockedPosition() {
            var isLocked = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

            /** @type {?} */
            this._positionLocked = isLocked;
            return (
              /** @type {?} */
              this
            );
          }
          /**
           * Sets the origin, relative to which to position the overlay.
           * Using an element origin is useful for building components that need to be positioned
           * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be
           * used for cases like contextual menus which open relative to the user's pointer.
           * @template THIS
           * @this {THIS}
           * @param {?} origin Reference to the new origin.
           * @return {THIS}
           */

        }, {
          key: "setOrigin",
          value: function setOrigin(origin) {
            /** @type {?} */
            this._origin = origin;
            return (
              /** @type {?} */
              this
            );
          }
          /**
           * Sets the default offset for the overlay's connection point on the x-axis.
           * @template THIS
           * @this {THIS}
           * @param {?} offset New offset in the X axis.
           * @return {THIS}
           */

        }, {
          key: "withDefaultOffsetX",
          value: function withDefaultOffsetX(offset) {
            /** @type {?} */
            this._offsetX = offset;
            return (
              /** @type {?} */
              this
            );
          }
          /**
           * Sets the default offset for the overlay's connection point on the y-axis.
           * @template THIS
           * @this {THIS}
           * @param {?} offset New offset in the Y axis.
           * @return {THIS}
           */

        }, {
          key: "withDefaultOffsetY",
          value: function withDefaultOffsetY(offset) {
            /** @type {?} */
            this._offsetY = offset;
            return (
              /** @type {?} */
              this
            );
          }
          /**
           * Configures that the position strategy should set a `transform-origin` on some elements
           * inside the overlay, depending on the current position that is being applied. This is
           * useful for the cases where the origin of an animation can change depending on the
           * alignment of the overlay.
           * @template THIS
           * @this {THIS}
           * @param {?} selector CSS selector that will be used to find the target
           *    elements onto which to set the transform origin.
           * @return {THIS}
           */

        }, {
          key: "withTransformOriginOn",
          value: function withTransformOriginOn(selector) {
            /** @type {?} */
            this._transformOriginSelector = selector;
            return (
              /** @type {?} */
              this
            );
          }
          /**
           * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.
           * @private
           * @param {?} originRect
           * @param {?} pos
           * @return {?}
           */

        }, {
          key: "_getOriginPoint",
          value: function _getOriginPoint(originRect, pos) {
            /** @type {?} */
            var x;

            if (pos.originX == 'center') {
              // Note: when centering we should always use the `left`
              // offset, otherwise the position will be wrong in RTL.
              x = originRect.left + originRect.width / 2;
            } else {
              /** @type {?} */
              var startX = this._isRtl() ? originRect.right : originRect.left;
              /** @type {?} */

              var endX = this._isRtl() ? originRect.left : originRect.right;
              x = pos.originX == 'start' ? startX : endX;
            }
            /** @type {?} */


            var y;

            if (pos.originY == 'center') {
              y = originRect.top + originRect.height / 2;
            } else {
              y = pos.originY == 'top' ? originRect.top : originRect.bottom;
            }

            return {
              x: x,
              y: y
            };
          }
          /**
           * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and
           * origin point to which the overlay should be connected.
           * @private
           * @param {?} originPoint
           * @param {?} overlayRect
           * @param {?} pos
           * @return {?}
           */

        }, {
          key: "_getOverlayPoint",
          value: function _getOverlayPoint(originPoint, overlayRect, pos) {
            // Calculate the (overlayStartX, overlayStartY), the start of the
            // potential overlay position relative to the origin point.

            /** @type {?} */
            var overlayStartX;

            if (pos.overlayX == 'center') {
              overlayStartX = -overlayRect.width / 2;
            } else if (pos.overlayX === 'start') {
              overlayStartX = this._isRtl() ? -overlayRect.width : 0;
            } else {
              overlayStartX = this._isRtl() ? 0 : -overlayRect.width;
            }
            /** @type {?} */


            var overlayStartY;

            if (pos.overlayY == 'center') {
              overlayStartY = -overlayRect.height / 2;
            } else {
              overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;
            } // The (x, y) coordinates of the overlay.


            return {
              x: originPoint.x + overlayStartX,
              y: originPoint.y + overlayStartY
            };
          }
          /**
           * Gets how well an overlay at the given point will fit within the viewport.
           * @private
           * @param {?} point
           * @param {?} overlay
           * @param {?} viewport
           * @param {?} position
           * @return {?}
           */

        }, {
          key: "_getOverlayFit",
          value: function _getOverlayFit(point, overlay, viewport, position) {
            var x = point.x,
                y = point.y;
            /** @type {?} */

            var offsetX = this._getOffset(position, 'x');
            /** @type {?} */


            var offsetY = this._getOffset(position, 'y'); // Account for the offsets since they could push the overlay out of the viewport.


            if (offsetX) {
              x += offsetX;
            }

            if (offsetY) {
              y += offsetY;
            } // How much the overlay would overflow at this position, on each side.

            /** @type {?} */


            var leftOverflow = 0 - x;
            /** @type {?} */

            var rightOverflow = x + overlay.width - viewport.width;
            /** @type {?} */

            var topOverflow = 0 - y;
            /** @type {?} */

            var bottomOverflow = y + overlay.height - viewport.height; // Visible parts of the element on each axis.

            /** @type {?} */

            var visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);
            /** @type {?} */


            var visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);
            /** @type {?} */


            var visibleArea = visibleWidth * visibleHeight;
            return {
              visibleArea: visibleArea,
              isCompletelyWithinViewport: overlay.width * overlay.height === visibleArea,
              fitsInViewportVertically: visibleHeight === overlay.height,
              fitsInViewportHorizontally: visibleWidth == overlay.width
            };
          }
          /**
           * Whether the overlay can fit within the viewport when it may resize either its width or height.
           * @private
           * @param {?} fit How well the overlay fits in the viewport at some position.
           * @param {?} point The (x, y) coordinates of the overlat at some position.
           * @param {?} viewport The geometry of the viewport.
           * @return {?}
           */

        }, {
          key: "_canFitWithFlexibleDimensions",
          value: function _canFitWithFlexibleDimensions(fit, point, viewport) {
            if (this._hasFlexibleDimensions) {
              /** @type {?} */
              var availableHeight = viewport.bottom - point.y;
              /** @type {?} */

              var availableWidth = viewport.right - point.x;
              /** @type {?} */

              var minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);
              /** @type {?} */

              var minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);
              /** @type {?} */

              var verticalFit = fit.fitsInViewportVertically || minHeight != null && minHeight <= availableHeight;
              /** @type {?} */

              var horizontalFit = fit.fitsInViewportHorizontally || minWidth != null && minWidth <= availableWidth;
              return verticalFit && horizontalFit;
            }

            return false;
          }
          /**
           * Gets the point at which the overlay can be "pushed" on-screen. If the overlay is larger than
           * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the
           * right and bottom).
           *
           * @private
           * @param {?} start Starting point from which the overlay is pushed.
           * @param {?} overlay Dimensions of the overlay.
           * @param {?} scrollPosition Current viewport scroll position.
           * @return {?} The point at which to position the overlay after pushing. This is effectively a new
           *     originPoint.
           */

        }, {
          key: "_pushOverlayOnScreen",
          value: function _pushOverlayOnScreen(start, overlay, scrollPosition) {
            // If the position is locked and we've pushed the overlay already, reuse the previous push
            // amount, rather than pushing it again. If we were to continue pushing, the element would
            // remain in the viewport, which goes against the expectations when position locking is enabled.
            if (this._previousPushAmount && this._positionLocked) {
              return {
                x: start.x + this._previousPushAmount.x,
                y: start.y + this._previousPushAmount.y
              };
            }
            /** @type {?} */


            var viewport = this._viewportRect; // Determine how much the overlay goes outside the viewport on each
            // side, which we'll use to decide which direction to push it.

            /** @type {?} */

            var overflowRight = Math.max(start.x + overlay.width - viewport.right, 0);
            /** @type {?} */

            var overflowBottom = Math.max(start.y + overlay.height - viewport.bottom, 0);
            /** @type {?} */

            var overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);
            /** @type {?} */

            var overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0); // Amount by which to push the overlay in each axis such that it remains on-screen.

            /** @type {?} */

            var pushX = 0;
            /** @type {?} */

            var pushY = 0; // If the overlay fits completely within the bounds of the viewport, push it from whichever
            // direction is goes off-screen. Otherwise, push the top-left corner such that its in the
            // viewport and allow for the trailing end of the overlay to go out of bounds.

            if (overlay.width <= viewport.width) {
              pushX = overflowLeft || -overflowRight;
            } else {
              pushX = start.x < this._viewportMargin ? viewport.left - scrollPosition.left - start.x : 0;
            }

            if (overlay.height <= viewport.height) {
              pushY = overflowTop || -overflowBottom;
            } else {
              pushY = start.y < this._viewportMargin ? viewport.top - scrollPosition.top - start.y : 0;
            }

            this._previousPushAmount = {
              x: pushX,
              y: pushY
            };
            return {
              x: start.x + pushX,
              y: start.y + pushY
            };
          }
          /**
           * Applies a computed position to the overlay and emits a position change.
           * @private
           * @param {?} position The position preference
           * @param {?} originPoint The point on the origin element where the overlay is connected.
           * @return {?}
           */

        }, {
          key: "_applyPosition",
          value: function _applyPosition(position, originPoint) {
            this._setTransformOrigin(position);

            this._setOverlayElementStyles(originPoint, position);

            this._setBoundingBoxStyles(originPoint, position);

            if (position.panelClass) {
              this._addPanelClasses(position.panelClass);
            } // Save the last connected position in case the position needs to be re-calculated.


            this._lastPosition = position; // Notify that the position has been changed along with its change properties.
            // We only emit if we've got any subscriptions, because the scroll visibility
            // calculcations can be somewhat expensive.

            if (this._positionChanges.observers.length) {
              /** @type {?} */
              var scrollableViewProperties = this._getScrollVisibility();
              /** @type {?} */


              var changeEvent = new _ConnectedOverlayPositionChange(position, scrollableViewProperties);

              this._positionChanges.next(changeEvent);
            }

            this._isInitialRender = false;
          }
          /**
           * Sets the transform origin based on the configured selector and the passed-in position.
           * @private
           * @param {?} position
           * @return {?}
           */

        }, {
          key: "_setTransformOrigin",
          value: function _setTransformOrigin(position) {
            if (!this._transformOriginSelector) {
              return;
            }
            /** @type {?} */


            var elements =
            /** @type {?} */
            this._boundingBox.querySelectorAll(this._transformOriginSelector);
            /** @type {?} */


            var xOrigin;
            /** @type {?} */

            var yOrigin = position.overlayY;

            if (position.overlayX === 'center') {
              xOrigin = 'center';
            } else if (this._isRtl()) {
              xOrigin = position.overlayX === 'start' ? 'right' : 'left';
            } else {
              xOrigin = position.overlayX === 'start' ? 'left' : 'right';
            }

            for (var i = 0; i < elements.length; i++) {
              elements[i].style.transformOrigin = "".concat(xOrigin, " ").concat(yOrigin);
            }
          }
          /**
           * Gets the position and size of the overlay's sizing container.
           *
           * This method does no measuring and applies no styles so that we can cheaply compute the
           * bounds for all positions and choose the best fit based on these results.
           * @private
           * @param {?} origin
           * @param {?} position
           * @return {?}
           */

        }, {
          key: "_calculateBoundingBoxRect",
          value: function _calculateBoundingBoxRect(origin, position) {
            /** @type {?} */
            var viewport = this._viewportRect;
            /** @type {?} */

            var isRtl = this._isRtl();
            /** @type {?} */


            var height;
            /** @type {?} */

            var top;
            /** @type {?} */

            var bottom;

            if (position.overlayY === 'top') {
              // Overlay is opening "downward" and thus is bound by the bottom viewport edge.
              top = origin.y;
              height = viewport.height - top + this._viewportMargin;
            } else if (position.overlayY === 'bottom') {
              // Overlay is opening "upward" and thus is bound by the top viewport edge. We need to add
              // the viewport margin back in, because the viewport rect is narrowed down to remove the
              // margin, whereas the `origin` position is calculated based on its `ClientRect`.
              bottom = viewport.height - origin.y + this._viewportMargin * 2;
              height = viewport.height - bottom + this._viewportMargin;
            } else {
              // If neither top nor bottom, it means that the overlay is vertically centered on the
              // origin point. Note that we want the position relative to the viewport, rather than
              // the page, which is why we don't use something like `viewport.bottom - origin.y` and
              // `origin.y - viewport.top`.

              /** @type {?} */
              var smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);
              /** @type {?} */

              var previousHeight = this._lastBoundingBoxSize.height;
              height = smallestDistanceToViewportEdge * 2;
              top = origin.y - smallestDistanceToViewportEdge;

              if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {
                top = origin.y - previousHeight / 2;
              }
            } // The overlay is opening 'right-ward' (the content flows to the right).

            /** @type {?} */


            var isBoundedByRightViewportEdge = position.overlayX === 'start' && !isRtl || position.overlayX === 'end' && isRtl; // The overlay is opening 'left-ward' (the content flows to the left).

            /** @type {?} */

            var isBoundedByLeftViewportEdge = position.overlayX === 'end' && !isRtl || position.overlayX === 'start' && isRtl;
            /** @type {?} */

            var width;
            /** @type {?} */

            var left;
            /** @type {?} */

            var right;

            if (isBoundedByLeftViewportEdge) {
              right = viewport.width - origin.x + this._viewportMargin;
              width = origin.x - this._viewportMargin;
            } else if (isBoundedByRightViewportEdge) {
              left = origin.x;
              width = viewport.right - origin.x;
            } else {
              // If neither start nor end, it means that the overlay is horizontally centered on the
              // origin point. Note that we want the position relative to the viewport, rather than
              // the page, which is why we don't use something like `viewport.right - origin.x` and
              // `origin.x - viewport.left`.

              /** @type {?} */
              var _smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);
              /** @type {?} */


              var previousWidth = this._lastBoundingBoxSize.width;
              width = _smallestDistanceToViewportEdge * 2;
              left = origin.x - _smallestDistanceToViewportEdge;

              if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {
                left = origin.x - previousWidth / 2;
              }
            }

            return {
              top:
              /** @type {?} */
              top,
              left:
              /** @type {?} */
              left,
              bottom:
              /** @type {?} */
              bottom,
              right:
              /** @type {?} */
              right,
              width: width,
              height: height
            };
          }
          /**
           * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the
           * origin's connection point and stetches to the bounds of the viewport.
           *
           * @private
           * @param {?} origin The point on the origin element where the overlay is connected.
           * @param {?} position The position preference
           * @return {?}
           */

        }, {
          key: "_setBoundingBoxStyles",
          value: function _setBoundingBoxStyles(origin, position) {
            /** @type {?} */
            var boundingBoxRect = this._calculateBoundingBoxRect(origin, position); // It's weird if the overlay *grows* while scrolling, so we take the last size into account
            // when applying a new size.


            if (!this._isInitialRender && !this._growAfterOpen) {
              boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);
              boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);
            }
            /** @type {?} */


            var styles =
            /** @type {?} */
            {};

            if (this._hasExactPosition()) {
              styles.top = styles.left = '0';
              styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';
              styles.width = styles.height = '100%';
            } else {
              /** @type {?} */
              var maxHeight = this._overlayRef.getConfig().maxHeight;
              /** @type {?} */


              var maxWidth = this._overlayRef.getConfig().maxWidth;

              styles.height = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceCssPixelValue)(boundingBoxRect.height);
              styles.top = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceCssPixelValue)(boundingBoxRect.top);
              styles.bottom = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceCssPixelValue)(boundingBoxRect.bottom);
              styles.width = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceCssPixelValue)(boundingBoxRect.width);
              styles.left = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceCssPixelValue)(boundingBoxRect.left);
              styles.right = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceCssPixelValue)(boundingBoxRect.right); // Push the pane content towards the proper direction.

              if (position.overlayX === 'center') {
                styles.alignItems = 'center';
              } else {
                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';
              }

              if (position.overlayY === 'center') {
                styles.justifyContent = 'center';
              } else {
                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';
              }

              if (maxHeight) {
                styles.maxHeight = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceCssPixelValue)(maxHeight);
              }

              if (maxWidth) {
                styles.maxWidth = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceCssPixelValue)(maxWidth);
              }
            }

            this._lastBoundingBoxSize = boundingBoxRect;
            extendStyles(
            /** @type {?} */
            this._boundingBox.style, styles);
          }
          /**
           * Resets the styles for the bounding box so that a new positioning can be computed.
           * @private
           * @return {?}
           */

        }, {
          key: "_resetBoundingBoxStyles",
          value: function _resetBoundingBoxStyles() {
            extendStyles(
            /** @type {?} */
            this._boundingBox.style,
            /** @type {?} */
            {
              top: '0',
              left: '0',
              right: '0',
              bottom: '0',
              height: '',
              width: '',
              alignItems: '',
              justifyContent: ''
            });
          }
          /**
           * Resets the styles for the overlay pane so that a new positioning can be computed.
           * @private
           * @return {?}
           */

        }, {
          key: "_resetOverlayElementStyles",
          value: function _resetOverlayElementStyles() {
            extendStyles(this._pane.style,
            /** @type {?} */
            {
              top: '',
              left: '',
              bottom: '',
              right: '',
              position: '',
              transform: ''
            });
          }
          /**
           * Sets positioning styles to the overlay element.
           * @private
           * @param {?} originPoint
           * @param {?} position
           * @return {?}
           */

        }, {
          key: "_setOverlayElementStyles",
          value: function _setOverlayElementStyles(originPoint, position) {
            /** @type {?} */
            var styles =
            /** @type {?} */
            {};
            /** @type {?} */

            var hasExactPosition = this._hasExactPosition();
            /** @type {?} */


            var hasFlexibleDimensions = this._hasFlexibleDimensions;
            /** @type {?} */

            var config = this._overlayRef.getConfig();

            if (hasExactPosition) {
              /** @type {?} */
              var scrollPosition = this._viewportRuler.getViewportScrollPosition();

              extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));
              extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));
            } else {
              styles.position = 'static';
            } // Use a transform to apply the offsets. We do this because the `center` positions rely on
            // being in the normal flex flow and setting a `top` / `left` at all will completely throw
            // off the position. We also can't use margins, because they won't have an effect in some
            // cases where the element doesn't have anything to "push off of". Finally, this works
            // better both with flexible and non-flexible positioning.

            /** @type {?} */


            var transformString = '';
            /** @type {?} */

            var offsetX = this._getOffset(position, 'x');
            /** @type {?} */


            var offsetY = this._getOffset(position, 'y');

            if (offsetX) {
              transformString += "translateX(".concat(offsetX, "px) ");
            }

            if (offsetY) {
              transformString += "translateY(".concat(offsetY, "px)");
            }

            styles.transform = transformString.trim(); // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because
            // we need these values to both be set to "100%" for the automatic flexible sizing to work.
            // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.
            // Note that this doesn't apply when we have an exact position, in which case we do want to
            // apply them because they'll be cleared from the bounding box.

            if (config.maxHeight) {
              if (hasExactPosition) {
                styles.maxHeight = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceCssPixelValue)(config.maxHeight);
              } else if (hasFlexibleDimensions) {
                styles.maxHeight = '';
              }
            }

            if (config.maxWidth) {
              if (hasExactPosition) {
                styles.maxWidth = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceCssPixelValue)(config.maxWidth);
              } else if (hasFlexibleDimensions) {
                styles.maxWidth = '';
              }
            }

            extendStyles(this._pane.style, styles);
          }
          /**
           * Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing.
           * @private
           * @param {?} position
           * @param {?} originPoint
           * @param {?} scrollPosition
           * @return {?}
           */

        }, {
          key: "_getExactOverlayY",
          value: function _getExactOverlayY(position, originPoint, scrollPosition) {
            // Reset any existing styles. This is necessary in case the
            // preferred position has changed since the last `apply`.

            /** @type {?} */
            var styles =
            /** @type {?} */
            {
              top: '',
              bottom: ''
            };
            /** @type {?} */

            var overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);

            if (this._isPushed) {
              overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);
            }
            /** @type {?} */


            var virtualKeyboardOffset = this._overlayContainer.getContainerElement().getBoundingClientRect().top; // Normally this would be zero, however when the overlay is attached to an input (e.g. in an
            // autocomplete), mobile browsers will shift everything in order to put the input in the middle
            // of the screen and to make space for the virtual keyboard. We need to account for this offset,
            // otherwise our positioning will be thrown off.


            overlayPoint.y -= virtualKeyboardOffset; // We want to set either `top` or `bottom` based on whether the overlay wants to appear
            // above or below the origin and the direction in which the element will expand.

            if (position.overlayY === 'bottom') {
              // When using `bottom`, we adjust the y position such that it is the distance
              // from the bottom of the viewport rather than the top.

              /** @type {?} */
              var documentHeight =
              /** @type {?} */
              this._document.documentElement.clientHeight;
              styles.bottom = "".concat(documentHeight - (overlayPoint.y + this._overlayRect.height), "px");
            } else {
              styles.top = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceCssPixelValue)(overlayPoint.y);
            }

            return styles;
          }
          /**
           * Gets the exact left/right for the overlay when not using flexible sizing or when pushing.
           * @private
           * @param {?} position
           * @param {?} originPoint
           * @param {?} scrollPosition
           * @return {?}
           */

        }, {
          key: "_getExactOverlayX",
          value: function _getExactOverlayX(position, originPoint, scrollPosition) {
            // Reset any existing styles. This is necessary in case the preferred position has
            // changed since the last `apply`.

            /** @type {?} */
            var styles =
            /** @type {?} */
            {
              left: '',
              right: ''
            };
            /** @type {?} */

            var overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);

            if (this._isPushed) {
              overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);
            } // We want to set either `left` or `right` based on whether the overlay wants to appear "before"
            // or "after" the origin, which determines the direction in which the element will expand.
            // For the horizontal axis, the meaning of "before" and "after" change based on whether the
            // page is in RTL or LTR.

            /** @type {?} */


            var horizontalStyleProperty;

            if (this._isRtl()) {
              horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';
            } else {
              horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';
            } // When we're setting `right`, we adjust the x position such that it is the distance
            // from the right edge of the viewport rather than the left edge.


            if (horizontalStyleProperty === 'right') {
              /** @type {?} */
              var documentWidth =
              /** @type {?} */
              this._document.documentElement.clientWidth;
              styles.right = "".concat(documentWidth - (overlayPoint.x + this._overlayRect.width), "px");
            } else {
              styles.left = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceCssPixelValue)(overlayPoint.x);
            }

            return styles;
          }
          /**
           * Gets the view properties of the trigger and overlay, including whether they are clipped
           * or completely outside the view of any of the strategy's scrollables.
           * @private
           * @return {?}
           */

        }, {
          key: "_getScrollVisibility",
          value: function _getScrollVisibility() {
            // Note: needs fresh rects since the position could've changed.

            /** @type {?} */
            var originBounds = this._getOriginRect();
            /** @type {?} */


            var overlayBounds = this._pane.getBoundingClientRect(); // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers
            // every time, we should be able to use the scrollTop of the containers if the size of those
            // containers hasn't changed.

            /** @type {?} */


            var scrollContainerBounds = this._scrollables.map(
            /**
            * @param {?} scrollable
            * @return {?}
            */
            function (scrollable) {
              return scrollable.getElementRef().nativeElement.getBoundingClientRect();
            });

            return {
              isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),
              isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),
              isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),
              isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds)
            };
          }
          /**
           * Subtracts the amount that an element is overflowing on an axis from its length.
           * @private
           * @param {?} length
           * @param {...?} overflows
           * @return {?}
           */

        }, {
          key: "_subtractOverflows",
          value: function _subtractOverflows(length) {
            for (var _len5 = arguments.length, overflows = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
              overflows[_key5 - 1] = arguments[_key5];
            }

            return overflows.reduce(
            /**
            * @param {?} currentValue
            * @param {?} currentOverflow
            * @return {?}
            */
            function (currentValue, currentOverflow) {
              return currentValue - Math.max(currentOverflow, 0);
            }, length);
          }
          /**
           * Narrows the given viewport rect by the current _viewportMargin.
           * @private
           * @return {?}
           */

        }, {
          key: "_getNarrowedViewportRect",
          value: function _getNarrowedViewportRect() {
            // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,
            // because we want to use the `clientWidth` and `clientHeight` as the base. The difference
            // being that the client properties don't include the scrollbar, as opposed to `innerWidth`
            // and `innerHeight` that do. This is necessary, because the overlay container uses
            // 100% `width` and `height` which don't include the scrollbar either.

            /** @type {?} */
            var width =
            /** @type {?} */
            this._document.documentElement.clientWidth;
            /** @type {?} */

            var height =
            /** @type {?} */
            this._document.documentElement.clientHeight;
            /** @type {?} */

            var scrollPosition = this._viewportRuler.getViewportScrollPosition();

            return {
              top: scrollPosition.top + this._viewportMargin,
              left: scrollPosition.left + this._viewportMargin,
              right: scrollPosition.left + width - this._viewportMargin,
              bottom: scrollPosition.top + height - this._viewportMargin,
              width: width - 2 * this._viewportMargin,
              height: height - 2 * this._viewportMargin
            };
          }
          /**
           * Whether the we're dealing with an RTL context
           * @private
           * @return {?}
           */

        }, {
          key: "_isRtl",
          value: function _isRtl() {
            return this._overlayRef.getDirection() === 'rtl';
          }
          /**
           * Determines whether the overlay uses exact or flexible positioning.
           * @private
           * @return {?}
           */

        }, {
          key: "_hasExactPosition",
          value: function _hasExactPosition() {
            return !this._hasFlexibleDimensions || this._isPushed;
          }
          /**
           * Retrieves the offset of a position along the x or y axis.
           * @private
           * @param {?} position
           * @param {?} axis
           * @return {?}
           */

        }, {
          key: "_getOffset",
          value: function _getOffset(position, axis) {
            if (axis === 'x') {
              // We don't do something like `position['offset' + axis]` in
              // order to avoid breking minifiers that rename properties.
              return position.offsetX == null ? this._offsetX : position.offsetX;
            }

            return position.offsetY == null ? this._offsetY : position.offsetY;
          }
          /**
           * Validates that the current position match the expected values.
           * @private
           * @return {?}
           */

        }, {
          key: "_validatePositions",
          value: function _validatePositions() {
            if (!this._preferredPositions.length) {
              throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');
            } // TODO(crisbeto): remove these once Angular's template type
            // checking is advanced enough to catch these cases.


            this._preferredPositions.forEach(
            /**
            * @param {?} pair
            * @return {?}
            */
            function (pair) {
              _validateHorizontalPosition('originX', pair.originX);

              _validateVerticalPosition('originY', pair.originY);

              _validateHorizontalPosition('overlayX', pair.overlayX);

              _validateVerticalPosition('overlayY', pair.overlayY);
            });
          }
          /**
           * Adds a single CSS class or an array of classes on the overlay panel.
           * @private
           * @param {?} cssClasses
           * @return {?}
           */

        }, {
          key: "_addPanelClasses",
          value: function _addPanelClasses(cssClasses) {
            var _this42 = this;

            if (this._pane) {
              (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceArray)(cssClasses).forEach(
              /**
              * @param {?} cssClass
              * @return {?}
              */
              function (cssClass) {
                if (cssClass !== '' && _this42._appliedPanelClasses.indexOf(cssClass) === -1) {
                  _this42._appliedPanelClasses.push(cssClass);

                  _this42._pane.classList.add(cssClass);
                }
              });
            }
          }
          /**
           * Clears the classes that the position strategy has applied from the overlay panel.
           * @private
           * @return {?}
           */

        }, {
          key: "_clearPanelClasses",
          value: function _clearPanelClasses() {
            var _this43 = this;

            if (this._pane) {
              this._appliedPanelClasses.forEach(
              /**
              * @param {?} cssClass
              * @return {?}
              */
              function (cssClass) {
                _this43._pane.classList.remove(cssClass);
              });

              this._appliedPanelClasses = [];
            }
          }
          /**
           * Returns the ClientRect of the current origin.
           * @private
           * @return {?}
           */

        }, {
          key: "_getOriginRect",
          value: function _getOriginRect() {
            /** @type {?} */
            var origin = this._origin;

            if (origin instanceof _angular_core__WEBPACK_IMPORTED_MODULE_2__.ElementRef) {
              return origin.nativeElement.getBoundingClientRect();
            } // Check for Element so SVG elements are also supported.


            if (origin instanceof Element) {
              return origin.getBoundingClientRect();
            }
            /** @type {?} */


            var width = origin.width || 0;
            /** @type {?} */

            var height = origin.height || 0; // If the origin is a point, return a client rect as if it was a 0x0 element at the point.

            return {
              top: origin.y,
              bottom: origin.y + height,
              left: origin.x,
              right: origin.x + width,
              height: height,
              width: width
            };
          }
        }]);

        return _FlexibleConnectedPositionStrategy;
      }();

      if (false) {}
      /**
       * A simple (x, y) coordinate.
       * @record
       */


      function Point() {}

      if (false) {}
      /**
       * Record of measurements for how an overlay (at a given position) fits into the viewport.
       * @record
       */


      function OverlayFit() {}

      if (false) {}
      /**
       * Record of the measurments determining whether an overlay will fit in a specific position.
       * @record
       */


      function FallbackPosition() {}

      if (false) {}
      /**
       * Position and size of the overlay sizing wrapper for a specific position.
       * @record
       */


      function BoundingBoxRect() {}

      if (false) {}
      /**
       * Record of measures determining how well a given position will fit with flexible dimensions.
       * @record
       */


      function FlexibleFit() {}

      if (false) {}
      /**
       * A connected position as specified by the user.
       * @record
       */


      function ConnectedPosition() {}

      if (false) {}
      /**
       * Shallow-extends a stylesheet object with another stylesheet object.
       * @param {?} destination
       * @param {?} source
       * @return {?}
       */


      function extendStyles(destination, source) {
        for (var key in source) {
          if (source.hasOwnProperty(key)) {
            destination[key] = source[key];
          }
        }

        return destination;
      }
      /**
       * Extracts the pixel value as a number from a value, if it's a number
       * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.
       * @param {?} input
       * @return {?}
       */


      function getPixelValue(input) {
        if (typeof input !== 'number' && input != null) {
          var _input$split = input.split(cssUnitPattern),
              _input$split2 = _slicedToArray(_input$split, 2),
              value = _input$split2[0],
              units = _input$split2[1];

          return !units || units === 'px' ? parseFloat(value) : null;
        }

        return input || null;
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/overlay/position/connected-position-strategy.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * A strategy for positioning overlays. Using this strategy, an overlay is given an
       * implicit position relative to some origin element. The relative position is defined in terms of
       * a point on the origin element that is connected to a point on the overlay element. For example,
       * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner
       * of the overlay.
       * @deprecated Use `FlexibleConnectedPositionStrategy` instead.
       * \@breaking-change 8.0.0
       */


      var _ConnectedPositionStrategy = /*#__PURE__*/function () {
        /**
         * @param {?} originPos
         * @param {?} overlayPos
         * @param {?} connectedTo
         * @param {?} viewportRuler
         * @param {?} document
         * @param {?} platform
         * @param {?} overlayContainer
         */
        function _ConnectedPositionStrategy(originPos, overlayPos, connectedTo, viewportRuler, document, platform, overlayContainer) {
          _classCallCheck(this, _ConnectedPositionStrategy);

          /**
           * Ordered list of preferred positions, from most to least desirable.
           */
          this._preferredPositions = []; // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain
          // the extra logic, we create an instance of the positioning strategy that has some
          // defaults that make it behave as the old position strategy and to which we'll
          // proxy all of the API calls.

          this._positionStrategy = new _FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform, overlayContainer).withFlexibleDimensions(false).withPush(false).withViewportMargin(0);
          this.withFallbackPosition(originPos, overlayPos);
        }
        /**
         * Whether the we're dealing with an RTL context
         * @return {?}
         */


        _createClass(_ConnectedPositionStrategy, [{
          key: "_isRtl",
          get: function get() {
            return this._overlayRef.getDirection() === 'rtl';
          }
          /**
           * Emits an event when the connection point changes.
           * @return {?}
           */

        }, {
          key: "onPositionChange",
          get: function get() {
            return this._positionStrategy.positionChanges;
          }
          /**
           * Ordered list of preferred positions, from most to least desirable.
           * @return {?}
           */

        }, {
          key: "positions",
          get: function get() {
            return this._preferredPositions;
          }
          /**
           * Attach this position strategy to an overlay.
           * @param {?} overlayRef
           * @return {?}
           */

        }, {
          key: "attach",
          value: function attach(overlayRef) {
            this._overlayRef = overlayRef;

            this._positionStrategy.attach(overlayRef);

            if (this._direction) {
              overlayRef.setDirection(this._direction);
              this._direction = null;
            }
          }
          /**
           * Disposes all resources used by the position strategy.
           * @return {?}
           */

        }, {
          key: "dispose",
          value: function dispose() {
            this._positionStrategy.dispose();
          }
          /**
           * \@docs-private
           * @return {?}
           */

        }, {
          key: "detach",
          value: function detach() {
            this._positionStrategy.detach();
          }
          /**
           * Updates the position of the overlay element, using whichever preferred position relative
           * to the origin fits on-screen.
           * \@docs-private
           * @return {?}
           */

        }, {
          key: "apply",
          value: function apply() {
            this._positionStrategy.apply();
          }
          /**
           * Re-positions the overlay element with the trigger in its last calculated position,
           * even if a position higher in the "preferred positions" list would now fit. This
           * allows one to re-align the panel without changing the orientation of the panel.
           * @return {?}
           */

        }, {
          key: "recalculateLastPosition",
          value: function recalculateLastPosition() {
            this._positionStrategy.reapplyLastPosition();
          }
          /**
           * Sets the list of Scrollable containers that host the origin element so that
           * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every
           * Scrollable must be an ancestor element of the strategy's origin element.
           * @param {?} scrollables
           * @return {?}
           */

        }, {
          key: "withScrollableContainers",
          value: function withScrollableContainers(scrollables) {
            this._positionStrategy.withScrollableContainers(scrollables);
          }
          /**
           * Adds a new preferred fallback position.
           * @template THIS
           * @this {THIS}
           * @param {?} originPos
           * @param {?} overlayPos
           * @param {?=} offsetX
           * @param {?=} offsetY
           * @return {THIS}
           */

        }, {
          key: "withFallbackPosition",
          value: function withFallbackPosition(originPos, overlayPos, offsetX, offsetY) {
            /** @type {?} */
            var position = new _ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);

            /** @type {?} */
            this._preferredPositions.push(position);

            /** @type {?} */
            this._positionStrategy.withPositions(
            /** @type {?} */
            this._preferredPositions);

            return (
              /** @type {?} */
              this
            );
          }
          /**
           * Sets the layout direction so the overlay's position can be adjusted to match.
           * @template THIS
           * @this {THIS}
           * @param {?} dir New layout direction.
           * @return {THIS}
           */

        }, {
          key: "withDirection",
          value: function withDirection(dir) {
            // Since the direction might be declared before the strategy is attached,
            // we save the value in a temporary property and we'll transfer it to the
            // overlay ref on attachment.
            if (
            /** @type {?} */
            this._overlayRef) {
              /** @type {?} */
              this._overlayRef.setDirection(dir);
            } else {
              /** @type {?} */
              this._direction = dir;
            }

            return (
              /** @type {?} */
              this
            );
          }
          /**
           * Sets an offset for the overlay's connection point on the x-axis
           * @template THIS
           * @this {THIS}
           * @param {?} offset New offset in the X axis.
           * @return {THIS}
           */

        }, {
          key: "withOffsetX",
          value: function withOffsetX(offset) {
            /** @type {?} */
            this._positionStrategy.withDefaultOffsetX(offset);

            return (
              /** @type {?} */
              this
            );
          }
          /**
           * Sets an offset for the overlay's connection point on the y-axis
           * @template THIS
           * @this {THIS}
           * @param {?} offset New offset in the Y axis.
           * @return {THIS}
           */

        }, {
          key: "withOffsetY",
          value: function withOffsetY(offset) {
            /** @type {?} */
            this._positionStrategy.withDefaultOffsetY(offset);

            return (
              /** @type {?} */
              this
            );
          }
          /**
           * Sets whether the overlay's position should be locked in after it is positioned
           * initially. When an overlay is locked in, it won't attempt to reposition itself
           * when the position is re-applied (e.g. when the user scrolls away).
           * @template THIS
           * @this {THIS}
           * @param {?} isLocked Whether the overlay should locked in.
           * @return {THIS}
           */

        }, {
          key: "withLockedPosition",
          value: function withLockedPosition(isLocked) {
            /** @type {?} */
            this._positionStrategy.withLockedPosition(isLocked);

            return (
              /** @type {?} */
              this
            );
          }
          /**
           * Overwrites the current set of positions with an array of new ones.
           * @template THIS
           * @this {THIS}
           * @param {?} positions Position pairs to be set on the strategy.
           * @return {THIS}
           */

        }, {
          key: "withPositions",
          value: function withPositions(positions) {
            /** @type {?} */
            this._preferredPositions = positions.slice();

            /** @type {?} */
            this._positionStrategy.withPositions(
            /** @type {?} */
            this._preferredPositions);

            return (
              /** @type {?} */
              this
            );
          }
          /**
           * Sets the origin element, relative to which to position the overlay.
           * @template THIS
           * @this {THIS}
           * @param {?} origin Reference to the new origin element.
           * @return {THIS}
           */

        }, {
          key: "setOrigin",
          value: function setOrigin(origin) {
            /** @type {?} */
            this._positionStrategy.setOrigin(origin);

            return (
              /** @type {?} */
              this
            );
          }
        }]);

        return _ConnectedPositionStrategy;
      }();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/overlay/position/global-position-strategy.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Class to be added to the overlay pane wrapper.
       * @type {?}
       */


      var wrapperClass = 'cdk-global-overlay-wrapper';
      /**
       * A strategy for positioning overlays. Using this strategy, an overlay is given an
       * explicit position relative to the browser's viewport. We use flexbox, instead of
       * transforms, in order to avoid issues with subpixel rendering which can cause the
       * element to become blurry.
       */

      var _GlobalPositionStrategy = /*#__PURE__*/function () {
        function _GlobalPositionStrategy() {
          _classCallCheck(this, _GlobalPositionStrategy);

          this._cssPosition = 'static';
          this._topOffset = '';
          this._bottomOffset = '';
          this._leftOffset = '';
          this._rightOffset = '';
          this._alignItems = '';
          this._justifyContent = '';
          this._width = '';
          this._height = '';
        }
        /**
         * @param {?} overlayRef
         * @return {?}
         */


        _createClass(_GlobalPositionStrategy, [{
          key: "attach",
          value: function attach(overlayRef) {
            /** @type {?} */
            var config = overlayRef.getConfig();
            this._overlayRef = overlayRef;

            if (this._width && !config.width) {
              overlayRef.updateSize({
                width: this._width
              });
            }

            if (this._height && !config.height) {
              overlayRef.updateSize({
                height: this._height
              });
            }

            overlayRef.hostElement.classList.add(wrapperClass);
            this._isDisposed = false;
          }
          /**
           * Sets the top position of the overlay. Clears any previously set vertical position.
           * @template THIS
           * @this {THIS}
           * @param {?=} value New top offset.
           * @return {THIS}
           */

        }, {
          key: "top",
          value: function top() {
            var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

            /** @type {?} */
            this._bottomOffset = '';

            /** @type {?} */
            this._topOffset = value;

            /** @type {?} */
            this._alignItems = 'flex-start';
            return (
              /** @type {?} */
              this
            );
          }
          /**
           * Sets the left position of the overlay. Clears any previously set horizontal position.
           * @template THIS
           * @this {THIS}
           * @param {?=} value New left offset.
           * @return {THIS}
           */

        }, {
          key: "left",
          value: function left() {
            var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

            /** @type {?} */
            this._rightOffset = '';

            /** @type {?} */
            this._leftOffset = value;

            /** @type {?} */
            this._justifyContent = 'flex-start';
            return (
              /** @type {?} */
              this
            );
          }
          /**
           * Sets the bottom position of the overlay. Clears any previously set vertical position.
           * @template THIS
           * @this {THIS}
           * @param {?=} value New bottom offset.
           * @return {THIS}
           */

        }, {
          key: "bottom",
          value: function bottom() {
            var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

            /** @type {?} */
            this._topOffset = '';

            /** @type {?} */
            this._bottomOffset = value;

            /** @type {?} */
            this._alignItems = 'flex-end';
            return (
              /** @type {?} */
              this
            );
          }
          /**
           * Sets the right position of the overlay. Clears any previously set horizontal position.
           * @template THIS
           * @this {THIS}
           * @param {?=} value New right offset.
           * @return {THIS}
           */

        }, {
          key: "right",
          value: function right() {
            var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

            /** @type {?} */
            this._leftOffset = '';

            /** @type {?} */
            this._rightOffset = value;

            /** @type {?} */
            this._justifyContent = 'flex-end';
            return (
              /** @type {?} */
              this
            );
          }
          /**
           * Sets the overlay width and clears any previously set width.
           * @deprecated Pass the `width` through the `OverlayConfig`.
           * \@breaking-change 8.0.0
           * @template THIS
           * @this {THIS}
           * @param {?=} value New width for the overlay
           * @return {THIS}
           */

        }, {
          key: "width",
          value: function width() {
            var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

            if (
            /** @type {?} */
            this._overlayRef) {
              /** @type {?} */
              this._overlayRef.updateSize({
                width: value
              });
            } else {
              /** @type {?} */
              this._width = value;
            }

            return (
              /** @type {?} */
              this
            );
          }
          /**
           * Sets the overlay height and clears any previously set height.
           * @deprecated Pass the `height` through the `OverlayConfig`.
           * \@breaking-change 8.0.0
           * @template THIS
           * @this {THIS}
           * @param {?=} value New height for the overlay
           * @return {THIS}
           */

        }, {
          key: "height",
          value: function height() {
            var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

            if (
            /** @type {?} */
            this._overlayRef) {
              /** @type {?} */
              this._overlayRef.updateSize({
                height: value
              });
            } else {
              /** @type {?} */
              this._height = value;
            }

            return (
              /** @type {?} */
              this
            );
          }
          /**
           * Centers the overlay horizontally with an optional offset.
           * Clears any previously set horizontal position.
           *
           * @template THIS
           * @this {THIS}
           * @param {?=} offset Overlay offset from the horizontal center.
           * @return {THIS}
           */

        }, {
          key: "centerHorizontally",
          value: function centerHorizontally() {
            var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

            /** @type {?} */
            this.left(offset);

            /** @type {?} */
            this._justifyContent = 'center';
            return (
              /** @type {?} */
              this
            );
          }
          /**
           * Centers the overlay vertically with an optional offset.
           * Clears any previously set vertical position.
           *
           * @template THIS
           * @this {THIS}
           * @param {?=} offset Overlay offset from the vertical center.
           * @return {THIS}
           */

        }, {
          key: "centerVertically",
          value: function centerVertically() {
            var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

            /** @type {?} */
            this.top(offset);

            /** @type {?} */
            this._alignItems = 'center';
            return (
              /** @type {?} */
              this
            );
          }
          /**
           * Apply the position to the element.
           * \@docs-private
           * @return {?}
           */

        }, {
          key: "apply",
          value: function apply() {
            // Since the overlay ref applies the strategy asynchronously, it could
            // have been disposed before it ends up being applied. If that is the
            // case, we shouldn't do anything.
            if (!this._overlayRef || !this._overlayRef.hasAttached()) {
              return;
            }
            /** @type {?} */


            var styles = this._overlayRef.overlayElement.style;
            /** @type {?} */

            var parentStyles = this._overlayRef.hostElement.style;
            /** @type {?} */

            var config = this._overlayRef.getConfig();

            var width = config.width,
                height = config.height,
                maxWidth = config.maxWidth,
                maxHeight = config.maxHeight;
            /** @type {?} */

            var shouldBeFlushHorizontally = (width === '100%' || width === '100vw') && (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');
            /** @type {?} */

            var shouldBeFlushVertically = (height === '100%' || height === '100vh') && (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');
            styles.position = this._cssPosition;
            styles.marginLeft = shouldBeFlushHorizontally ? '0' : this._leftOffset;
            styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;
            styles.marginBottom = this._bottomOffset;
            styles.marginRight = this._rightOffset;

            if (shouldBeFlushHorizontally) {
              parentStyles.justifyContent = 'flex-start';
            } else if (this._justifyContent === 'center') {
              parentStyles.justifyContent = 'center';
            } else if (this._overlayRef.getConfig().direction === 'rtl') {
              // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we
              // don't want that because our positioning is explicitly `left` and `right`, hence
              // why we do another inversion to ensure that the overlay stays in the same position.
              // TODO: reconsider this if we add `start` and `end` methods.
              if (this._justifyContent === 'flex-start') {
                parentStyles.justifyContent = 'flex-end';
              } else if (this._justifyContent === 'flex-end') {
                parentStyles.justifyContent = 'flex-start';
              }
            } else {
              parentStyles.justifyContent = this._justifyContent;
            }

            parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;
          }
          /**
           * Cleans up the DOM changes from the position strategy.
           * \@docs-private
           * @return {?}
           */

        }, {
          key: "dispose",
          value: function dispose() {
            if (this._isDisposed || !this._overlayRef) {
              return;
            }
            /** @type {?} */


            var styles = this._overlayRef.overlayElement.style;
            /** @type {?} */

            var parent = this._overlayRef.hostElement;
            /** @type {?} */

            var parentStyles = parent.style;
            parent.classList.remove(wrapperClass);
            parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop = styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';
            this._overlayRef =
            /** @type {?} */
            null;
            this._isDisposed = true;
          }
        }]);

        return _GlobalPositionStrategy;
      }();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/overlay/position/overlay-position-builder.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Builder for overlay position strategy.
       */


      var _OverlayPositionBuilder = /*#__PURE__*/function () {
        /**
         * @param {?} _viewportRuler
         * @param {?} _document
         * @param {?} _platform
         * @param {?} _overlayContainer
         */
        function _OverlayPositionBuilder(_viewportRuler, _document, _platform, _overlayContainer) {
          _classCallCheck(this, _OverlayPositionBuilder);

          this._viewportRuler = _viewportRuler;
          this._document = _document;
          this._platform = _platform;
          this._overlayContainer = _overlayContainer;
        }
        /**
         * Creates a global position strategy.
         * @return {?}
         */


        _createClass(_OverlayPositionBuilder, [{
          key: "global",
          value: function global() {
            return new _GlobalPositionStrategy();
          }
          /**
           * Creates a relative position strategy.
           * @deprecated Use `flexibleConnectedTo` instead.
           * \@breaking-change 8.0.0
           * @param {?} elementRef
           * @param {?} originPos
           * @param {?} overlayPos
           * @return {?}
           */

        }, {
          key: "connectedTo",
          value: function connectedTo(elementRef, originPos, overlayPos) {
            return new _ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler, this._document, this._platform, this._overlayContainer);
          }
          /**
           * Creates a flexible position strategy.
           * @param {?} origin Origin relative to which to position the overlay.
           * @return {?}
           */

        }, {
          key: "flexibleConnectedTo",
          value: function flexibleConnectedTo(origin) {
            return new _FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);
          }
        }]);

        return _OverlayPositionBuilder;
      }();

      _OverlayPositionBuilder.ɵfac = function OverlayPositionBuilder_Factory(t) {
        return new (t || _OverlayPositionBuilder)(_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"](_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_0__.ViewportRuler), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_3__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__.Platform), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"](_OverlayContainer));
      };
      /** @nocollapse */


      _OverlayPositionBuilder.ctorParameters = function () {
        return [{
          type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_0__.ViewportRuler
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Inject,
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_3__.DOCUMENT]
          }]
        }, {
          type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__.Platform
        }, {
          type: _OverlayContainer
        }];
      };
      /** @nocollapse */


      _OverlayPositionBuilder.ɵprov = (0, _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineInjectable"])({
        factory: function OverlayPositionBuilder_Factory() {
          return new _OverlayPositionBuilder((0, _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"])(_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_0__.ViewportRuler), (0, _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_3__.DOCUMENT), (0, _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"])(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__.Platform), (0, _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"])(_OverlayContainer));
        },
        token: _OverlayPositionBuilder,
        providedIn: "root"
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵsetClassMetadata"](_OverlayPositionBuilder, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Injectable,
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [{
            type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_0__.ViewportRuler
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Inject,
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_3__.DOCUMENT]
            }]
          }, {
            type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__.Platform
          }, {
            type: _OverlayContainer
          }];
        }, null);
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/overlay/overlay.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Next overlay unique ID.
       * @type {?}
       */


      var nextUniqueId = 0; // Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver
      // which needs to be different depending on where OverlayModule is imported.

      /**
       * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be
       * used as a low-level building block for other components. Dialogs, tooltips, menus,
       * selects, etc. can all be built using overlays. The service should primarily be used by authors
       * of re-usable components rather than developers building end-user applications.
       *
       * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.
       */

      var _Overlay = /*#__PURE__*/function () {
        /**
         * @param {?} scrollStrategies
         * @param {?} _overlayContainer
         * @param {?} _componentFactoryResolver
         * @param {?} _positionBuilder
         * @param {?} _keyboardDispatcher
         * @param {?} _injector
         * @param {?} _ngZone
         * @param {?} _document
         * @param {?} _directionality
         * @param {?=} _location
         */
        function _Overlay(scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location) {
          _classCallCheck(this, _Overlay);

          this.scrollStrategies = scrollStrategies;
          this._overlayContainer = _overlayContainer;
          this._componentFactoryResolver = _componentFactoryResolver;
          this._positionBuilder = _positionBuilder;
          this._keyboardDispatcher = _keyboardDispatcher;
          this._injector = _injector;
          this._ngZone = _ngZone;
          this._document = _document;
          this._directionality = _directionality;
          this._location = _location;
        }
        /**
         * Creates an overlay.
         * @param {?=} config Configuration applied to the overlay.
         * @return {?} Reference to the created overlay.
         */


        _createClass(_Overlay, [{
          key: "create",
          value: function create(config) {
            /** @type {?} */
            var host = this._createHostElement();
            /** @type {?} */


            var pane = this._createPaneElement(host);
            /** @type {?} */


            var portalOutlet = this._createPortalOutlet(pane);
            /** @type {?} */


            var overlayConfig = new _OverlayConfig(config);
            overlayConfig.direction = overlayConfig.direction || this._directionality.value;
            return new _OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location);
          }
          /**
           * Gets a position builder that can be used, via fluent API,
           * to construct and configure a position strategy.
           * @return {?} An overlay position builder.
           */

        }, {
          key: "position",
          value: function position() {
            return this._positionBuilder;
          }
          /**
           * Creates the DOM element for an overlay and appends it to the overlay container.
           * @private
           * @param {?} host
           * @return {?} Newly-created pane element
           */

        }, {
          key: "_createPaneElement",
          value: function _createPaneElement(host) {
            /** @type {?} */
            var pane = this._document.createElement('div');

            pane.id = "cdk-overlay-".concat(nextUniqueId++);
            pane.classList.add('cdk-overlay-pane');
            host.appendChild(pane);
            return pane;
          }
          /**
           * Creates the host element that wraps around an overlay
           * and can be used for advanced positioning.
           * @private
           * @return {?} Newly-create host element.
           */

        }, {
          key: "_createHostElement",
          value: function _createHostElement() {
            /** @type {?} */
            var host = this._document.createElement('div');

            this._overlayContainer.getContainerElement().appendChild(host);

            return host;
          }
          /**
           * Create a DomPortalOutlet into which the overlay content can be loaded.
           * @private
           * @param {?} pane The DOM element to turn into a portal outlet.
           * @return {?} A portal outlet for the given DOM element.
           */

        }, {
          key: "_createPortalOutlet",
          value: function _createPortalOutlet(pane) {
            // We have to resolve the ApplicationRef later in order to allow people
            // to use overlay-based providers during app initialization.
            if (!this._appRef) {
              this._appRef = this._injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_2__.ApplicationRef);
            }

            return new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_10__.DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);
          }
        }]);

        return _Overlay;
      }();

      _Overlay.ɵfac = function Overlay_Factory(t) {
        return new (t || _Overlay)(_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"](_ScrollStrategyOptions), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"](_OverlayContainer), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_2__.ComponentFactoryResolver), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"](_OverlayPositionBuilder), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"](_OverlayKeyboardDispatcher), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_2__.Injector), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_2__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_3__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"](_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_11__.Directionality), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_3__.Location, 8));
      };

      _Overlay.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineInjectable"]({
        token: _Overlay,
        factory: _Overlay.ɵfac
      });
      /** @nocollapse */

      _Overlay.ctorParameters = function () {
        return [{
          type: _ScrollStrategyOptions
        }, {
          type: _OverlayContainer
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.ComponentFactoryResolver
        }, {
          type: _OverlayPositionBuilder
        }, {
          type: _OverlayKeyboardDispatcher
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Injector
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.NgZone
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Inject,
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_3__.DOCUMENT]
          }]
        }, {
          type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_11__.Directionality
        }, {
          type: _angular_common__WEBPACK_IMPORTED_MODULE_3__.Location,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Optional
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵsetClassMetadata"](_Overlay, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Injectable
        }], function () {
          return [{
            type: _ScrollStrategyOptions
          }, {
            type: _OverlayContainer
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.ComponentFactoryResolver
          }, {
            type: _OverlayPositionBuilder
          }, {
            type: _OverlayKeyboardDispatcher
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Injector
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.NgZone
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Inject,
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_3__.DOCUMENT]
            }]
          }, {
            type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_11__.Directionality
          }, {
            type: _angular_common__WEBPACK_IMPORTED_MODULE_3__.Location,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Optional
            }]
          }];
        }, null);
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/overlay/overlay-directives.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Default set of positions for the overlay. Follows the behavior of a dropdown.
       * @type {?}
       */


      var defaultPositionList = [{
        originX: 'start',
        originY: 'bottom',
        overlayX: 'start',
        overlayY: 'top'
      }, {
        originX: 'start',
        originY: 'top',
        overlayX: 'start',
        overlayY: 'bottom'
      }, {
        originX: 'end',
        originY: 'top',
        overlayX: 'end',
        overlayY: 'bottom'
      }, {
        originX: 'end',
        originY: 'bottom',
        overlayX: 'end',
        overlayY: 'top'
      }];
      /**
       * Injection token that determines the scroll handling while the connected overlay is open.
       * @type {?}
       */

      var CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.InjectionToken('cdk-connected-overlay-scroll-strategy');
      /**
       * \@docs-private \@deprecated \@breaking-change 8.0.0
       * @param {?} overlay
       * @return {?}
       */

      function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_FACTORY(overlay) {
        return (
          /**
          * @param {?=} config
          * @return {?}
          */
          function (config) {
            return overlay.scrollStrategies.reposition(config);
          }
        );
      }
      /**
       * Directive applied to an element to make it usable as an origin for an Overlay using a
       * ConnectedPositionStrategy.
       */


      var _CdkOverlayOrigin =
      /**
       * @param {?} elementRef
       */
      function _CdkOverlayOrigin(elementRef) {
        _classCallCheck(this, _CdkOverlayOrigin);

        this.elementRef = elementRef;
      };

      _CdkOverlayOrigin.ɵfac = function CdkOverlayOrigin_Factory(t) {
        return new (t || _CdkOverlayOrigin)(_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_2__.ElementRef));
      };

      _CdkOverlayOrigin.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineDirective"]({
        type: _CdkOverlayOrigin,
        selectors: [["", "cdk-overlay-origin", ""], ["", "overlay-origin", ""], ["", "cdkOverlayOrigin", ""]],
        exportAs: ["cdkOverlayOrigin"]
      });
      /** @nocollapse */

      _CdkOverlayOrigin.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.ElementRef
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵsetClassMetadata"](_CdkOverlayOrigin, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Directive,
          args: [{
            selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',
            exportAs: 'cdkOverlayOrigin'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.ElementRef
          }];
        }, null);
      })();

      if (false) {}
      /**
       * Directive to facilitate declarative creation of an
       * Overlay using a FlexibleConnectedPositionStrategy.
       */


      var _CdkConnectedOverlay = /*#__PURE__*/function () {
        // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.

        /**
         * @param {?} _overlay
         * @param {?} templateRef
         * @param {?} viewContainerRef
         * @param {?} scrollStrategyFactory
         * @param {?} _dir
         */
        function _CdkConnectedOverlay(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {
          _classCallCheck(this, _CdkConnectedOverlay);

          this._overlay = _overlay;
          this._dir = _dir;
          this._hasBackdrop = false;
          this._lockPosition = false;
          this._growAfterOpen = false;
          this._flexibleDimensions = false;
          this._push = false;
          this._backdropSubscription = rxjs__WEBPACK_IMPORTED_MODULE_6__.Subscription.EMPTY;
          /**
           * Margin between the overlay and the viewport edges.
           */

          this.viewportMargin = 0;
          /**
           * Whether the overlay is open.
           */

          this.open = false;
          /**
           * Event emitted when the backdrop is clicked.
           */

          this.backdropClick = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
          /**
           * Event emitted when the position has changed.
           */

          this.positionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
          /**
           * Event emitted when the overlay has been attached.
           */

          this.attach = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
          /**
           * Event emitted when the overlay has been detached.
           */

          this.detach = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
          /**
           * Emits when there are keyboard events that are targeted at the overlay.
           */

          this.overlayKeydown = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
          this._templatePortal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_10__.TemplatePortal(templateRef, viewContainerRef);
          this._scrollStrategyFactory = scrollStrategyFactory;
          this.scrollStrategy = this._scrollStrategyFactory();
        }
        /**
         * The offset in pixels for the overlay connection point on the x-axis
         * @return {?}
         */


        _createClass(_CdkConnectedOverlay, [{
          key: "offsetX",
          get: function get() {
            return this._offsetX;
          }
          /**
           * @param {?} offsetX
           * @return {?}
           */
          ,
          set: function set(offsetX) {
            this._offsetX = offsetX;

            if (this._position) {
              this._updatePositionStrategy(this._position);
            }
          }
          /**
           * The offset in pixels for the overlay connection point on the y-axis
           * @return {?}
           */

        }, {
          key: "offsetY",
          get: function get() {
            return this._offsetY;
          }
          /**
           * @param {?} offsetY
           * @return {?}
           */
          ,
          set: function set(offsetY) {
            this._offsetY = offsetY;

            if (this._position) {
              this._updatePositionStrategy(this._position);
            }
          }
          /**
           * Whether or not the overlay should attach a backdrop.
           * @return {?}
           */

        }, {
          key: "hasBackdrop",
          get: function get() {
            return this._hasBackdrop;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._hasBackdrop = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceBooleanProperty)(value);
          }
          /**
           * Whether or not the overlay should be locked when scrolling.
           * @return {?}
           */

        }, {
          key: "lockPosition",
          get: function get() {
            return this._lockPosition;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._lockPosition = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceBooleanProperty)(value);
          }
          /**
           * Whether the overlay's width and height can be constrained to fit within the viewport.
           * @return {?}
           */

        }, {
          key: "flexibleDimensions",
          get: function get() {
            return this._flexibleDimensions;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._flexibleDimensions = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceBooleanProperty)(value);
          }
          /**
           * Whether the overlay can grow after the initial open when flexible positioning is turned on.
           * @return {?}
           */

        }, {
          key: "growAfterOpen",
          get: function get() {
            return this._growAfterOpen;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._growAfterOpen = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceBooleanProperty)(value);
          }
          /**
           * Whether the overlay can be pushed on-screen if none of the provided positions fit.
           * @return {?}
           */

        }, {
          key: "push",
          get: function get() {
            return this._push;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._push = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceBooleanProperty)(value);
          }
          /**
           * The associated overlay reference.
           * @return {?}
           */

        }, {
          key: "overlayRef",
          get: function get() {
            return this._overlayRef;
          }
          /**
           * The element's layout direction.
           * @return {?}
           */

        }, {
          key: "dir",
          get: function get() {
            return this._dir ? this._dir.value : 'ltr';
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            if (this._overlayRef) {
              this._overlayRef.dispose();
            }

            this._backdropSubscription.unsubscribe();
          }
          /**
           * @param {?} changes
           * @return {?}
           */

        }, {
          key: "ngOnChanges",
          value: function ngOnChanges(changes) {
            if (this._position) {
              this._updatePositionStrategy(this._position);

              this._overlayRef.updateSize({
                width: this.width,
                minWidth: this.minWidth,
                height: this.height,
                minHeight: this.minHeight
              });

              if (changes['origin'] && this.open) {
                this._position.apply();
              }
            }

            if (changes['open']) {
              this.open ? this._attachOverlay() : this._detachOverlay();
            }
          }
          /**
           * Creates an overlay
           * @private
           * @return {?}
           */

        }, {
          key: "_createOverlay",
          value: function _createOverlay() {
            var _this44 = this;

            if (!this.positions || !this.positions.length) {
              this.positions = defaultPositionList;
            }

            this._overlayRef = this._overlay.create(this._buildConfig());

            this._overlayRef.keydownEvents().subscribe(
            /**
            * @param {?} event
            * @return {?}
            */
            function (event) {
              _this44.overlayKeydown.next(event);

              if (event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__.ESCAPE && !(0, _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__.hasModifierKey)(event)) {
                event.preventDefault();

                _this44._detachOverlay();
              }
            });
          }
          /**
           * Builds the overlay config based on the directive's inputs
           * @private
           * @return {?}
           */

        }, {
          key: "_buildConfig",
          value: function _buildConfig() {
            /** @type {?} */
            var positionStrategy = this._position = this.positionStrategy || this._createPositionStrategy();
            /** @type {?} */


            var overlayConfig = new _OverlayConfig({
              direction: this._dir,
              positionStrategy: positionStrategy,
              scrollStrategy: this.scrollStrategy,
              hasBackdrop: this.hasBackdrop
            });

            if (this.width || this.width === 0) {
              overlayConfig.width = this.width;
            }

            if (this.height || this.height === 0) {
              overlayConfig.height = this.height;
            }

            if (this.minWidth || this.minWidth === 0) {
              overlayConfig.minWidth = this.minWidth;
            }

            if (this.minHeight || this.minHeight === 0) {
              overlayConfig.minHeight = this.minHeight;
            }

            if (this.backdropClass) {
              overlayConfig.backdropClass = this.backdropClass;
            }

            if (this.panelClass) {
              overlayConfig.panelClass = this.panelClass;
            }

            return overlayConfig;
          }
          /**
           * Updates the state of a position strategy, based on the values of the directive inputs.
           * @private
           * @param {?} positionStrategy
           * @return {?}
           */

        }, {
          key: "_updatePositionStrategy",
          value: function _updatePositionStrategy(positionStrategy) {
            var _this45 = this;

            /** @type {?} */
            var positions = this.positions.map(
            /**
            * @param {?} currentPosition
            * @return {?}
            */
            function (currentPosition) {
              return {
                originX: currentPosition.originX,
                originY: currentPosition.originY,
                overlayX: currentPosition.overlayX,
                overlayY: currentPosition.overlayY,
                offsetX: currentPosition.offsetX || _this45.offsetX,
                offsetY: currentPosition.offsetY || _this45.offsetY,
                panelClass: currentPosition.panelClass || undefined
              };
            });
            return positionStrategy.setOrigin(this.origin.elementRef).withPositions(positions).withFlexibleDimensions(this.flexibleDimensions).withPush(this.push).withGrowAfterOpen(this.growAfterOpen).withViewportMargin(this.viewportMargin).withLockedPosition(this.lockPosition).withTransformOriginOn(this.transformOriginSelector);
          }
          /**
           * Returns the position strategy of the overlay to be set on the overlay config
           * @private
           * @return {?}
           */

        }, {
          key: "_createPositionStrategy",
          value: function _createPositionStrategy() {
            var _this46 = this;

            /** @type {?} */
            var strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);

            this._updatePositionStrategy(strategy);

            strategy.positionChanges.subscribe(
            /**
            * @param {?} p
            * @return {?}
            */
            function (p) {
              return _this46.positionChange.emit(p);
            });
            return strategy;
          }
          /**
           * Attaches the overlay and subscribes to backdrop clicks if backdrop exists
           * @private
           * @return {?}
           */

        }, {
          key: "_attachOverlay",
          value: function _attachOverlay() {
            var _this47 = this;

            if (!this._overlayRef) {
              this._createOverlay();
            } else {
              // Update the overlay size, in case the directive's inputs have changed
              this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;
            }

            if (!this._overlayRef.hasAttached()) {
              this._overlayRef.attach(this._templatePortal);

              this.attach.emit();
            }

            if (this.hasBackdrop) {
              this._backdropSubscription = this._overlayRef.backdropClick().subscribe(
              /**
              * @param {?} event
              * @return {?}
              */
              function (event) {
                _this47.backdropClick.emit(event);
              });
            } else {
              this._backdropSubscription.unsubscribe();
            }
          }
          /**
           * Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists
           * @private
           * @return {?}
           */

        }, {
          key: "_detachOverlay",
          value: function _detachOverlay() {
            if (this._overlayRef) {
              this._overlayRef.detach();

              this.detach.emit();
            }

            this._backdropSubscription.unsubscribe();
          }
        }]);

        return _CdkConnectedOverlay;
      }();

      _CdkConnectedOverlay.ɵfac = function CdkConnectedOverlay_Factory(t) {
        return new (t || _CdkConnectedOverlay)(_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_Overlay), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_2__.TemplateRef), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_2__.ViewContainerRef), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_11__.Directionality, 8));
      };

      _CdkConnectedOverlay.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineDirective"]({
        type: _CdkConnectedOverlay,
        selectors: [["", "cdk-connected-overlay", ""], ["", "connected-overlay", ""], ["", "cdkConnectedOverlay", ""]],
        inputs: {
          viewportMargin: ["cdkConnectedOverlayViewportMargin", "viewportMargin"],
          open: ["cdkConnectedOverlayOpen", "open"],
          scrollStrategy: ["cdkConnectedOverlayScrollStrategy", "scrollStrategy"],
          offsetX: ["cdkConnectedOverlayOffsetX", "offsetX"],
          offsetY: ["cdkConnectedOverlayOffsetY", "offsetY"],
          hasBackdrop: ["cdkConnectedOverlayHasBackdrop", "hasBackdrop"],
          lockPosition: ["cdkConnectedOverlayLockPosition", "lockPosition"],
          flexibleDimensions: ["cdkConnectedOverlayFlexibleDimensions", "flexibleDimensions"],
          growAfterOpen: ["cdkConnectedOverlayGrowAfterOpen", "growAfterOpen"],
          push: ["cdkConnectedOverlayPush", "push"],
          positions: ["cdkConnectedOverlayPositions", "positions"],
          origin: ["cdkConnectedOverlayOrigin", "origin"],
          positionStrategy: ["cdkConnectedOverlayPositionStrategy", "positionStrategy"],
          width: ["cdkConnectedOverlayWidth", "width"],
          height: ["cdkConnectedOverlayHeight", "height"],
          minWidth: ["cdkConnectedOverlayMinWidth", "minWidth"],
          minHeight: ["cdkConnectedOverlayMinHeight", "minHeight"],
          backdropClass: ["cdkConnectedOverlayBackdropClass", "backdropClass"],
          panelClass: ["cdkConnectedOverlayPanelClass", "panelClass"],
          transformOriginSelector: ["cdkConnectedOverlayTransformOriginOn", "transformOriginSelector"]
        },
        outputs: {
          backdropClick: "backdropClick",
          positionChange: "positionChange",
          attach: "attach",
          detach: "detach",
          overlayKeydown: "overlayKeydown"
        },
        exportAs: ["cdkConnectedOverlay"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵNgOnChangesFeature"]]
      });
      /** @nocollapse */

      _CdkConnectedOverlay.ctorParameters = function () {
        return [{
          type: _Overlay
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.TemplateRef
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.ViewContainerRef
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Inject,
            args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]
          }]
        }, {
          type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_11__.Directionality,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Optional
          }]
        }];
      };

      _CdkConnectedOverlay.propDecorators = {
        origin: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input,
          args: ['cdkConnectedOverlayOrigin']
        }],
        positions: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input,
          args: ['cdkConnectedOverlayPositions']
        }],
        positionStrategy: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input,
          args: ['cdkConnectedOverlayPositionStrategy']
        }],
        offsetX: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input,
          args: ['cdkConnectedOverlayOffsetX']
        }],
        offsetY: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input,
          args: ['cdkConnectedOverlayOffsetY']
        }],
        width: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input,
          args: ['cdkConnectedOverlayWidth']
        }],
        height: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input,
          args: ['cdkConnectedOverlayHeight']
        }],
        minWidth: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input,
          args: ['cdkConnectedOverlayMinWidth']
        }],
        minHeight: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input,
          args: ['cdkConnectedOverlayMinHeight']
        }],
        backdropClass: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input,
          args: ['cdkConnectedOverlayBackdropClass']
        }],
        panelClass: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input,
          args: ['cdkConnectedOverlayPanelClass']
        }],
        viewportMargin: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input,
          args: ['cdkConnectedOverlayViewportMargin']
        }],
        scrollStrategy: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input,
          args: ['cdkConnectedOverlayScrollStrategy']
        }],
        open: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input,
          args: ['cdkConnectedOverlayOpen']
        }],
        transformOriginSelector: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input,
          args: ['cdkConnectedOverlayTransformOriginOn']
        }],
        hasBackdrop: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input,
          args: ['cdkConnectedOverlayHasBackdrop']
        }],
        lockPosition: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input,
          args: ['cdkConnectedOverlayLockPosition']
        }],
        flexibleDimensions: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input,
          args: ['cdkConnectedOverlayFlexibleDimensions']
        }],
        growAfterOpen: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input,
          args: ['cdkConnectedOverlayGrowAfterOpen']
        }],
        push: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input,
          args: ['cdkConnectedOverlayPush']
        }],
        backdropClick: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
        }],
        positionChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
        }],
        attach: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
        }],
        detach: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
        }],
        overlayKeydown: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵsetClassMetadata"](_CdkConnectedOverlay, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Directive,
          args: [{
            selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',
            exportAs: 'cdkConnectedOverlay'
          }]
        }], function () {
          return [{
            type: _Overlay
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.TemplateRef
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.ViewContainerRef
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Inject,
              args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]
            }]
          }, {
            type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_11__.Directionality,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Optional
            }]
          }];
        }, {
          viewportMargin: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input,
            args: ['cdkConnectedOverlayViewportMargin']
          }],
          open: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input,
            args: ['cdkConnectedOverlayOpen']
          }],
          backdropClick: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
          }],
          positionChange: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
          }],
          attach: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
          }],
          detach: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
          }],
          overlayKeydown: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
          }],
          scrollStrategy: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input,
            args: ['cdkConnectedOverlayScrollStrategy']
          }],
          offsetX: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input,
            args: ['cdkConnectedOverlayOffsetX']
          }],
          offsetY: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input,
            args: ['cdkConnectedOverlayOffsetY']
          }],
          hasBackdrop: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input,
            args: ['cdkConnectedOverlayHasBackdrop']
          }],
          lockPosition: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input,
            args: ['cdkConnectedOverlayLockPosition']
          }],
          flexibleDimensions: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input,
            args: ['cdkConnectedOverlayFlexibleDimensions']
          }],
          growAfterOpen: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input,
            args: ['cdkConnectedOverlayGrowAfterOpen']
          }],
          push: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input,
            args: ['cdkConnectedOverlayPush']
          }],
          positions: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input,
            args: ['cdkConnectedOverlayPositions']
          }],
          origin: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input,
            args: ['cdkConnectedOverlayOrigin']
          }],
          positionStrategy: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input,
            args: ['cdkConnectedOverlayPositionStrategy']
          }],
          width: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input,
            args: ['cdkConnectedOverlayWidth']
          }],
          height: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input,
            args: ['cdkConnectedOverlayHeight']
          }],
          minWidth: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input,
            args: ['cdkConnectedOverlayMinWidth']
          }],
          minHeight: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input,
            args: ['cdkConnectedOverlayMinHeight']
          }],
          backdropClass: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input,
            args: ['cdkConnectedOverlayBackdropClass']
          }],
          panelClass: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input,
            args: ['cdkConnectedOverlayPanelClass']
          }],
          transformOriginSelector: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input,
            args: ['cdkConnectedOverlayTransformOriginOn']
          }]
        });
      })();

      if (false) {}
      /**
       * \@docs-private
       * @param {?} overlay
       * @return {?}
       */


      function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {
        return (
          /**
          * @return {?}
          */
          function () {
            return overlay.scrollStrategies.reposition();
          }
        );
      }
      /**
       * \@docs-private
       * @type {?}
       */


      var CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {
        provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,
        deps: [_Overlay],
        useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY
      };
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/overlay/overlay-module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      var _OverlayModule = function _OverlayModule() {
        _classCallCheck(this, _OverlayModule);
      };

      _OverlayModule.ɵfac = function OverlayModule_Factory(t) {
        return new (t || _OverlayModule)();
      };

      _OverlayModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineNgModule"]({
        type: _OverlayModule
      });
      _OverlayModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineInjector"]({
        providers: [_Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER],
        imports: [[_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_11__.BidiModule, _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_10__.PortalModule, _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_0__.ScrollingModule], _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_0__.ScrollingModule]
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵsetClassMetadata"](_OverlayModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.NgModule,
          args: [{
            imports: [_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_11__.BidiModule, _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_10__.PortalModule, _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_0__.ScrollingModule],
            exports: [_CdkConnectedOverlay, _CdkOverlayOrigin, _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_0__.ScrollingModule],
            declarations: [_CdkConnectedOverlay, _CdkOverlayOrigin],
            providers: [_Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER]
          }]
        }], null, null);
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵsetNgModuleScope"](_OverlayModule, {
          declarations: function declarations() {
            return [_CdkConnectedOverlay, _CdkOverlayOrigin];
          },
          imports: function imports() {
            return [_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_11__.BidiModule, _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_10__.PortalModule, _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_0__.ScrollingModule];
          },
          exports: function exports() {
            return [_CdkConnectedOverlay, _CdkOverlayOrigin, _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_0__.ScrollingModule];
          }
        });
      })();
      /**
       * @deprecated Use `OverlayModule` instead.
       * \@breaking-change 8.0.0
       * \@docs-private
       * @type {?}
       */


      var _OVERLAY_PROVIDERS = [_Overlay, _OverlayPositionBuilder, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER, OVERLAY_CONTAINER_PROVIDER, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER];
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/overlay/fullscreen-overlay-container.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Alternative to OverlayContainer that supports correct displaying of overlay elements in
       * Fullscreen mode
       * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen
       *
       * Should be provided in the root component.
       */

      var _FullscreenOverlayContainer = /*#__PURE__*/function (_OverlayContainer2) {
        _inherits(_FullscreenOverlayContainer, _OverlayContainer2);

        var _super5 = _createSuper(_FullscreenOverlayContainer);

        /**
         * @param {?} _document
         * @param {?=} platform
         */
        function _FullscreenOverlayContainer(_document,
        /**
         * @deprecated `platform` parameter to become required.
         * @breaking-change 10.0.0
         */
        platform) {
          _classCallCheck(this, _FullscreenOverlayContainer);

          return _super5.call(this, _document, platform);
        }
        /**
         * @return {?}
         */


        _createClass(_FullscreenOverlayContainer, [{
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            _get(_getPrototypeOf(_FullscreenOverlayContainer.prototype), "ngOnDestroy", this).call(this);

            if (this._fullScreenEventName && this._fullScreenListener) {
              this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);
            }
          }
          /**
           * @protected
           * @return {?}
           */

        }, {
          key: "_createContainer",
          value: function _createContainer() {
            var _this48 = this;

            _get(_getPrototypeOf(_FullscreenOverlayContainer.prototype), "_createContainer", this).call(this);

            this._adjustParentForFullscreenChange();

            this._addFullscreenChangeListener(
            /**
            * @return {?}
            */
            function () {
              return _this48._adjustParentForFullscreenChange();
            });
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "_adjustParentForFullscreenChange",
          value: function _adjustParentForFullscreenChange() {
            if (!this._containerElement) {
              return;
            }
            /** @type {?} */


            var fullscreenElement = this.getFullscreenElement();
            /** @type {?} */

            var parent = fullscreenElement || this._document.body;
            parent.appendChild(this._containerElement);
          }
          /**
           * @private
           * @param {?} fn
           * @return {?}
           */

        }, {
          key: "_addFullscreenChangeListener",
          value: function _addFullscreenChangeListener(fn) {
            /** @type {?} */
            var eventName = this._getEventName();

            if (eventName) {
              if (this._fullScreenListener) {
                this._document.removeEventListener(eventName, this._fullScreenListener);
              }

              this._document.addEventListener(eventName, fn);

              this._fullScreenListener = fn;
            }
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "_getEventName",
          value: function _getEventName() {
            if (!this._fullScreenEventName) {
              /** @type {?} */
              var _document =
              /** @type {?} */
              this._document;

              if (_document.fullscreenEnabled) {
                this._fullScreenEventName = 'fullscreenchange';
              } else if (_document.webkitFullscreenEnabled) {
                this._fullScreenEventName = 'webkitfullscreenchange';
              } else if (_document.mozFullScreenEnabled) {
                this._fullScreenEventName = 'mozfullscreenchange';
              } else if (_document.msFullscreenEnabled) {
                this._fullScreenEventName = 'MSFullscreenChange';
              }
            }

            return this._fullScreenEventName;
          }
          /**
           * When the page is put into fullscreen mode, a specific element is specified.
           * Only that element and its children are visible when in fullscreen mode.
           * @return {?}
           */

        }, {
          key: "getFullscreenElement",
          value: function getFullscreenElement() {
            /** @type {?} */
            var _document =
            /** @type {?} */
            this._document;
            return _document.fullscreenElement || _document.webkitFullscreenElement || _document.mozFullScreenElement || _document.msFullscreenElement || null;
          }
        }]);

        return _FullscreenOverlayContainer;
      }(_OverlayContainer);

      _FullscreenOverlayContainer.ɵfac = function FullscreenOverlayContainer_Factory(t) {
        return new (t || _FullscreenOverlayContainer)(_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_3__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__.Platform));
      };
      /** @nocollapse */


      _FullscreenOverlayContainer.ctorParameters = function () {
        return [{
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Inject,
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_3__.DOCUMENT]
          }]
        }, {
          type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__.Platform
        }];
      };
      /** @nocollapse */


      _FullscreenOverlayContainer.ɵprov = (0, _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineInjectable"])({
        factory: function FullscreenOverlayContainer_Factory() {
          return new _FullscreenOverlayContainer((0, _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_3__.DOCUMENT), (0, _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"])(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__.Platform));
        },
        token: _FullscreenOverlayContainer,
        providedIn: "root"
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵsetClassMetadata"](_FullscreenOverlayContainer, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Injectable,
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [{
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Inject,
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_3__.DOCUMENT]
            }]
          }, {
            type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__.Platform
          }];
        }, null);
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/overlay/public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Generated bundle index. Do not edit.
       */

      /***/

    },

    /***/
    36145:
    /*!*********************************************************************!*\
      !*** ./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/platform.js ***!
      \*********************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "Platform": function Platform() {
          return (
            /* binding */
            _Platform
          );
        },

        /* harmony export */
        "PlatformModule": function PlatformModule() {
          return (
            /* binding */
            _PlatformModule
          );
        },

        /* harmony export */
        "_getShadowRoot": function _getShadowRoot() {
          return (
            /* binding */
            _getShadowRoot2
          );
        },

        /* harmony export */
        "_supportsShadowDom": function _supportsShadowDom() {
          return (
            /* binding */
            _supportsShadowDom2
          );
        },

        /* harmony export */
        "getRtlScrollAxisType": function getRtlScrollAxisType() {
          return (
            /* binding */
            _getRtlScrollAxisType
          );
        },

        /* harmony export */
        "getSupportedInputTypes": function getSupportedInputTypes() {
          return (
            /* binding */
            _getSupportedInputTypes
          );
        },

        /* harmony export */
        "normalizePassiveListenerOptions": function normalizePassiveListenerOptions() {
          return (
            /* binding */
            _normalizePassiveListenerOptions
          );
        },

        /* harmony export */
        "supportsPassiveEventListeners": function supportsPassiveEventListeners() {
          return (
            /* binding */
            _supportsPassiveEventListeners
          );
        },

        /* harmony export */
        "supportsScrollBehavior": function supportsScrollBehavior() {
          return (
            /* binding */
            _supportsScrollBehavior
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      2316);
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/common */
      54364);
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/platform/platform.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      // Whether the current platform supports the V8 Break Iterator. The V8 check
      // is necessary to detect all Blink based browsers.

      /** @type {?} */


      var hasV8BreakIterator; // We need a try/catch around the reference to `Intl`, because accessing it in some cases can
      // cause IE to throw. These cases are tied to particular versions of Windows and can happen if
      // the consumer is providing a polyfilled `Map`. See:
      // https://github.com/Microsoft/ChakraCore/issues/3189
      // https://github.com/angular/components/issues/15687

      try {
        hasV8BreakIterator = typeof Intl !== 'undefined' &&
        /** @type {?} */
        Intl.v8BreakIterator;
      } catch (_a) {
        hasV8BreakIterator = false;
      }
      /**
       * Service to detect the current platform by comparing the userAgent strings and
       * checking browser-specific global properties.
       */


      var _Platform =
      /**
       * \@breaking-change 8.0.0 remove optional decorator
       * @param {?=} _platformId
       */
      function _Platform(_platformId) {
        _classCallCheck(this, _Platform);

        this._platformId = _platformId; // We want to use the Angular platform check because if the Document is shimmed
        // without the navigator, the following checks will fail. This is preferred because
        // sometimes the Document may be shimmed without the user's knowledge or intention

        /**
         * Whether the Angular application is being rendered in the browser.
         */

        this.isBrowser = this._platformId ? (0, _angular_common__WEBPACK_IMPORTED_MODULE_0__.isPlatformBrowser)(this._platformId) : typeof document === 'object' && !!document;
        /**
         * Whether the current browser is Microsoft Edge.
         */

        this.EDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent);
        /**
         * Whether the current rendering engine is Microsoft Trident.
         */

        this.TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent); // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.

        /**
         * Whether the current rendering engine is Blink.
         */

        this.BLINK = this.isBrowser && !!(
        /** @type {?} */
        window.chrome || hasV8BreakIterator) && typeof CSS !== 'undefined' && !this.EDGE && !this.TRIDENT; // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to
        // ensure that Webkit runs standalone and is not used as another engine's base.

        /**
         * Whether the current rendering engine is WebKit.
         */

        this.WEBKIT = this.isBrowser && /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;
        /**
         * Whether the current platform is Apple iOS.
         */

        this.IOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) && !('MSStream' in window); // It's difficult to detect the plain Gecko engine, because most of the browsers identify
        // them self as Gecko-like browsers and modify the userAgent's according to that.
        // Since we only cover one explicit Firefox case, we can simply check for Firefox
        // instead of having an unstable check for Gecko.

        /**
         * Whether the current browser is Firefox.
         */

        this.FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);
        /**
         * Whether the current platform is Android.
         */
        // Trident on mobile adds the android platform to the userAgent to trick detections.

        this.ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT; // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake
        // this and just place the Safari keyword in the userAgent. To be more safe about Safari every
        // Safari browser should also use Webkit as its layout engine.

        /**
         * Whether the current browser is Safari.
         */

        this.SAFARI = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;
      };

      _Platform.ɵfac = function Platform_Factory(t) {
        return new (t || _Platform)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__.PLATFORM_ID, 8));
      };
      /** @nocollapse */


      _Platform.ctorParameters = function () {
        return [{
          type: Object,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
            args: [_angular_core__WEBPACK_IMPORTED_MODULE_1__.PLATFORM_ID]
          }]
        }];
      };
      /** @nocollapse */


      _Platform.ɵprov = (0, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: function Platform_Factory() {
          return new _Platform((0, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_1__.PLATFORM_ID, 8));
        },
        token: _Platform,
        providedIn: "root"
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](_Platform, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable,
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [{
            type: Object,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
              args: [_angular_core__WEBPACK_IMPORTED_MODULE_1__.PLATFORM_ID]
            }]
          }];
        }, null);
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/platform/platform-module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var _PlatformModule = function _PlatformModule() {
        _classCallCheck(this, _PlatformModule);
      };

      _PlatformModule.ɵfac = function PlatformModule_Factory(t) {
        return new (t || _PlatformModule)();
      };

      _PlatformModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
        type: _PlatformModule
      });
      _PlatformModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({});

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](_PlatformModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.NgModule,
          args: [{}]
        }], null, null);
      })();
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/platform/features/input-types.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Cached result Set of input types support by the current browser.
       * @type {?}
       */


      var supportedInputTypes;
      /**
       * Types of `<input>` that *might* be supported.
       * @type {?}
       */

      var candidateInputTypes = [// `color` must come first. Chrome 56 shows a warning if we change the type to `color` after
      // first changing it to something else:
      // The specified value "" does not conform to the required format.
      // The format is "#rrggbb" where rr, gg, bb are two-digit hexadecimal numbers.
      'color', 'button', 'checkbox', 'date', 'datetime-local', 'email', 'file', 'hidden', 'image', 'month', 'number', 'password', 'radio', 'range', 'reset', 'search', 'submit', 'tel', 'text', 'time', 'url', 'week'];
      /**
       * @return {?} The input types supported by this browser.
       */

      function _getSupportedInputTypes() {
        // Result is cached.
        if (supportedInputTypes) {
          return supportedInputTypes;
        } // We can't check if an input type is not supported until we're on the browser, so say that
        // everything is supported when not on the browser. We don't use `Platform` here since it's
        // just a helper function and can't inject it.


        if (typeof document !== 'object' || !document) {
          supportedInputTypes = new Set(candidateInputTypes);
          return supportedInputTypes;
        }
        /** @type {?} */


        var featureTestInput = document.createElement('input');
        supportedInputTypes = new Set(candidateInputTypes.filter(
        /**
        * @param {?} value
        * @return {?}
        */
        function (value) {
          featureTestInput.setAttribute('type', value);
          return featureTestInput.type === value;
        }));
        return supportedInputTypes;
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/platform/features/passive-listeners.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Cached result of whether the user's browser supports passive event listeners.
       * @type {?}
       */


      var supportsPassiveEvents;
      /**
       * Checks whether the user's browser supports passive event listeners.
       * See: https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md
       * @return {?}
       */

      function _supportsPassiveEventListeners() {
        if (supportsPassiveEvents == null && typeof window !== 'undefined') {
          try {
            window.addEventListener('test',
            /** @type {?} */
            null, Object.defineProperty({}, 'passive', {
              get:
              /**
              * @return {?}
              */
              function get() {
                return supportsPassiveEvents = true;
              }
            }));
          } finally {
            supportsPassiveEvents = supportsPassiveEvents || false;
          }
        }

        return supportsPassiveEvents;
      }
      /**
       * Normalizes an `AddEventListener` object to something that can be passed
       * to `addEventListener` on any browser, no matter whether it supports the
       * `options` parameter.
       * @param {?} options Object to be normalized.
       * @return {?}
       */


      function _normalizePassiveListenerOptions(options) {
        return _supportsPassiveEventListeners() ? options : !!options.capture;
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/platform/features/scrolling.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** @enum {number} */


      var RtlScrollAxisType = {
        /**
         * scrollLeft is 0 when scrolled all the way left and (scrollWidth - clientWidth) when scrolled
         * all the way right.
         */
        NORMAL: 0,

        /**
         * scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and 0 when scrolled
         * all the way right.
         */
        NEGATED: 1,

        /**
         * scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and 0 when scrolled
         * all the way right.
         */
        INVERTED: 2
      };
      /**
       * Cached result of the way the browser handles the horizontal scroll axis in RTL mode.
       * @type {?}
       */

      var rtlScrollAxisType;
      /**
       * Check whether the browser supports scroll behaviors.
       * @return {?}
       */

      function _supportsScrollBehavior() {
        return !!(typeof document == 'object' && 'scrollBehavior' in
        /** @type {?} */
        document.documentElement.style);
      }
      /**
       * Checks the type of RTL scroll axis used by this browser. As of time of writing, Chrome is NORMAL,
       * Firefox & Safari are NEGATED, and IE & Edge are INVERTED.
       * @return {?}
       */


      function _getRtlScrollAxisType() {
        // We can't check unless we're on the browser. Just assume 'normal' if we're not.
        if (typeof document !== 'object' || !document) {
          return 0
          /* NORMAL */
          ;
        }

        if (rtlScrollAxisType == null) {
          // Create a 1px wide scrolling container and a 2px wide content element.

          /** @type {?} */
          var scrollContainer = document.createElement('div');
          /** @type {?} */

          var containerStyle = scrollContainer.style;
          scrollContainer.dir = 'rtl';
          containerStyle.height = '1px';
          containerStyle.width = '1px';
          containerStyle.overflow = 'auto';
          containerStyle.visibility = 'hidden';
          containerStyle.pointerEvents = 'none';
          containerStyle.position = 'absolute';
          /** @type {?} */

          var content = document.createElement('div');
          /** @type {?} */

          var contentStyle = content.style;
          contentStyle.width = '2px';
          contentStyle.height = '1px';
          scrollContainer.appendChild(content);
          document.body.appendChild(scrollContainer);
          rtlScrollAxisType = 0
          /* NORMAL */
          ; // The viewport starts scrolled all the way to the right in RTL mode. If we are in a NORMAL
          // browser this would mean that the scrollLeft should be 1. If it's zero instead we know we're
          // dealing with one of the other two types of browsers.

          if (scrollContainer.scrollLeft === 0) {
            // In a NEGATED browser the scrollLeft is always somewhere in [-maxScrollAmount, 0]. For an
            // INVERTED browser it is always somewhere in [0, maxScrollAmount]. We can determine which by
            // setting to the scrollLeft to 1. This is past the max for a NEGATED browser, so it will
            // return 0 when we read it again.
            scrollContainer.scrollLeft = 1;
            rtlScrollAxisType = scrollContainer.scrollLeft === 0 ? 1
            /* NEGATED */
            : 2
            /* INVERTED */
            ;
          }

          /** @type {?} */
          scrollContainer.parentNode.removeChild(scrollContainer);
        }

        return rtlScrollAxisType;
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/platform/features/shadow-dom.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** @type {?} */


      var shadowDomIsSupported;
      /**
       * Checks whether the user's browser support Shadow DOM.
       * @return {?}
       */

      function _supportsShadowDom2() {
        if (shadowDomIsSupported == null) {
          /** @type {?} */
          var head = typeof document !== 'undefined' ? document.head : null;
          shadowDomIsSupported = !!(head && (
          /** @type {?} */
          head.createShadowRoot || head.attachShadow));
        }

        return shadowDomIsSupported;
      }
      /**
       * Gets the shadow root of an element, if supported and the element is inside the Shadow DOM.
       * @param {?} element
       * @return {?}
       */


      function _getShadowRoot2(element) {
        if (_supportsShadowDom2()) {
          /** @type {?} */
          var rootNode = element.getRootNode ? element.getRootNode() : null; // Note that this should be caught by `_supportsShadowDom`, but some
          // teams have been able to hit this code path on unsupported browsers.

          if (typeof ShadowRoot !== 'undefined' && ShadowRoot && rootNode instanceof ShadowRoot) {
            return rootNode;
          }
        }

        return null;
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/platform/public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Generated bundle index. Do not edit.
       */

      /***/

    },

    /***/
    40912:
    /*!*******************************************************************!*\
      !*** ./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/portal.js ***!
      \*******************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "BasePortalHost": function BasePortalHost() {
          return (
            /* binding */
            _BasePortalHost
          );
        },

        /* harmony export */
        "BasePortalOutlet": function BasePortalOutlet() {
          return (
            /* binding */
            _BasePortalOutlet
          );
        },

        /* harmony export */
        "CdkPortal": function CdkPortal() {
          return (
            /* binding */
            _CdkPortal
          );
        },

        /* harmony export */
        "CdkPortalOutlet": function CdkPortalOutlet() {
          return (
            /* binding */
            _CdkPortalOutlet
          );
        },

        /* harmony export */
        "ComponentPortal": function ComponentPortal() {
          return (
            /* binding */
            _ComponentPortal
          );
        },

        /* harmony export */
        "DomPortal": function DomPortal() {
          return (
            /* binding */
            _DomPortal
          );
        },

        /* harmony export */
        "DomPortalHost": function DomPortalHost() {
          return (
            /* binding */
            _DomPortalHost
          );
        },

        /* harmony export */
        "DomPortalOutlet": function DomPortalOutlet() {
          return (
            /* binding */
            _DomPortalOutlet
          );
        },

        /* harmony export */
        "Portal": function Portal() {
          return (
            /* binding */
            _Portal
          );
        },

        /* harmony export */
        "PortalHostDirective": function PortalHostDirective() {
          return (
            /* binding */
            _PortalHostDirective
          );
        },

        /* harmony export */
        "PortalInjector": function PortalInjector() {
          return (
            /* binding */
            _PortalInjector
          );
        },

        /* harmony export */
        "PortalModule": function PortalModule() {
          return (
            /* binding */
            _PortalModule
          );
        },

        /* harmony export */
        "TemplatePortal": function TemplatePortal() {
          return (
            /* binding */
            _TemplatePortal
          );
        },

        /* harmony export */
        "TemplatePortalDirective": function TemplatePortalDirective() {
          return (
            /* binding */
            _TemplatePortalDirective
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      2316);
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/common */
      54364);
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/portal/portal-errors.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Throws an exception when attempting to attach a null portal to a host.
       * \@docs-private
       * @return {?}
       */


      function throwNullPortalError() {
        throw Error('Must provide a portal to attach');
      }
      /**
       * Throws an exception when attempting to attach a portal to a host that is already attached.
       * \@docs-private
       * @return {?}
       */


      function throwPortalAlreadyAttachedError() {
        throw Error('Host already has a portal attached');
      }
      /**
       * Throws an exception when attempting to attach a portal to an already-disposed host.
       * \@docs-private
       * @return {?}
       */


      function throwPortalOutletAlreadyDisposedError() {
        throw Error('This PortalOutlet has already been disposed');
      }
      /**
       * Throws an exception when attempting to attach an unknown portal type.
       * \@docs-private
       * @return {?}
       */


      function throwUnknownPortalTypeError() {
        throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' + 'a ComponentPortal or a TemplatePortal.');
      }
      /**
       * Throws an exception when attempting to attach a portal to a null host.
       * \@docs-private
       * @return {?}
       */


      function throwNullPortalOutletError() {
        throw Error('Attempting to attach a portal to a null PortalOutlet');
      }
      /**
       * Throws an exception when attempting to detach a portal that is not attached.
       * \@docs-private
       * @return {?}
       */


      function throwNoPortalAttachedError() {
        throw Error('Attempting to detach a portal that is not attached to a host');
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/portal/portal.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Interface that can be used to generically type a class.
       * @record
       * @template T
       */


      function ComponentType() {}
      /**
       * A `Portal` is something that you want to render somewhere else.
       * It can be attach to / detached from a `PortalOutlet`.
       * @abstract
       * @template T
       */


      var _Portal = /*#__PURE__*/function () {
        function _Portal() {
          _classCallCheck(this, _Portal);
        }

        _createClass(_Portal, [{
          key: "attach",
          value:
          /**
           * Attach this portal to a host.
           * @param {?} host
           * @return {?}
           */
          function attach(host) {
            if (host == null) {
              throwNullPortalOutletError();
            }

            if (host.hasAttached()) {
              throwPortalAlreadyAttachedError();
            }

            this._attachedHost = host;
            return (
              /** @type {?} */
              host.attach(this)
            );
          }
          /**
           * Detach this portal from its host
           * @return {?}
           */

        }, {
          key: "detach",
          value: function detach() {
            /** @type {?} */
            var host = this._attachedHost;

            if (host == null) {
              throwNoPortalAttachedError();
            } else {
              this._attachedHost = null;
              host.detach();
            }
          }
          /**
           * Whether this portal is attached to a host.
           * @return {?}
           */

        }, {
          key: "isAttached",
          get: function get() {
            return this._attachedHost != null;
          }
          /**
           * Sets the PortalOutlet reference without performing `attach()`. This is used directly by
           * the PortalOutlet when it is performing an `attach()` or `detach()`.
           * @param {?} host
           * @return {?}
           */

        }, {
          key: "setAttachedHost",
          value: function setAttachedHost(host) {
            this._attachedHost = host;
          }
        }]);

        return _Portal;
      }();

      if (false) {}
      /**
       * A `ComponentPortal` is a portal that instantiates some Component upon attachment.
       * @template T
       */


      var _ComponentPortal = /*#__PURE__*/function (_Portal2) {
        _inherits(_ComponentPortal, _Portal2);

        var _super6 = _createSuper(_ComponentPortal);

        /**
         * @param {?} component
         * @param {?=} viewContainerRef
         * @param {?=} injector
         * @param {?=} componentFactoryResolver
         */
        function _ComponentPortal(component, viewContainerRef, injector, componentFactoryResolver) {
          var _this49;

          _classCallCheck(this, _ComponentPortal);

          _this49 = _super6.call(this);
          _this49.component = component;
          _this49.viewContainerRef = viewContainerRef;
          _this49.injector = injector;
          _this49.componentFactoryResolver = componentFactoryResolver;
          return _this49;
        }

        return _ComponentPortal;
      }(_Portal);

      if (false) {}
      /**
       * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).
       * @template C
       */


      var _TemplatePortal = /*#__PURE__*/function (_Portal3) {
        _inherits(_TemplatePortal, _Portal3);

        var _super7 = _createSuper(_TemplatePortal);

        /**
         * @param {?} template
         * @param {?} viewContainerRef
         * @param {?=} context
         */
        function _TemplatePortal(template, viewContainerRef, context) {
          var _this50;

          _classCallCheck(this, _TemplatePortal);

          _this50 = _super7.call(this);
          _this50.templateRef = template;
          _this50.viewContainerRef = viewContainerRef;
          _this50.context = context;
          return _this50;
        }
        /**
         * @return {?}
         */


        _createClass(_TemplatePortal, [{
          key: "origin",
          get: function get() {
            return this.templateRef.elementRef;
          }
          /**
           * Attach the portal to the provided `PortalOutlet`.
           * When a context is provided it will override the `context` property of the `TemplatePortal`
           * instance.
           * @param {?} host
           * @param {?=} context
           * @return {?}
           */

        }, {
          key: "attach",
          value: function attach(host) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.context;
            this.context = context;
            return _get(_getPrototypeOf(_TemplatePortal.prototype), "attach", this).call(this, host);
          }
          /**
           * @return {?}
           */

        }, {
          key: "detach",
          value: function detach() {
            this.context = undefined;
            return _get(_getPrototypeOf(_TemplatePortal.prototype), "detach", this).call(this);
          }
        }]);

        return _TemplatePortal;
      }(_Portal);

      if (false) {}
      /**
       * A `DomPortal` is a portal whose DOM element will be taken from its current position
       * in the DOM and moved into a portal outlet, when it is attached. On detach, the content
       * will be restored to its original position.
       * @template T
       */


      var _DomPortal = /*#__PURE__*/function (_Portal4) {
        _inherits(_DomPortal, _Portal4);

        var _super8 = _createSuper(_DomPortal);

        /**
         * @param {?} element
         */
        function _DomPortal(element) {
          var _this51;

          _classCallCheck(this, _DomPortal);

          _this51 = _super8.call(this);
          _this51.element = element instanceof _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef ? element.nativeElement : element;
          return _this51;
        }

        return _DomPortal;
      }(_Portal);

      if (false) {}
      /**
       * A `PortalOutlet` is an space that can contain a single `Portal`.
       * @record
       */


      function PortalOutlet() {}

      if (false) {}
      /**
       * Partial implementation of PortalOutlet that handles attaching
       * ComponentPortal and TemplatePortal.
       * @abstract
       */


      var _BasePortalOutlet = /*#__PURE__*/function () {
        function _BasePortalOutlet() {
          _classCallCheck(this, _BasePortalOutlet);

          /**
           * Whether this host has already been permanently disposed.
           */
          this._isDisposed = false; // @breaking-change 10.0.0 `attachDomPortal` to become a required abstract method.

          this.attachDomPortal = null;
        }
        /**
         * Whether this host has an attached portal.
         * @return {?}
         */


        _createClass(_BasePortalOutlet, [{
          key: "hasAttached",
          value: function hasAttached() {
            return !!this._attachedPortal;
          }
          /**
           * Attaches a portal.
           * @param {?} portal
           * @return {?}
           */

        }, {
          key: "attach",
          value: function attach(portal) {
            if (!portal) {
              throwNullPortalError();
            }

            if (this.hasAttached()) {
              throwPortalAlreadyAttachedError();
            }

            if (this._isDisposed) {
              throwPortalOutletAlreadyDisposedError();
            }

            if (portal instanceof _ComponentPortal) {
              this._attachedPortal = portal;
              return this.attachComponentPortal(portal);
            } else if (portal instanceof _TemplatePortal) {
              this._attachedPortal = portal;
              return this.attachTemplatePortal(portal); // @breaking-change 10.0.0 remove null check for `this.attachDomPortal`.
            } else if (this.attachDomPortal && portal instanceof _DomPortal) {
              this._attachedPortal = portal;
              return this.attachDomPortal(portal);
            }

            throwUnknownPortalTypeError();
          }
          /**
           * Detaches a previously attached portal.
           * @return {?}
           */

        }, {
          key: "detach",
          value: function detach() {
            if (this._attachedPortal) {
              this._attachedPortal.setAttachedHost(null);

              this._attachedPortal = null;
            }

            this._invokeDisposeFn();
          }
          /**
           * Permanently dispose of this portal host.
           * @return {?}
           */

        }, {
          key: "dispose",
          value: function dispose() {
            if (this.hasAttached()) {
              this.detach();
            }

            this._invokeDisposeFn();

            this._isDisposed = true;
          }
          /**
           * \@docs-private
           * @param {?} fn
           * @return {?}
           */

        }, {
          key: "setDisposeFn",
          value: function setDisposeFn(fn) {
            this._disposeFn = fn;
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "_invokeDisposeFn",
          value: function _invokeDisposeFn() {
            if (this._disposeFn) {
              this._disposeFn();

              this._disposeFn = null;
            }
          }
        }]);

        return _BasePortalOutlet;
      }();

      if (false) {}
      /**
       * @deprecated Use `BasePortalOutlet` instead.
       * \@breaking-change 9.0.0
       * @abstract
       */


      var _BasePortalHost = /*#__PURE__*/function (_BasePortalOutlet2) {
        _inherits(_BasePortalHost, _BasePortalOutlet2);

        var _super9 = _createSuper(_BasePortalHost);

        function _BasePortalHost() {
          _classCallCheck(this, _BasePortalHost);

          return _super9.apply(this, arguments);
        }

        return _BasePortalHost;
      }(_BasePortalOutlet);
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/portal/dom-portal-outlet.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular
       * application context.
       */


      var _DomPortalOutlet = /*#__PURE__*/function (_BasePortalOutlet3) {
        _inherits(_DomPortalOutlet, _BasePortalOutlet3);

        var _super10 = _createSuper(_DomPortalOutlet);

        /**
         * @param {?} outletElement
         * @param {?} _componentFactoryResolver
         * @param {?} _appRef
         * @param {?} _defaultInjector
         * @param {?=} _document
         */
        function _DomPortalOutlet(outletElement, _componentFactoryResolver, _appRef, _defaultInjector,
        /**
         * @deprecated `_document` Parameter to be made required.
         * @breaking-change 10.0.0
         */
        _document) {
          var _thisSuper, _this52;

          _classCallCheck(this, _DomPortalOutlet);

          _this52 = _super10.call(this);
          _this52.outletElement = outletElement;
          _this52._componentFactoryResolver = _componentFactoryResolver;
          _this52._appRef = _appRef;
          _this52._defaultInjector = _defaultInjector;
          /**
           * Attaches a DOM portal by transferring its content into the outlet.
           * @param portal Portal to be attached.
           * @deprecated To be turned into a method.
           * \@breaking-change 10.0.0
           */

          _this52.attachDomPortal =
          /**
          * @param {?} portal
          * @return {?}
          */
          function (portal) {
            // @breaking-change 10.0.0 Remove check and error once the
            // `_document` constructor parameter is required.
            if (!_this52._document) {
              throw Error('Cannot attach DOM portal without _document constructor parameter');
            }
            /** @type {?} */


            var element = portal.element;

            if (!element.parentNode) {
              throw Error('DOM portal content must be attached to a parent node.');
            } // Anchor used to save the element's previous position so
            // that we can restore it when the portal is detached.

            /** @type {?} */


            var anchorNode = _this52._document.createComment('dom-portal');

            element.parentNode.insertBefore(anchorNode, element);

            _this52.outletElement.appendChild(element);

            _get((_thisSuper = _assertThisInitialized(_this52), _getPrototypeOf(_DomPortalOutlet.prototype)), "setDisposeFn", _thisSuper).call(_thisSuper,
            /**
            * @return {?}
            */
            function () {
              // We can't use `replaceWith` here because IE doesn't support it.
              if (anchorNode.parentNode) {
                anchorNode.parentNode.replaceChild(element, anchorNode);
              }
            });
          };

          _this52._document = _document;
          return _this52;
        }
        /**
         * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.
         * @template T
         * @param {?} portal Portal to be attached
         * @return {?} Reference to the created component.
         */


        _createClass(_DomPortalOutlet, [{
          key: "attachComponentPortal",
          value: function attachComponentPortal(portal) {
            var _this53 = this;

            /** @type {?} */
            var resolver = portal.componentFactoryResolver || this._componentFactoryResolver;
            /** @type {?} */

            var componentFactory = resolver.resolveComponentFactory(portal.component);
            /** @type {?} */

            var componentRef; // If the portal specifies a ViewContainerRef, we will use that as the attachment point
            // for the component (in terms of Angular's component tree, not rendering).
            // When the ViewContainerRef is missing, we use the factory to create the component directly
            // and then manually attach the view to the application.

            if (portal.viewContainerRef) {
              componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector);
              this.setDisposeFn(
              /**
              * @return {?}
              */
              function () {
                return componentRef.destroy();
              });
            } else {
              componentRef = componentFactory.create(portal.injector || this._defaultInjector);

              this._appRef.attachView(componentRef.hostView);

              this.setDisposeFn(
              /**
              * @return {?}
              */
              function () {
                _this53._appRef.detachView(componentRef.hostView);

                componentRef.destroy();
              });
            } // At this point the component has been instantiated, so we move it to the location in the DOM
            // where we want it to be rendered.


            this.outletElement.appendChild(this._getComponentRootNode(componentRef));
            return componentRef;
          }
          /**
           * Attaches a template portal to the DOM as an embedded view.
           * @template C
           * @param {?} portal Portal to be attached.
           * @return {?} Reference to the created embedded view.
           */

        }, {
          key: "attachTemplatePortal",
          value: function attachTemplatePortal(portal) {
            var _this54 = this;

            /** @type {?} */
            var viewContainer = portal.viewContainerRef;
            /** @type {?} */

            var viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);
            viewRef.detectChanges(); // The method `createEmbeddedView` will add the view as a child of the viewContainer.
            // But for the DomPortalOutlet the view can be added everywhere in the DOM
            // (e.g Overlay Container) To move the view to the specified host element. We just
            // re-append the existing root nodes.

            viewRef.rootNodes.forEach(
            /**
            * @param {?} rootNode
            * @return {?}
            */
            function (rootNode) {
              return _this54.outletElement.appendChild(rootNode);
            });
            this.setDisposeFn(
            /**
            * @return {?}
            */
            function () {
              /** @type {?} */
              var index = viewContainer.indexOf(viewRef);

              if (index !== -1) {
                viewContainer.remove(index);
              }
            }); // TODO(jelbourn): Return locals from view.

            return viewRef;
          }
          /**
           * Clears out a portal from the DOM.
           * @return {?}
           */

        }, {
          key: "dispose",
          value: function dispose() {
            _get(_getPrototypeOf(_DomPortalOutlet.prototype), "dispose", this).call(this);

            if (this.outletElement.parentNode != null) {
              this.outletElement.parentNode.removeChild(this.outletElement);
            }
          }
          /**
           * Gets the root HTMLElement for an instantiated component.
           * @private
           * @param {?} componentRef
           * @return {?}
           */

        }, {
          key: "_getComponentRootNode",
          value: function _getComponentRootNode(componentRef) {
            return (
              /** @type {?} */

              /** @type {?} */
              componentRef.hostView.rootNodes[0]
            );
          }
        }]);

        return _DomPortalOutlet;
      }(_BasePortalOutlet);

      if (false) {}
      /**
       * @deprecated Use `DomPortalOutlet` instead.
       * \@breaking-change 9.0.0
       */


      var _DomPortalHost = /*#__PURE__*/function (_DomPortalOutlet2) {
        _inherits(_DomPortalHost, _DomPortalOutlet2);

        var _super11 = _createSuper(_DomPortalHost);

        function _DomPortalHost() {
          _classCallCheck(this, _DomPortalHost);

          return _super11.apply(this, arguments);
        }

        return _DomPortalHost;
      }(_DomPortalOutlet);
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/portal/portal-directives.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,
       * the directive instance itself can be attached to a host, enabling declarative use of portals.
       */


      var _CdkPortal = /*#__PURE__*/function (_TemplatePortal2) {
        _inherits(_CdkPortal, _TemplatePortal2);

        var _super12 = _createSuper(_CdkPortal);

        /**
         * @param {?} templateRef
         * @param {?} viewContainerRef
         */
        function _CdkPortal(templateRef, viewContainerRef) {
          _classCallCheck(this, _CdkPortal);

          return _super12.call(this, templateRef, viewContainerRef);
        }

        return _CdkPortal;
      }(_TemplatePortal);

      _CdkPortal.ɵfac = function CdkPortal_Factory(t) {
        return new (t || _CdkPortal)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef));
      };

      _CdkPortal.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: _CdkPortal,
        selectors: [["", "cdkPortal", ""]],
        exportAs: ["cdkPortal"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
      });
      /** @nocollapse */

      _CdkPortal.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_CdkPortal, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
          args: [{
            selector: '[cdkPortal]',
            exportAs: 'cdkPortal'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef
          }];
        }, null);
      })();
      /**
       * @deprecated Use `CdkPortal` instead.
       * \@breaking-change 9.0.0
       */


      var _TemplatePortalDirective = /*#__PURE__*/function (_CdkPortal2) {
        _inherits(_TemplatePortalDirective, _CdkPortal2);

        var _super13 = _createSuper(_TemplatePortalDirective);

        function _TemplatePortalDirective() {
          _classCallCheck(this, _TemplatePortalDirective);

          return _super13.apply(this, arguments);
        }

        return _TemplatePortalDirective;
      }(_CdkPortal);

      _TemplatePortalDirective.ɵfac = /*@__PURE__*/function () {
        var ɵTemplatePortalDirective_BaseFactory;
        return function TemplatePortalDirective_Factory(t) {
          return (ɵTemplatePortalDirective_BaseFactory || (ɵTemplatePortalDirective_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](_TemplatePortalDirective)))(t || _TemplatePortalDirective);
        };
      }();

      _TemplatePortalDirective.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: _TemplatePortalDirective,
        selectors: [["", "cdk-portal", ""], ["", "portal", ""]],
        exportAs: ["cdkPortal"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
          provide: _CdkPortal,
          useExisting: _TemplatePortalDirective
        }]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_TemplatePortalDirective, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
          args: [{
            selector: '[cdk-portal], [portal]',
            exportAs: 'cdkPortal',
            providers: [{
              provide: _CdkPortal,
              useExisting: _TemplatePortalDirective
            }]
          }]
        }], null, null);
      })();
      /**
       * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be
       * directly attached to it, enabling declarative use.
       *
       * Usage:
       * `<ng-template [cdkPortalOutlet]="greeting"></ng-template>`
       */


      var _CdkPortalOutlet = /*#__PURE__*/function (_BasePortalOutlet4) {
        _inherits(_CdkPortalOutlet, _BasePortalOutlet4);

        var _super14 = _createSuper(_CdkPortalOutlet);

        /**
         * @param {?} _componentFactoryResolver
         * @param {?} _viewContainerRef
         * @param {?=} _document
         */
        function _CdkPortalOutlet(_componentFactoryResolver, _viewContainerRef,
        /**
         * @deprecated `_document` parameter to be made required.
         * @breaking-change 9.0.0
         */
        _document) {
          var _thisSuper2, _this55;

          _classCallCheck(this, _CdkPortalOutlet);

          _this55 = _super14.call(this);
          _this55._componentFactoryResolver = _componentFactoryResolver;
          _this55._viewContainerRef = _viewContainerRef;
          /**
           * Whether the portal component is initialized.
           */

          _this55._isInitialized = false;
          /**
           * Emits when a portal is attached to the outlet.
           */

          _this55.attached = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
          /**
           * Attaches the given DomPortal to this PortalHost by moving all of the portal content into it.
           * @param portal Portal to be attached.
           * @deprecated To be turned into a method.
           * \@breaking-change 10.0.0
           */

          _this55.attachDomPortal =
          /**
          * @param {?} portal
          * @return {?}
          */
          function (portal) {
            // @breaking-change 9.0.0 Remove check and error once the
            // `_document` constructor parameter is required.
            if (!_this55._document) {
              throw Error('Cannot attach DOM portal without _document constructor parameter');
            }
            /** @type {?} */


            var element = portal.element;

            if (!element.parentNode) {
              throw Error('DOM portal content must be attached to a parent node.');
            } // Anchor used to save the element's previous position so
            // that we can restore it when the portal is detached.

            /** @type {?} */


            var anchorNode = _this55._document.createComment('dom-portal');

            portal.setAttachedHost(_assertThisInitialized(_this55));
            element.parentNode.insertBefore(anchorNode, element);

            _this55._getRootNode().appendChild(element);

            _get((_thisSuper2 = _assertThisInitialized(_this55), _getPrototypeOf(_CdkPortalOutlet.prototype)), "setDisposeFn", _thisSuper2).call(_thisSuper2,
            /**
            * @return {?}
            */
            function () {
              if (anchorNode.parentNode) {
                /** @type {?} */
                anchorNode.parentNode.replaceChild(element, anchorNode);
              }
            });
          };

          _this55._document = _document;
          return _this55;
        }
        /**
         * Portal associated with the Portal outlet.
         * @return {?}
         */


        _createClass(_CdkPortalOutlet, [{
          key: "portal",
          get: function get() {
            return this._attachedPortal;
          }
          /**
           * @param {?} portal
           * @return {?}
           */
          ,
          set: function set(portal) {
            // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have
            // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`
            // and attach a portal programmatically in the parent component. When Angular does the first CD
            // round, it will fire the setter with empty string, causing the user's content to be cleared.
            if (this.hasAttached() && !portal && !this._isInitialized) {
              return;
            }

            if (this.hasAttached()) {
              _get(_getPrototypeOf(_CdkPortalOutlet.prototype), "detach", this).call(this);
            }

            if (portal) {
              _get(_getPrototypeOf(_CdkPortalOutlet.prototype), "attach", this).call(this, portal);
            }

            this._attachedPortal = portal;
          }
          /**
           * Component or view reference that is attached to the portal.
           * @return {?}
           */

        }, {
          key: "attachedRef",
          get: function get() {
            return this._attachedRef;
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnInit",
          value: function ngOnInit() {
            this._isInitialized = true;
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            _get(_getPrototypeOf(_CdkPortalOutlet.prototype), "dispose", this).call(this);

            this._attachedPortal = null;
            this._attachedRef = null;
          }
          /**
           * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.
           *
           * @template T
           * @param {?} portal Portal to be attached to the portal outlet.
           * @return {?} Reference to the created component.
           */

        }, {
          key: "attachComponentPortal",
          value: function attachComponentPortal(portal) {
            portal.setAttachedHost(this); // If the portal specifies an origin, use that as the logical location of the component
            // in the application tree. Otherwise use the location of this PortalOutlet.

            /** @type {?} */

            var viewContainerRef = portal.viewContainerRef != null ? portal.viewContainerRef : this._viewContainerRef;
            /** @type {?} */

            var resolver = portal.componentFactoryResolver || this._componentFactoryResolver;
            /** @type {?} */

            var componentFactory = resolver.resolveComponentFactory(portal.component);
            /** @type {?} */

            var ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector); // If we're using a view container that's different from the injected one (e.g. when the portal
            // specifies its own) we need to move the component into the outlet, otherwise it'll be rendered
            // inside of the alternate view container.

            if (viewContainerRef !== this._viewContainerRef) {
              this._getRootNode().appendChild(
              /** @type {?} */
              ref.hostView.rootNodes[0]);
            }

            _get(_getPrototypeOf(_CdkPortalOutlet.prototype), "setDisposeFn", this).call(this,
            /**
            * @return {?}
            */
            function () {
              return ref.destroy();
            });

            this._attachedPortal = portal;
            this._attachedRef = ref;
            this.attached.emit(ref);
            return ref;
          }
          /**
           * Attach the given TemplatePortal to this PortalHost as an embedded View.
           * @template C
           * @param {?} portal Portal to be attached.
           * @return {?} Reference to the created embedded view.
           */

        }, {
          key: "attachTemplatePortal",
          value: function attachTemplatePortal(portal) {
            var _this56 = this;

            portal.setAttachedHost(this);
            /** @type {?} */

            var viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);

            _get(_getPrototypeOf(_CdkPortalOutlet.prototype), "setDisposeFn", this).call(this,
            /**
            * @return {?}
            */
            function () {
              return _this56._viewContainerRef.clear();
            });

            this._attachedPortal = portal;
            this._attachedRef = viewRef;
            this.attached.emit(viewRef);
            return viewRef;
          }
          /**
           * Gets the root node of the portal outlet.
           * @private
           * @return {?}
           */

        }, {
          key: "_getRootNode",
          value: function _getRootNode() {
            /** @type {?} */
            var nativeElement = this._viewContainerRef.element.nativeElement; // The directive could be set on a template which will result in a comment
            // node being the root. Use the comment's parent node if that is the case.

            return (
              /** @type {?} */
              nativeElement.nodeType === nativeElement.ELEMENT_NODE ? nativeElement :
              /** @type {?} */
              nativeElement.parentNode
            );
          }
        }]);

        return _CdkPortalOutlet;
      }(_BasePortalOutlet);

      _CdkPortalOutlet.ɵfac = function CdkPortalOutlet_Factory(t) {
        return new (t || _CdkPortalOutlet)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ComponentFactoryResolver), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT));
      };

      _CdkPortalOutlet.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: _CdkPortalOutlet,
        selectors: [["", "cdkPortalOutlet", ""]],
        inputs: {
          portal: ["cdkPortalOutlet", "portal"]
        },
        outputs: {
          attached: "attached"
        },
        exportAs: ["cdkPortalOutlet"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
      });
      /** @nocollapse */

      _CdkPortalOutlet.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ComponentFactoryResolver
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT]
          }]
        }];
      };

      _CdkPortalOutlet.propDecorators = {
        attached: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_CdkPortalOutlet, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
          args: [{
            selector: '[cdkPortalOutlet]',
            exportAs: 'cdkPortalOutlet',
            inputs: ['portal: cdkPortalOutlet']
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ComponentFactoryResolver
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT]
            }]
          }];
        }, {
          attached: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
          }]
        });
      })();

      if (false) {}
      /**
       * @deprecated Use `CdkPortalOutlet` instead.
       * \@breaking-change 9.0.0
       */


      var _PortalHostDirective = /*#__PURE__*/function (_CdkPortalOutlet2) {
        _inherits(_PortalHostDirective, _CdkPortalOutlet2);

        var _super15 = _createSuper(_PortalHostDirective);

        function _PortalHostDirective() {
          _classCallCheck(this, _PortalHostDirective);

          return _super15.apply(this, arguments);
        }

        return _PortalHostDirective;
      }(_CdkPortalOutlet);

      _PortalHostDirective.ɵfac = /*@__PURE__*/function () {
        var ɵPortalHostDirective_BaseFactory;
        return function PortalHostDirective_Factory(t) {
          return (ɵPortalHostDirective_BaseFactory || (ɵPortalHostDirective_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](_PortalHostDirective)))(t || _PortalHostDirective);
        };
      }();

      _PortalHostDirective.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: _PortalHostDirective,
        selectors: [["", "cdkPortalHost", ""], ["", "portalHost", ""]],
        inputs: {
          portal: ["cdkPortalHost", "portal"]
        },
        exportAs: ["cdkPortalHost"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
          provide: _CdkPortalOutlet,
          useExisting: _PortalHostDirective
        }]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_PortalHostDirective, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
          args: [{
            selector: '[cdkPortalHost], [portalHost]',
            exportAs: 'cdkPortalHost',
            inputs: ['portal: cdkPortalHost'],
            providers: [{
              provide: _CdkPortalOutlet,
              useExisting: _PortalHostDirective
            }]
          }]
        }], null, null);
      })();

      var _PortalModule = function _PortalModule() {
        _classCallCheck(this, _PortalModule);
      };

      _PortalModule.ɵfac = function PortalModule_Factory(t) {
        return new (t || _PortalModule)();
      };

      _PortalModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: _PortalModule
      });
      _PortalModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({});

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_PortalModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
          args: [{
            exports: [_CdkPortal, _CdkPortalOutlet, _TemplatePortalDirective, _PortalHostDirective],
            declarations: [_CdkPortal, _CdkPortalOutlet, _TemplatePortalDirective, _PortalHostDirective]
          }]
        }], null, null);
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](_PortalModule, {
          declarations: [_CdkPortal, _CdkPortalOutlet, _TemplatePortalDirective, _PortalHostDirective],
          exports: [_CdkPortal, _CdkPortalOutlet, _TemplatePortalDirective, _PortalHostDirective]
        });
      })();
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/portal/portal-injector.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Custom injector to be used when providing custom
       * injection tokens to components inside a portal.
       * \@docs-private
       */


      var _PortalInjector = /*#__PURE__*/function () {
        /**
         * @param {?} _parentInjector
         * @param {?} _customTokens
         */
        function _PortalInjector(_parentInjector, _customTokens) {
          _classCallCheck(this, _PortalInjector);

          this._parentInjector = _parentInjector;
          this._customTokens = _customTokens;
        }
        /**
         * @param {?} token
         * @param {?=} notFoundValue
         * @return {?}
         */


        _createClass(_PortalInjector, [{
          key: "get",
          value: function get(token, notFoundValue) {
            /** @type {?} */
            var value = this._customTokens.get(token);

            if (typeof value !== 'undefined') {
              return value;
            }

            return this._parentInjector.get(token, notFoundValue);
          }
        }]);

        return _PortalInjector;
      }();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/portal/public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Generated bundle index. Do not edit.
       */

      /***/

    },

    /***/
    42791:
    /*!**********************************************************************!*\
      !*** ./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/scrolling.js ***!
      \**********************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "CdkFixedSizeVirtualScroll": function CdkFixedSizeVirtualScroll() {
          return (
            /* binding */
            _CdkFixedSizeVirtualScroll
          );
        },

        /* harmony export */
        "CdkScrollable": function CdkScrollable() {
          return (
            /* binding */
            _CdkScrollable
          );
        },

        /* harmony export */
        "CdkScrollableModule": function CdkScrollableModule() {
          return (
            /* binding */
            _CdkScrollableModule
          );
        },

        /* harmony export */
        "CdkVirtualForOf": function CdkVirtualForOf() {
          return (
            /* binding */
            _CdkVirtualForOf
          );
        },

        /* harmony export */
        "CdkVirtualScrollViewport": function CdkVirtualScrollViewport() {
          return (
            /* binding */
            _CdkVirtualScrollViewport
          );
        },

        /* harmony export */
        "DEFAULT_RESIZE_TIME": function DEFAULT_RESIZE_TIME() {
          return (
            /* binding */
            _DEFAULT_RESIZE_TIME
          );
        },

        /* harmony export */
        "DEFAULT_SCROLL_TIME": function DEFAULT_SCROLL_TIME() {
          return (
            /* binding */
            _DEFAULT_SCROLL_TIME
          );
        },

        /* harmony export */
        "FixedSizeVirtualScrollStrategy": function FixedSizeVirtualScrollStrategy() {
          return (
            /* binding */
            _FixedSizeVirtualScrollStrategy
          );
        },

        /* harmony export */
        "ScrollDispatcher": function ScrollDispatcher() {
          return (
            /* binding */
            _ScrollDispatcher
          );
        },

        /* harmony export */
        "ScrollingModule": function ScrollingModule() {
          return (
            /* binding */
            _ScrollingModule
          );
        },

        /* harmony export */
        "VIRTUAL_SCROLL_STRATEGY": function VIRTUAL_SCROLL_STRATEGY() {
          return (
            /* binding */
            _VIRTUAL_SCROLL_STRATEGY
          );
        },

        /* harmony export */
        "ViewportRuler": function ViewportRuler() {
          return (
            /* binding */
            _ViewportRuler
          );
        },

        /* harmony export */
        "_fixedSizeVirtualScrollStrategyFactory": function _fixedSizeVirtualScrollStrategyFactory() {
          return (
            /* binding */
            _fixedSizeVirtualScrollStrategyFactory2
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/cdk/coercion */
      20657);
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      2316);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! rxjs */
      79441);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! rxjs */
      81134);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! rxjs */
      25160);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! rxjs */
      82516);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
      /*! rxjs */
      89919);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(
      /*! rxjs */
      90970);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(
      /*! rxjs */
      36317);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(
      /*! rxjs */
      94283);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(
      /*! rxjs */
      64674);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! rxjs/operators */
      83720);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! rxjs/operators */
      7494);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! rxjs/operators */
      9170);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
      /*! rxjs/operators */
      22663);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(
      /*! rxjs/operators */
      1143);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(
      /*! rxjs/operators */
      15347);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(
      /*! rxjs/operators */
      79902);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(
      /*! rxjs/operators */
      92597);
      /* harmony import */


      var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! @angular/cdk/platform */
      36145);
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! @angular/common */
      54364);
      /* harmony import */


      var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
      /*! @angular/cdk/bidi */
      772);
      /* harmony import */


      var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(
      /*! @angular/cdk/collections */
      62604);
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/scrolling/virtual-scroll-strategy.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * The injection token used to specify the virtual scrolling strategy.
       * @type {?}
       */


      var _c0 = ["contentWrapper"];
      var _c1 = ["*"];

      var _VIRTUAL_SCROLL_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('VIRTUAL_SCROLL_STRATEGY');
      /**
       * A strategy that dictates which items should be rendered in the viewport.
       * @record
       */


      function VirtualScrollStrategy() {}

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/scrolling/fixed-size-virtual-scroll.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Virtual scrolling strategy for lists with items of known fixed size.
       */


      var _FixedSizeVirtualScrollStrategy = /*#__PURE__*/function () {
        /**
         * @param {?} itemSize The size of the items in the virtually scrolling list.
         * @param {?} minBufferPx The minimum amount of buffer (in pixels) before needing to render more
         * @param {?} maxBufferPx The amount of buffer (in pixels) to render when rendering more.
         */
        function _FixedSizeVirtualScrollStrategy(itemSize, minBufferPx, maxBufferPx) {
          _classCallCheck(this, _FixedSizeVirtualScrollStrategy);

          this._scrolledIndexChange = new rxjs__WEBPACK_IMPORTED_MODULE_1__.Subject();
          /**
           * \@docs-private Implemented as part of VirtualScrollStrategy.
           */

          this.scrolledIndexChange = this._scrolledIndexChange.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_2__.distinctUntilChanged)());
          /**
           * The attached viewport.
           */

          this._viewport = null;
          this._itemSize = itemSize;
          this._minBufferPx = minBufferPx;
          this._maxBufferPx = maxBufferPx;
        }
        /**
         * Attaches this scroll strategy to a viewport.
         * @param {?} viewport The viewport to attach this strategy to.
         * @return {?}
         */


        _createClass(_FixedSizeVirtualScrollStrategy, [{
          key: "attach",
          value: function attach(viewport) {
            this._viewport = viewport;

            this._updateTotalContentSize();

            this._updateRenderedRange();
          }
          /**
           * Detaches this scroll strategy from the currently attached viewport.
           * @return {?}
           */

        }, {
          key: "detach",
          value: function detach() {
            this._scrolledIndexChange.complete();

            this._viewport = null;
          }
          /**
           * Update the item size and buffer size.
           * @param {?} itemSize The size of the items in the virtually scrolling list.
           * @param {?} minBufferPx The minimum amount of buffer (in pixels) before needing to render more
           * @param {?} maxBufferPx The amount of buffer (in pixels) to render when rendering more.
           * @return {?}
           */

        }, {
          key: "updateItemAndBufferSize",
          value: function updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {
            if (maxBufferPx < minBufferPx) {
              throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');
            }

            this._itemSize = itemSize;
            this._minBufferPx = minBufferPx;
            this._maxBufferPx = maxBufferPx;

            this._updateTotalContentSize();

            this._updateRenderedRange();
          }
          /**
           * \@docs-private Implemented as part of VirtualScrollStrategy.
           * @return {?}
           */

        }, {
          key: "onContentScrolled",
          value: function onContentScrolled() {
            this._updateRenderedRange();
          }
          /**
           * \@docs-private Implemented as part of VirtualScrollStrategy.
           * @return {?}
           */

        }, {
          key: "onDataLengthChanged",
          value: function onDataLengthChanged() {
            this._updateTotalContentSize();

            this._updateRenderedRange();
          }
          /**
           * \@docs-private Implemented as part of VirtualScrollStrategy.
           * @return {?}
           */

        }, {
          key: "onContentRendered",
          value: function onContentRendered() {}
          /**
           * \@docs-private Implemented as part of VirtualScrollStrategy.
           * @return {?}
           */

        }, {
          key: "onRenderedOffsetChanged",
          value: function onRenderedOffsetChanged() {}
          /**
           * Scroll to the offset for the given index.
           * @param {?} index The index of the element to scroll to.
           * @param {?} behavior The ScrollBehavior to use when scrolling.
           * @return {?}
           */

        }, {
          key: "scrollToIndex",
          value: function scrollToIndex(index, behavior) {
            if (this._viewport) {
              this._viewport.scrollToOffset(index * this._itemSize, behavior);
            }
          }
          /**
           * Update the viewport's total content size.
           * @private
           * @return {?}
           */

        }, {
          key: "_updateTotalContentSize",
          value: function _updateTotalContentSize() {
            if (!this._viewport) {
              return;
            }

            this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);
          }
          /**
           * Update the viewport's rendered range.
           * @private
           * @return {?}
           */

        }, {
          key: "_updateRenderedRange",
          value: function _updateRenderedRange() {
            if (!this._viewport) {
              return;
            }
            /** @type {?} */


            var scrollOffset = this._viewport.measureScrollOffset();
            /** @type {?} */


            var firstVisibleIndex = scrollOffset / this._itemSize;
            /** @type {?} */

            var renderedRange = this._viewport.getRenderedRange();
            /** @type {?} */


            var newRange = {
              start: renderedRange.start,
              end: renderedRange.end
            };
            /** @type {?} */

            var viewportSize = this._viewport.getViewportSize();
            /** @type {?} */


            var dataLength = this._viewport.getDataLength();
            /** @type {?} */


            var startBuffer = scrollOffset - newRange.start * this._itemSize;

            if (startBuffer < this._minBufferPx && newRange.start != 0) {
              /** @type {?} */
              var expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);
              newRange.start = Math.max(0, newRange.start - expandStart);
              newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));
            } else {
              /** @type {?} */
              var endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);

              if (endBuffer < this._minBufferPx && newRange.end != dataLength) {
                /** @type {?} */
                var expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);

                if (expandEnd > 0) {
                  newRange.end = Math.min(dataLength, newRange.end + expandEnd);
                  newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));
                }
              }
            }

            this._viewport.setRenderedRange(newRange);

            this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);

            this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));
          }
        }]);

        return _FixedSizeVirtualScrollStrategy;
      }();

      if (false) {}
      /**
       * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created
       * `FixedSizeVirtualScrollStrategy` from the given directive.
       * @param {?} fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the
       *     `FixedSizeVirtualScrollStrategy` from.
       * @return {?}
       */


      function _fixedSizeVirtualScrollStrategyFactory2(fixedSizeDir) {
        return fixedSizeDir._scrollStrategy;
      }
      /**
       * A virtual scroll strategy that supports fixed-size items.
       */


      var _CdkFixedSizeVirtualScroll = /*#__PURE__*/function () {
        function _CdkFixedSizeVirtualScroll() {
          _classCallCheck(this, _CdkFixedSizeVirtualScroll);

          this._itemSize = 20;
          this._minBufferPx = 100;
          this._maxBufferPx = 200;
          /**
           * The scroll strategy used by this directive.
           */

          this._scrollStrategy = new _FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);
        }
        /**
         * The size of the items in the list (in pixels).
         * @return {?}
         */


        _createClass(_CdkFixedSizeVirtualScroll, [{
          key: "itemSize",
          get: function get() {
            return this._itemSize;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._itemSize = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__.coerceNumberProperty)(value);
          }
          /**
           * The minimum amount of buffer rendered beyond the viewport (in pixels).
           * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.
           * @return {?}
           */

        }, {
          key: "minBufferPx",
          get: function get() {
            return this._minBufferPx;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._minBufferPx = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__.coerceNumberProperty)(value);
          }
          /**
           * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.
           * @return {?}
           */

        }, {
          key: "maxBufferPx",
          get: function get() {
            return this._maxBufferPx;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._maxBufferPx = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__.coerceNumberProperty)(value);
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnChanges",
          value: function ngOnChanges() {
            this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);
          }
        }]);

        return _CdkFixedSizeVirtualScroll;
      }();

      _CdkFixedSizeVirtualScroll.ɵfac = function CdkFixedSizeVirtualScroll_Factory(t) {
        return new (t || _CdkFixedSizeVirtualScroll)();
      };

      _CdkFixedSizeVirtualScroll.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: _CdkFixedSizeVirtualScroll,
        selectors: [["cdk-virtual-scroll-viewport", "itemSize", ""]],
        inputs: {
          itemSize: "itemSize",
          minBufferPx: "minBufferPx",
          maxBufferPx: "maxBufferPx"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
          provide: _VIRTUAL_SCROLL_STRATEGY,
          useFactory: _fixedSizeVirtualScrollStrategyFactory2,
          deps: [(0, _angular_core__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(
          /**
          * @return {?}
          */
          function () {
            return _CdkFixedSizeVirtualScroll;
          })]
        }]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
      });
      _CdkFixedSizeVirtualScroll.propDecorators = {
        itemSize: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        minBufferPx: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        maxBufferPx: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_CdkFixedSizeVirtualScroll, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
          args: [{
            selector: 'cdk-virtual-scroll-viewport[itemSize]',
            providers: [{
              provide: _VIRTUAL_SCROLL_STRATEGY,
              useFactory: _fixedSizeVirtualScrollStrategyFactory2,
              deps: [(0, _angular_core__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(
              /**
              * @return {?}
              */
              function () {
                return _CdkFixedSizeVirtualScroll;
              })]
            }]
          }]
        }], function () {
          return [];
        }, {
          itemSize: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          minBufferPx: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          maxBufferPx: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }]
        });
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/scrolling/scroll-dispatcher.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Time in ms to throttle the scrolling events by default.
       * @type {?}
       */


      var _DEFAULT_SCROLL_TIME = 20;
      /**
       * Service contained all registered Scrollable references and emits an event when any one of the
       * Scrollable references emit a scrolled event.
       */

      var _ScrollDispatcher = /*#__PURE__*/function () {
        /**
         * @param {?} _ngZone
         * @param {?} _platform
         * @param {?=} document
         */
        function _ScrollDispatcher(_ngZone, _platform,
        /** @breaking-change 11.0.0 make document required */
        document) {
          _classCallCheck(this, _ScrollDispatcher);

          this._ngZone = _ngZone;
          this._platform = _platform;
          /**
           * Subject for notifying that a registered scrollable reference element has been scrolled.
           */

          this._scrolled = new rxjs__WEBPACK_IMPORTED_MODULE_1__.Subject();
          /**
           * Keeps track of the global `scroll` and `resize` subscriptions.
           */

          this._globalSubscription = null;
          /**
           * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.
           */

          this._scrolledCount = 0;
          /**
           * Map of all the scrollable references that are registered with the service and their
           * scroll event subscriptions.
           */

          this.scrollContainers = new Map();
          this._document = document;
        }
        /**
         * Registers a scrollable instance with the service and listens for its scrolled events. When the
         * scrollable is scrolled, the service emits the event to its scrolled observable.
         * @param {?} scrollable Scrollable instance to be registered.
         * @return {?}
         */


        _createClass(_ScrollDispatcher, [{
          key: "register",
          value: function register(scrollable) {
            var _this57 = this;

            if (!this.scrollContainers.has(scrollable)) {
              this.scrollContainers.set(scrollable, scrollable.elementScrolled().subscribe(
              /**
              * @return {?}
              */
              function () {
                return _this57._scrolled.next(scrollable);
              }));
            }
          }
          /**
           * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.
           * @param {?} scrollable Scrollable instance to be deregistered.
           * @return {?}
           */

        }, {
          key: "deregister",
          value: function deregister(scrollable) {
            /** @type {?} */
            var scrollableReference = this.scrollContainers.get(scrollable);

            if (scrollableReference) {
              scrollableReference.unsubscribe();
              this.scrollContainers["delete"](scrollable);
            }
          }
          /**
           * Returns an observable that emits an event whenever any of the registered Scrollable
           * references (or window, document, or body) fire a scrolled event. Can provide a time in ms
           * to override the default "throttle" time.
           *
           * **Note:** in order to avoid hitting change detection for every scroll event,
           * all of the events emitted from this stream will be run outside the Angular zone.
           * If you need to update any data bindings as a result of a scroll event, you have
           * to run the callback using `NgZone.run`.
           * @param {?=} auditTimeInMs
           * @return {?}
           */

        }, {
          key: "scrolled",
          value: function scrolled() {
            var _this58 = this;

            var auditTimeInMs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _DEFAULT_SCROLL_TIME;

            if (!this._platform.isBrowser) {
              return (0, rxjs__WEBPACK_IMPORTED_MODULE_4__.of)();
            }

            return new rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable(
            /**
            * @param {?} observer
            * @return {?}
            */
            function (observer) {
              if (!_this58._globalSubscription) {
                _this58._addGlobalListener();
              } // In the case of a 0ms delay, use an observable without auditTime
              // since it does add a perceptible delay in processing overhead.

              /** @type {?} */


              var subscription = auditTimeInMs > 0 ? _this58._scrolled.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.auditTime)(auditTimeInMs)).subscribe(observer) : _this58._scrolled.subscribe(observer);
              _this58._scrolledCount++;
              return (
                /**
                * @return {?}
                */
                function () {
                  subscription.unsubscribe();
                  _this58._scrolledCount--;

                  if (!_this58._scrolledCount) {
                    _this58._removeGlobalListener();
                  }
                }
              );
            });
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            var _this59 = this;

            this._removeGlobalListener();

            this.scrollContainers.forEach(
            /**
            * @param {?} _
            * @param {?} container
            * @return {?}
            */
            function (_, container) {
              return _this59.deregister(container);
            });

            this._scrolled.complete();
          }
          /**
           * Returns an observable that emits whenever any of the
           * scrollable ancestors of an element are scrolled.
           * @param {?} elementRef Element whose ancestors to listen for.
           * @param {?=} auditTimeInMs Time to throttle the scroll events.
           * @return {?}
           */

        }, {
          key: "ancestorScrolled",
          value: function ancestorScrolled(elementRef, auditTimeInMs) {
            /** @type {?} */
            var ancestors = this.getAncestorScrollContainers(elementRef);
            return this.scrolled(auditTimeInMs).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.filter)(
            /**
            * @param {?} target
            * @return {?}
            */
            function (target) {
              return !target || ancestors.indexOf(target) > -1;
            }));
          }
          /**
           * Returns all registered Scrollables that contain the provided element.
           * @param {?} elementRef
           * @return {?}
           */

        }, {
          key: "getAncestorScrollContainers",
          value: function getAncestorScrollContainers(elementRef) {
            var _this60 = this;

            /** @type {?} */
            var scrollingContainers = [];
            this.scrollContainers.forEach(
            /**
            * @param {?} _subscription
            * @param {?} scrollable
            * @return {?}
            */
            function (_subscription, scrollable) {
              if (_this60._scrollableContainsElement(scrollable, elementRef)) {
                scrollingContainers.push(scrollable);
              }
            });
            return scrollingContainers;
          }
          /**
           * Access injected document if available or fallback to global document reference
           * @private
           * @return {?}
           */

        }, {
          key: "_getDocument",
          value: function _getDocument() {
            return this._document || document;
          }
          /**
           * Use defaultView of injected document if available or fallback to global window reference
           * @private
           * @return {?}
           */

        }, {
          key: "_getWindow",
          value: function _getWindow() {
            /** @type {?} */
            var doc = this._getDocument();

            return doc.defaultView || window;
          }
          /**
           * Returns true if the element is contained within the provided Scrollable.
           * @private
           * @param {?} scrollable
           * @param {?} elementRef
           * @return {?}
           */

        }, {
          key: "_scrollableContainsElement",
          value: function _scrollableContainsElement(scrollable, elementRef) {
            /** @type {?} */
            var element = elementRef.nativeElement;
            /** @type {?} */

            var scrollableElement = scrollable.getElementRef().nativeElement; // Traverse through the element parents until we reach null, checking if any of the elements
            // are the scrollable's element.

            do {
              if (element == scrollableElement) {
                return true;
              }
            } while (element =
            /** @type {?} */
            element.parentElement);

            return false;
          }
          /**
           * Sets up the global scroll listeners.
           * @private
           * @return {?}
           */

        }, {
          key: "_addGlobalListener",
          value: function _addGlobalListener() {
            var _this61 = this;

            this._globalSubscription = this._ngZone.runOutsideAngular(
            /**
            * @return {?}
            */
            function () {
              /** @type {?} */
              var window = _this61._getWindow();

              return (0, rxjs__WEBPACK_IMPORTED_MODULE_8__.fromEvent)(window.document, 'scroll').subscribe(
              /**
              * @return {?}
              */
              function () {
                return _this61._scrolled.next();
              });
            });
          }
          /**
           * Cleans up the global scroll listener.
           * @private
           * @return {?}
           */

        }, {
          key: "_removeGlobalListener",
          value: function _removeGlobalListener() {
            if (this._globalSubscription) {
              this._globalSubscription.unsubscribe();

              this._globalSubscription = null;
            }
          }
        }]);

        return _ScrollDispatcher;
      }();

      _ScrollDispatcher.ɵfac = function ScrollDispatcher_Factory(t) {
        return new (t || _ScrollDispatcher)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.Platform), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_10__.DOCUMENT, 8));
      };
      /** @nocollapse */


      _ScrollDispatcher.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
        }, {
          type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.Platform
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_10__.DOCUMENT]
          }]
        }];
      };
      /** @nocollapse */


      _ScrollDispatcher.ɵprov = (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
        factory: function ScrollDispatcher_Factory() {
          return new _ScrollDispatcher((0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone), (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.Platform), (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_10__.DOCUMENT, 8));
        },
        token: _ScrollDispatcher,
        providedIn: "root"
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_ScrollDispatcher, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
          }, {
            type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.Platform
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_10__.DOCUMENT]
            }]
          }];
        }, null);
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/scrolling/scrollable.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Sends an event when the directive's element is scrolled. Registers itself with the
       * ScrollDispatcher service to include itself as part of its collection of scrolling events that it
       * can be listened to through the service.
       */


      var _CdkScrollable = /*#__PURE__*/function () {
        /**
         * @param {?} elementRef
         * @param {?} scrollDispatcher
         * @param {?} ngZone
         * @param {?=} dir
         */
        function _CdkScrollable(elementRef, scrollDispatcher, ngZone, dir) {
          var _this62 = this;

          _classCallCheck(this, _CdkScrollable);

          this.elementRef = elementRef;
          this.scrollDispatcher = scrollDispatcher;
          this.ngZone = ngZone;
          this.dir = dir;
          this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_1__.Subject();
          this._elementScrolled = new rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable(
          /**
          * @param {?} observer
          * @return {?}
          */
          function (observer) {
            return _this62.ngZone.runOutsideAngular(
            /**
            * @return {?}
            */
            function () {
              return (0, rxjs__WEBPACK_IMPORTED_MODULE_8__.fromEvent)(_this62.elementRef.nativeElement, 'scroll').pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_11__.takeUntil)(_this62._destroyed)).subscribe(observer);
            });
          });
        }
        /**
         * @return {?}
         */


        _createClass(_CdkScrollable, [{
          key: "ngOnInit",
          value: function ngOnInit() {
            this.scrollDispatcher.register(this);
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.scrollDispatcher.deregister(this);

            this._destroyed.next();

            this._destroyed.complete();
          }
          /**
           * Returns observable that emits when a scroll event is fired on the host element.
           * @return {?}
           */

        }, {
          key: "elementScrolled",
          value: function elementScrolled() {
            return this._elementScrolled;
          }
          /**
           * Gets the ElementRef for the viewport.
           * @return {?}
           */

        }, {
          key: "getElementRef",
          value: function getElementRef() {
            return this.elementRef;
          }
          /**
           * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo
           * method, since browsers are not consistent about what scrollLeft means in RTL. For this method
           * left and right always refer to the left and right side of the scrolling container irrespective
           * of the layout direction. start and end refer to left and right in an LTR context and vice-versa
           * in an RTL context.
           * @param {?} options specified the offsets to scroll to.
           * @return {?}
           */

        }, {
          key: "scrollTo",
          value: function scrollTo(options) {
            /** @type {?} */
            var el = this.elementRef.nativeElement;
            /** @type {?} */

            var isRtl = this.dir && this.dir.value == 'rtl'; // Rewrite start & end offsets as right or left offsets.

            if (options.left == null) {
              options.left = isRtl ? options.end : options.start;
            }

            if (options.right == null) {
              options.right = isRtl ? options.start : options.end;
            } // Rewrite the bottom offset as a top offset.


            if (options.bottom != null) {
              /** @type {?} */
              options.top = el.scrollHeight - el.clientHeight - options.bottom;
            } // Rewrite the right offset as a left offset.


            if (isRtl && (0, _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.getRtlScrollAxisType)() != 0
            /* NORMAL */
            ) {
              if (options.left != null) {
                /** @type {?} */
                options.right = el.scrollWidth - el.clientWidth - options.left;
              }

              if ((0, _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.getRtlScrollAxisType)() == 2
              /* INVERTED */
              ) {
                options.left = options.right;
              } else if ((0, _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.getRtlScrollAxisType)() == 1
              /* NEGATED */
              ) {
                options.left = options.right ? -options.right : options.right;
              }
            } else {
              if (options.right != null) {
                /** @type {?} */
                options.left = el.scrollWidth - el.clientWidth - options.right;
              }
            }

            this._applyScrollToOptions(options);
          }
          /**
           * @private
           * @param {?} options
           * @return {?}
           */

        }, {
          key: "_applyScrollToOptions",
          value: function _applyScrollToOptions(options) {
            /** @type {?} */
            var el = this.elementRef.nativeElement;

            if ((0, _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.supportsScrollBehavior)()) {
              el.scrollTo(options);
            } else {
              if (options.top != null) {
                el.scrollTop = options.top;
              }

              if (options.left != null) {
                el.scrollLeft = options.left;
              }
            }
          }
          /**
           * Measures the scroll offset relative to the specified edge of the viewport. This method can be
           * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent
           * about what scrollLeft means in RTL. The values returned by this method are normalized such that
           * left and right always refer to the left and right side of the scrolling container irrespective
           * of the layout direction. start and end refer to left and right in an LTR context and vice-versa
           * in an RTL context.
           * @param {?} from The edge to measure from.
           * @return {?}
           */

        }, {
          key: "measureScrollOffset",
          value: function measureScrollOffset(from) {
            /** @type {?} */
            var LEFT = 'left';
            /** @type {?} */

            var RIGHT = 'right';
            /** @type {?} */

            var el = this.elementRef.nativeElement;

            if (from == 'top') {
              return el.scrollTop;
            }

            if (from == 'bottom') {
              return el.scrollHeight - el.clientHeight - el.scrollTop;
            } // Rewrite start & end as left or right offsets.

            /** @type {?} */


            var isRtl = this.dir && this.dir.value == 'rtl';

            if (from == 'start') {
              from = isRtl ? RIGHT : LEFT;
            } else if (from == 'end') {
              from = isRtl ? LEFT : RIGHT;
            }

            if (isRtl && (0, _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.getRtlScrollAxisType)() == 2
            /* INVERTED */
            ) {
              // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and
              // 0 when scrolled all the way right.
              if (from == LEFT) {
                return el.scrollWidth - el.clientWidth - el.scrollLeft;
              } else {
                return el.scrollLeft;
              }
            } else if (isRtl && (0, _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.getRtlScrollAxisType)() == 1
            /* NEGATED */
            ) {
              // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and
              // 0 when scrolled all the way right.
              if (from == LEFT) {
                return el.scrollLeft + el.scrollWidth - el.clientWidth;
              } else {
                return -el.scrollLeft;
              }
            } else {
              // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and
              // (scrollWidth - clientWidth) when scrolled all the way right.
              if (from == LEFT) {
                return el.scrollLeft;
              } else {
                return el.scrollWidth - el.clientWidth - el.scrollLeft;
              }
            }
          }
        }]);

        return _CdkScrollable;
      }();

      _CdkScrollable.ɵfac = function CdkScrollable_Factory(t) {
        return new (t || _CdkScrollable)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_ScrollDispatcher), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_12__.Directionality, 8));
      };

      _CdkScrollable.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: _CdkScrollable,
        selectors: [["", "cdk-scrollable", ""], ["", "cdkScrollable", ""]]
      });
      /** @nocollapse */

      _CdkScrollable.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
        }, {
          type: _ScrollDispatcher
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
        }, {
          type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_12__.Directionality,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_CdkScrollable, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
          args: [{
            selector: '[cdk-scrollable], [cdkScrollable]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
          }, {
            type: _ScrollDispatcher
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
          }, {
            type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_12__.Directionality,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
            }]
          }];
        }, null);
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/scrolling/viewport-ruler.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Time in ms to throttle the resize events by default.
       * @type {?}
       */


      var _DEFAULT_RESIZE_TIME = 20;
      /**
       * Object that holds the scroll position of the viewport in each direction.
       * @record
       */

      function ViewportScrollPosition() {}

      if (false) {}
      /**
       * Simple utility for getting the bounds of the browser viewport.
       * \@docs-private
       */


      var _ViewportRuler = /*#__PURE__*/function () {
        /**
         * @param {?} _platform
         * @param {?} ngZone
         * @param {?=} document
         */
        function _ViewportRuler(_platform, ngZone,
        /** @breaking-change 11.0.0 make document required */
        document) {
          var _this63 = this;

          _classCallCheck(this, _ViewportRuler);

          this._platform = _platform;
          this._document = document;
          ngZone.runOutsideAngular(
          /**
          * @return {?}
          */
          function () {
            /** @type {?} */
            var window = _this63._getWindow();

            _this63._change = _platform.isBrowser ? (0, rxjs__WEBPACK_IMPORTED_MODULE_13__.merge)((0, rxjs__WEBPACK_IMPORTED_MODULE_8__.fromEvent)(window, 'resize'), (0, rxjs__WEBPACK_IMPORTED_MODULE_8__.fromEvent)(window, 'orientationchange')) : (0, rxjs__WEBPACK_IMPORTED_MODULE_4__.of)(); // Note that we need to do the subscription inside `runOutsideAngular`
            // since subscribing is what causes the event listener to be added.

            _this63._invalidateCache = _this63.change().subscribe(
            /**
            * @return {?}
            */
            function () {
              return _this63._updateViewportSize();
            });
          });
        }
        /**
         * @return {?}
         */


        _createClass(_ViewportRuler, [{
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this._invalidateCache.unsubscribe();
          }
          /**
           * Returns the viewport's width and height.
           * @return {?}
           */

        }, {
          key: "getViewportSize",
          value: function getViewportSize() {
            if (!this._viewportSize) {
              this._updateViewportSize();
            }
            /** @type {?} */


            var output = {
              width: this._viewportSize.width,
              height: this._viewportSize.height
            }; // If we're not on a browser, don't cache the size since it'll be mocked out anyway.

            if (!this._platform.isBrowser) {
              this._viewportSize =
              /** @type {?} */
              null;
            }

            return output;
          }
          /**
           * Gets a ClientRect for the viewport's bounds.
           * @return {?}
           */

        }, {
          key: "getViewportRect",
          value: function getViewportRect() {
            // Use the document element's bounding rect rather than the window scroll properties
            // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll
            // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different
            // conceptual viewports. Under most circumstances these viewports are equivalent, but they
            // can disagree when the page is pinch-zoomed (on devices that support touch).
            // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4
            // We use the documentElement instead of the body because, by default (without a css reset)
            // browsers typically give the document body an 8px margin, which is not included in
            // getBoundingClientRect().

            /** @type {?} */
            var scrollPosition = this.getViewportScrollPosition();

            var _this$getViewportSize = this.getViewportSize(),
                width = _this$getViewportSize.width,
                height = _this$getViewportSize.height;

            return {
              top: scrollPosition.top,
              left: scrollPosition.left,
              bottom: scrollPosition.top + height,
              right: scrollPosition.left + width,
              height: height,
              width: width
            };
          }
          /**
           * Gets the (top, left) scroll position of the viewport.
           * @return {?}
           */

        }, {
          key: "getViewportScrollPosition",
          value: function getViewportScrollPosition() {
            // While we can get a reference to the fake document
            // during SSR, it doesn't have getBoundingClientRect.
            if (!this._platform.isBrowser) {
              return {
                top: 0,
                left: 0
              };
            } // The top-left-corner of the viewport is determined by the scroll position of the document
            // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about
            // whether `document.body` or `document.documentElement` is the scrolled element, so reading
            // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of
            // `document.documentElement` works consistently, where the `top` and `left` values will
            // equal negative the scroll position.

            /** @type {?} */


            var document = this._getDocument();
            /** @type {?} */


            var window = this._getWindow();
            /** @type {?} */


            var documentElement =
            /** @type {?} */
            document.documentElement;
            /** @type {?} */

            var documentRect = documentElement.getBoundingClientRect();
            /** @type {?} */

            var top = -documentRect.top || document.body.scrollTop || window.scrollY || documentElement.scrollTop || 0;
            /** @type {?} */

            var left = -documentRect.left || document.body.scrollLeft || window.scrollX || documentElement.scrollLeft || 0;
            return {
              top: top,
              left: left
            };
          }
          /**
           * Returns a stream that emits whenever the size of the viewport changes.
           * @param {?=} throttleTime Time in milliseconds to throttle the stream.
           * @return {?}
           */

        }, {
          key: "change",
          value: function change() {
            var throttleTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _DEFAULT_RESIZE_TIME;
            return throttleTime > 0 ? this._change.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.auditTime)(throttleTime)) : this._change;
          }
          /**
           * Access injected document if available or fallback to global document reference
           * @private
           * @return {?}
           */

        }, {
          key: "_getDocument",
          value: function _getDocument() {
            return this._document || document;
          }
          /**
           * Use defaultView of injected document if available or fallback to global window reference
           * @private
           * @return {?}
           */

        }, {
          key: "_getWindow",
          value: function _getWindow() {
            /** @type {?} */
            var doc = this._getDocument();

            return doc.defaultView || window;
          }
          /**
           * Updates the cached viewport size.
           * @private
           * @return {?}
           */

        }, {
          key: "_updateViewportSize",
          value: function _updateViewportSize() {
            /** @type {?} */
            var window = this._getWindow();

            this._viewportSize = this._platform.isBrowser ? {
              width: window.innerWidth,
              height: window.innerHeight
            } : {
              width: 0,
              height: 0
            };
          }
        }]);

        return _ViewportRuler;
      }();

      _ViewportRuler.ɵfac = function ViewportRuler_Factory(t) {
        return new (t || _ViewportRuler)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.Platform), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_10__.DOCUMENT, 8));
      };
      /** @nocollapse */


      _ViewportRuler.ctorParameters = function () {
        return [{
          type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.Platform
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_10__.DOCUMENT]
          }]
        }];
      };
      /** @nocollapse */


      _ViewportRuler.ɵprov = (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
        factory: function ViewportRuler_Factory() {
          return new _ViewportRuler((0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.Platform), (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone), (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_10__.DOCUMENT, 8));
        },
        token: _ViewportRuler,
        providedIn: "root"
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_ViewportRuler, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [{
            type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.Platform
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_10__.DOCUMENT]
            }]
          }];
        }, null);
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/scrolling/virtual-scroll-viewport.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Checks if the given ranges are equal.
       * @param {?} r1
       * @param {?} r2
       * @return {?}
       */


      function rangesEqual(r1, r2) {
        return r1.start == r2.start && r1.end == r2.end;
      }
      /**
       * Scheduler to be used for scroll events. Needs to fall back to
       * something that doesn't rely on requestAnimationFrame on environments
       * that don't support it (e.g. server-side rendering).
       * @type {?}
       */


      var SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? rxjs__WEBPACK_IMPORTED_MODULE_14__.animationFrame : rxjs__WEBPACK_IMPORTED_MODULE_15__.asap;
      /**
       * A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`.
       */

      var _CdkVirtualScrollViewport = /*#__PURE__*/function (_CdkScrollable2) {
        _inherits(_CdkVirtualScrollViewport, _CdkScrollable2);

        var _super16 = _createSuper(_CdkVirtualScrollViewport);

        /**
         * @param {?} elementRef
         * @param {?} _changeDetectorRef
         * @param {?} ngZone
         * @param {?} _scrollStrategy
         * @param {?} dir
         * @param {?} scrollDispatcher
         * @param {?=} viewportRuler
         */
        function _CdkVirtualScrollViewport(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher,
        /**
         * @deprecated `viewportRuler` parameter to become required.
         * @breaking-change 11.0.0
         */
        viewportRuler) {
          var _this64;

          _classCallCheck(this, _CdkVirtualScrollViewport);

          _this64 = _super16.call(this, elementRef, scrollDispatcher, ngZone, dir);
          _this64.elementRef = elementRef;
          _this64._changeDetectorRef = _changeDetectorRef;
          _this64._scrollStrategy = _scrollStrategy;
          /**
           * Emits when the viewport is detached from a CdkVirtualForOf.
           */

          _this64._detachedSubject = new rxjs__WEBPACK_IMPORTED_MODULE_1__.Subject();
          /**
           * Emits when the rendered range changes.
           */

          _this64._renderedRangeSubject = new rxjs__WEBPACK_IMPORTED_MODULE_1__.Subject();
          _this64._orientation = 'vertical'; // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll
          // strategy lazily (i.e. only if the user is actually listening to the events). We do this because
          // depending on how the strategy calculates the scrolled index, it may come at a cost to
          // performance.

          /**
           * Emits when the index of the first element visible in the viewport changes.
           */

          _this64.scrolledIndexChange = new rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable(
          /**
          * @param {?} observer
          * @return {?}
          */
          function (observer) {
            return _this64._scrollStrategy.scrolledIndexChange.subscribe(
            /**
            * @param {?} index
            * @return {?}
            */
            function (index) {
              return Promise.resolve().then(
              /**
              * @return {?}
              */
              function () {
                return _this64.ngZone.run(
                /**
                * @return {?}
                */
                function () {
                  return observer.next(index);
                });
              });
            });
          });
          /**
           * A stream that emits whenever the rendered range changes.
           */

          _this64.renderedRangeStream = _this64._renderedRangeSubject.asObservable();
          /**
           * The total size of all content (in pixels), including content that is not currently rendered.
           */

          _this64._totalContentSize = 0;
          /**
           * A string representing the `style.width` property value to be used for the spacer element.
           */

          _this64._totalContentWidth = '';
          /**
           * A string representing the `style.height` property value to be used for the spacer element.
           */

          _this64._totalContentHeight = '';
          /**
           * The currently rendered range of indices.
           */

          _this64._renderedRange = {
            start: 0,
            end: 0
          };
          /**
           * The length of the data bound to this viewport (in number of items).
           */

          _this64._dataLength = 0;
          /**
           * The size of the viewport (in pixels).
           */

          _this64._viewportSize = 0;
          /**
           * The last rendered content offset that was set.
           */

          _this64._renderedContentOffset = 0;
          /**
           * Whether the last rendered content offset was to the end of the content (and therefore needs to
           * be rewritten as an offset to the start of the content).
           */

          _this64._renderedContentOffsetNeedsRewrite = false;
          /**
           * Whether there is a pending change detection cycle.
           */

          _this64._isChangeDetectionPending = false;
          /**
           * A list of functions to run after the next change detection cycle.
           */

          _this64._runAfterChangeDetection = [];
          /**
           * Subscription to changes in the viewport size.
           */

          _this64._viewportChanges = rxjs__WEBPACK_IMPORTED_MODULE_16__.Subscription.EMPTY;

          if (!_scrollStrategy) {
            throw Error('Error: cdk-virtual-scroll-viewport requires the "itemSize" property to be set.');
          } // @breaking-change 11.0.0 Remove null check for `viewportRuler`.


          if (viewportRuler) {
            _this64._viewportChanges = viewportRuler.change().subscribe(
            /**
            * @return {?}
            */
            function () {
              _this64.checkViewportSize();
            });
          }

          return _this64;
        }
        /**
         * The direction the viewport scrolls.
         * @return {?}
         */


        _createClass(_CdkVirtualScrollViewport, [{
          key: "orientation",
          get: function get() {
            return this._orientation;
          }
          /**
           * @param {?} orientation
           * @return {?}
           */
          ,
          set: function set(orientation) {
            if (this._orientation !== orientation) {
              this._orientation = orientation;

              this._calculateSpacerSize();
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnInit",
          value: function ngOnInit() {
            var _this65 = this;

            _get(_getPrototypeOf(_CdkVirtualScrollViewport.prototype), "ngOnInit", this).call(this); // It's still too early to measure the viewport at this point. Deferring with a promise allows
            // the Viewport to be rendered with the correct size before we measure. We run this outside the
            // zone to avoid causing more change detection cycles. We handle the change detection loop
            // ourselves instead.


            this.ngZone.runOutsideAngular(
            /**
            * @return {?}
            */
            function () {
              return Promise.resolve().then(
              /**
              * @return {?}
              */
              function () {
                _this65._measureViewportSize();

                _this65._scrollStrategy.attach(_this65);

                _this65.elementScrolled().pipe( // Start off with a fake scroll event so we properly detect our initial position.
                (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_17__.startWith)(
                /** @type {?} */
                null), // Collect multiple events into one until the next animation frame. This way if
                // there are multiple scroll events in the same frame we only need to recheck
                // our layout once.
                (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.auditTime)(0, SCROLL_SCHEDULER)).subscribe(
                /**
                * @return {?}
                */
                function () {
                  return _this65._scrollStrategy.onContentScrolled();
                });

                _this65._markChangeDetectionNeeded();
              });
            });
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.detach();

            this._scrollStrategy.detach(); // Complete all subjects


            this._renderedRangeSubject.complete();

            this._detachedSubject.complete();

            this._viewportChanges.unsubscribe();

            _get(_getPrototypeOf(_CdkVirtualScrollViewport.prototype), "ngOnDestroy", this).call(this);
          }
          /**
           * Attaches a `CdkVirtualForOf` to this viewport.
           * @param {?} forOf
           * @return {?}
           */

        }, {
          key: "attach",
          value: function attach(forOf) {
            var _this66 = this;

            if (this._forOf) {
              throw Error('CdkVirtualScrollViewport is already attached.');
            } // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length
            // changes. Run outside the zone to avoid triggering change detection, since we're managing the
            // change detection loop ourselves.


            this.ngZone.runOutsideAngular(
            /**
            * @return {?}
            */
            function () {
              _this66._forOf = forOf;

              _this66._forOf.dataStream.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_11__.takeUntil)(_this66._detachedSubject)).subscribe(
              /**
              * @param {?} data
              * @return {?}
              */
              function (data) {
                /** @type {?} */
                var newLength = data.length;

                if (newLength !== _this66._dataLength) {
                  _this66._dataLength = newLength;

                  _this66._scrollStrategy.onDataLengthChanged();
                }

                _this66._doChangeDetection();
              });
            });
          }
          /**
           * Detaches the current `CdkVirtualForOf`.
           * @return {?}
           */

        }, {
          key: "detach",
          value: function detach() {
            this._forOf = null;

            this._detachedSubject.next();
          }
          /**
           * Gets the length of the data bound to this viewport (in number of items).
           * @return {?}
           */

        }, {
          key: "getDataLength",
          value: function getDataLength() {
            return this._dataLength;
          }
          /**
           * Gets the size of the viewport (in pixels).
           * @return {?}
           */

        }, {
          key: "getViewportSize",
          value: function getViewportSize() {
            return this._viewportSize;
          } // TODO(mmalerba): This is technically out of sync with what's really rendered until a render
          // cycle happens. I'm being careful to only call it after the render cycle is complete and before
          // setting it to something else, but its error prone and should probably be split into
          // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.

          /**
           * Get the current rendered range of items.
           * @return {?}
           */

        }, {
          key: "getRenderedRange",
          value: function getRenderedRange() {
            return this._renderedRange;
          }
          /**
           * Sets the total size of all content (in pixels), including content that is not currently
           * rendered.
           * @param {?} size
           * @return {?}
           */

        }, {
          key: "setTotalContentSize",
          value: function setTotalContentSize(size) {
            if (this._totalContentSize !== size) {
              this._totalContentSize = size;

              this._calculateSpacerSize();

              this._markChangeDetectionNeeded();
            }
          }
          /**
           * Sets the currently rendered range of indices.
           * @param {?} range
           * @return {?}
           */

        }, {
          key: "setRenderedRange",
          value: function setRenderedRange(range) {
            var _this67 = this;

            if (!rangesEqual(this._renderedRange, range)) {
              this._renderedRangeSubject.next(this._renderedRange = range);

              this._markChangeDetectionNeeded(
              /**
              * @return {?}
              */
              function () {
                return _this67._scrollStrategy.onContentRendered();
              });
            }
          }
          /**
           * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).
           * @return {?}
           */

        }, {
          key: "getOffsetToRenderedContentStart",
          value: function getOffsetToRenderedContentStart() {
            return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;
          }
          /**
           * Sets the offset from the start of the viewport to either the start or end of the rendered data
           * (in pixels).
           * @param {?} offset
           * @param {?=} to
           * @return {?}
           */

        }, {
          key: "setRenderedContentOffset",
          value: function setRenderedContentOffset(offset) {
            var _this68 = this;

            var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'to-start';
            // For a horizontal viewport in a right-to-left language we need to translate along the x-axis
            // in the negative direction.

            /** @type {?} */
            var isRtl = this.dir && this.dir.value == 'rtl';
            /** @type {?} */

            var isHorizontal = this.orientation == 'horizontal';
            /** @type {?} */

            var axis = isHorizontal ? 'X' : 'Y';
            /** @type {?} */

            var axisDirection = isHorizontal && isRtl ? -1 : 1;
            /** @type {?} */

            var transform = "translate".concat(axis, "(").concat(Number(axisDirection * offset), "px)");
            this._renderedContentOffset = offset;

            if (to === 'to-end') {
              transform += " translate".concat(axis, "(-100%)"); // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise
              // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would
              // expand upward).

              this._renderedContentOffsetNeedsRewrite = true;
            }

            if (this._renderedContentTransform != transform) {
              // We know this value is safe because we parse `offset` with `Number()` before passing it
              // into the string.
              this._renderedContentTransform = transform;

              this._markChangeDetectionNeeded(
              /**
              * @return {?}
              */
              function () {
                if (_this68._renderedContentOffsetNeedsRewrite) {
                  _this68._renderedContentOffset -= _this68.measureRenderedContentSize();
                  _this68._renderedContentOffsetNeedsRewrite = false;

                  _this68.setRenderedContentOffset(_this68._renderedContentOffset);
                } else {
                  _this68._scrollStrategy.onRenderedOffsetChanged();
                }
              });
            }
          }
          /**
           * Scrolls to the given offset from the start of the viewport. Please note that this is not always
           * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left
           * direction, this would be the equivalent of setting a fictional `scrollRight` property.
           * @param {?} offset The offset to scroll to.
           * @param {?=} behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.
           * @return {?}
           */

        }, {
          key: "scrollToOffset",
          value: function scrollToOffset(offset) {
            var behavior = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'auto';

            /** @type {?} */
            var options = {
              behavior: behavior
            };

            if (this.orientation === 'horizontal') {
              options.start = offset;
            } else {
              options.top = offset;
            }

            this.scrollTo(options);
          }
          /**
           * Scrolls to the offset for the given index.
           * @param {?} index The index of the element to scroll to.
           * @param {?=} behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.
           * @return {?}
           */

        }, {
          key: "scrollToIndex",
          value: function scrollToIndex(index) {
            var behavior = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'auto';

            this._scrollStrategy.scrollToIndex(index, behavior);
          }
          /**
           * Gets the current scroll offset from the start of the viewport (in pixels).
           * @param {?=} from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'
           *     in horizontal mode.
           * @return {?}
           */

        }, {
          key: "measureScrollOffset",
          value: function measureScrollOffset(from) {
            return from ? _get(_getPrototypeOf(_CdkVirtualScrollViewport.prototype), "measureScrollOffset", this).call(this, from) : _get(_getPrototypeOf(_CdkVirtualScrollViewport.prototype), "measureScrollOffset", this).call(this, this.orientation === 'horizontal' ? 'start' : 'top');
          }
          /**
           * Measure the combined size of all of the rendered items.
           * @return {?}
           */

        }, {
          key: "measureRenderedContentSize",
          value: function measureRenderedContentSize() {
            /** @type {?} */
            var contentEl = this._contentWrapper.nativeElement;
            return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;
          }
          /**
           * Measure the total combined size of the given range. Throws if the range includes items that are
           * not rendered.
           * @param {?} range
           * @return {?}
           */

        }, {
          key: "measureRangeSize",
          value: function measureRangeSize(range) {
            if (!this._forOf) {
              return 0;
            }

            return this._forOf.measureRangeSize(range, this.orientation);
          }
          /**
           * Update the viewport dimensions and re-render.
           * @return {?}
           */

        }, {
          key: "checkViewportSize",
          value: function checkViewportSize() {
            // TODO: Cleanup later when add logic for handling content resize
            this._measureViewportSize();

            this._scrollStrategy.onDataLengthChanged();
          }
          /**
           * Measure the viewport size.
           * @private
           * @return {?}
           */

        }, {
          key: "_measureViewportSize",
          value: function _measureViewportSize() {
            /** @type {?} */
            var viewportEl = this.elementRef.nativeElement;
            this._viewportSize = this.orientation === 'horizontal' ? viewportEl.clientWidth : viewportEl.clientHeight;
          }
          /**
           * Queue up change detection to run.
           * @private
           * @param {?=} runAfter
           * @return {?}
           */

        }, {
          key: "_markChangeDetectionNeeded",
          value: function _markChangeDetectionNeeded(runAfter) {
            var _this69 = this;

            if (runAfter) {
              this._runAfterChangeDetection.push(runAfter);
            } // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of
            // properties sequentially we only have to run `_doChangeDetection` once at the end.


            if (!this._isChangeDetectionPending) {
              this._isChangeDetectionPending = true;
              this.ngZone.runOutsideAngular(
              /**
              * @return {?}
              */
              function () {
                return Promise.resolve().then(
                /**
                * @return {?}
                */
                function () {
                  _this69._doChangeDetection();
                });
              });
            }
          }
          /**
           * Run change detection.
           * @private
           * @return {?}
           */

        }, {
          key: "_doChangeDetection",
          value: function _doChangeDetection() {
            var _this70 = this;

            this._isChangeDetectionPending = false; // Apply the content transform. The transform can't be set via an Angular binding because
            // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of
            // string literals, a variable that can only be 'X' or 'Y', and user input that is run through
            // the `Number` function first to coerce it to a numeric value.

            this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform; // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection
            // from the root, since the repeated items are content projected in. Calling `detectChanges`
            // instead does not properly check the projected content.

            this.ngZone.run(
            /**
            * @return {?}
            */
            function () {
              return _this70._changeDetectorRef.markForCheck();
            });
            /** @type {?} */

            var runAfterChangeDetection = this._runAfterChangeDetection;
            this._runAfterChangeDetection = [];

            var _iterator4 = _createForOfIteratorHelper(runAfterChangeDetection),
                _step4;

            try {
              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                var fn = _step4.value;
                fn();
              }
            } catch (err) {
              _iterator4.e(err);
            } finally {
              _iterator4.f();
            }
          }
          /**
           * Calculates the `style.width` and `style.height` for the spacer element.
           * @private
           * @return {?}
           */

        }, {
          key: "_calculateSpacerSize",
          value: function _calculateSpacerSize() {
            this._totalContentHeight = this.orientation === 'horizontal' ? '' : "".concat(this._totalContentSize, "px");
            this._totalContentWidth = this.orientation === 'horizontal' ? "".concat(this._totalContentSize, "px") : '';
          }
        }]);

        return _CdkVirtualScrollViewport;
      }(_CdkScrollable);

      _CdkVirtualScrollViewport.ɵfac = function CdkVirtualScrollViewport_Factory(t) {
        return new (t || _CdkVirtualScrollViewport)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_VIRTUAL_SCROLL_STRATEGY, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_12__.Directionality, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_ScrollDispatcher), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_ViewportRuler, 8));
      };

      _CdkVirtualScrollViewport.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: _CdkVirtualScrollViewport,
        selectors: [["cdk-virtual-scroll-viewport"]],
        viewQuery: function CdkVirtualScrollViewport_Query(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c0, 7);
          }

          if (rf & 2) {
            var _t;

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx._contentWrapper = _t.first);
          }
        },
        hostAttrs: [1, "cdk-virtual-scroll-viewport"],
        hostVars: 4,
        hostBindings: function CdkVirtualScrollViewport_HostBindings(rf, ctx) {
          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("cdk-virtual-scroll-orientation-horizontal", ctx.orientation === "horizontal")("cdk-virtual-scroll-orientation-vertical", ctx.orientation !== "horizontal");
          }
        },
        inputs: {
          orientation: "orientation"
        },
        outputs: {
          scrolledIndexChange: "scrolledIndexChange"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
          provide: _CdkScrollable,
          useExisting: _CdkVirtualScrollViewport
        }]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]],
        ngContentSelectors: _c1,
        decls: 4,
        vars: 4,
        consts: [[1, "cdk-virtual-scroll-content-wrapper"], ["contentWrapper", ""], [1, "cdk-virtual-scroll-spacer"]],
        template: function CdkVirtualScrollViewport_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0, 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](3, "div", 2);
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("width", ctx._totalContentWidth)("height", ctx._totalContentHeight);
          }
        },
        styles: ["cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\n"],
        encapsulation: 2,
        changeDetection: 0
      });
      /** @nocollapse */

      _CdkVirtualScrollViewport.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
            args: [_VIRTUAL_SCROLL_STRATEGY]
          }]
        }, {
          type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_12__.Directionality,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
          }]
        }, {
          type: _ScrollDispatcher
        }, {
          type: _ViewportRuler,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
          }]
        }];
      };

      _CdkVirtualScrollViewport.propDecorators = {
        orientation: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        scrolledIndexChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
        }],
        _contentWrapper: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
          args: ['contentWrapper', {
            "static": true
          }]
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_CdkVirtualScrollViewport, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
          args: [{
            selector: 'cdk-virtual-scroll-viewport',
            template: "<!--\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\n  position.\n-->\n<div #contentWrapper class=\"cdk-virtual-scroll-content-wrapper\">\n  <ng-content></ng-content>\n</div>\n<!--\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\n  so that the scrollbar captures the size of the entire data set.\n-->\n<div class=\"cdk-virtual-scroll-spacer\"\n     [style.width]=\"_totalContentWidth\" [style.height]=\"_totalContentHeight\"></div>\n",
            host: {
              'class': 'cdk-virtual-scroll-viewport',
              '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === "horizontal"',
              '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== "horizontal"'
            },
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewEncapsulation.None,
            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.OnPush,
            providers: [{
              provide: _CdkScrollable,
              useExisting: _CdkVirtualScrollViewport
            }],
            styles: ["cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\n"]
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
              args: [_VIRTUAL_SCROLL_STRATEGY]
            }]
          }, {
            type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_12__.Directionality,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
            }]
          }, {
            type: _ScrollDispatcher
          }, {
            type: _ViewportRuler,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
            }]
          }];
        }, {
          scrolledIndexChange: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
          }],
          orientation: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          _contentWrapper: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
            args: ['contentWrapper', {
              "static": true
            }]
          }]
        });
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/scrolling/virtual-for-of.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Helper to extract size from a DOM Node.
       * @param {?} orientation
       * @param {?} node
       * @return {?}
       */


      function getSize(orientation, node) {
        /** @type {?} */
        var el =
        /** @type {?} */
        node;

        if (!el.getBoundingClientRect) {
          return 0;
        }
        /** @type {?} */


        var rect = el.getBoundingClientRect();
        return orientation == 'horizontal' ? rect.width : rect.height;
      }
      /**
       * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling
       * container.
       * @template T
       */


      var _CdkVirtualForOf = /*#__PURE__*/function () {
        /**
         * @param {?} _viewContainerRef
         * @param {?} _template
         * @param {?} _differs
         * @param {?} _viewport
         * @param {?} ngZone
         */
        function _CdkVirtualForOf(_viewContainerRef, _template, _differs, _viewport, ngZone) {
          var _this71 = this;

          _classCallCheck(this, _CdkVirtualForOf);

          this._viewContainerRef = _viewContainerRef;
          this._template = _template;
          this._differs = _differs;
          this._viewport = _viewport;
          /**
           * Emits when the rendered view of the data changes.
           */

          this.viewChange = new rxjs__WEBPACK_IMPORTED_MODULE_1__.Subject();
          /**
           * Subject that emits when a new DataSource instance is given.
           */

          this._dataSourceChanges = new rxjs__WEBPACK_IMPORTED_MODULE_1__.Subject();
          /**
           * The size of the cache used to store templates that are not being used for re-use later.
           * Setting the cache size to `0` will disable caching. Defaults to 20 templates.
           */

          this.cdkVirtualForTemplateCacheSize = 20;
          /**
           * Emits whenever the data in the current DataSource changes.
           */

          this.dataStream = this._dataSourceChanges.pipe( // Start off with null `DataSource`.
          (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_17__.startWith)(
          /** @type {?} */
          null), // Bundle up the previous and current data sources so we can work with both.
          (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_18__.pairwise)(), // Use `_changeDataSource` to disconnect from the previous data source and connect to the
          // new one, passing back a stream of data changes which we run through `switchMap` to give
          // us a data stream that emits the latest data from whatever the current `DataSource` is.
          (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_19__.switchMap)(
          /**
          * @param {?} __0
          * @return {?}
          */
          function (_ref) {
            var _ref2 = _slicedToArray(_ref, 2),
                prev = _ref2[0],
                cur = _ref2[1];

            return _this71._changeDataSource(prev, cur);
          }), // Replay the last emitted data when someone subscribes.
          (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_20__.shareReplay)(1));
          /**
           * The differ used to calculate changes to the data.
           */

          this._differ = null;
          /**
           * The template cache used to hold on ot template instancess that have been stamped out, but don't
           * currently need to be rendered. These instances will be reused in the future rather than
           * stamping out brand new ones.
           */

          this._templateCache = [];
          /**
           * Whether the rendered data should be updated during the next ngDoCheck cycle.
           */

          this._needsUpdate = false;
          this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_1__.Subject();
          this.dataStream.subscribe(
          /**
          * @param {?} data
          * @return {?}
          */
          function (data) {
            _this71._data = data;

            _this71._onRenderedDataChange();
          });

          this._viewport.renderedRangeStream.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_11__.takeUntil)(this._destroyed)).subscribe(
          /**
          * @param {?} range
          * @return {?}
          */
          function (range) {
            _this71._renderedRange = range;
            ngZone.run(
            /**
            * @return {?}
            */
            function () {
              return _this71.viewChange.next(_this71._renderedRange);
            });

            _this71._onRenderedDataChange();
          });

          this._viewport.attach(this);
        }
        /**
         * The DataSource to display.
         * @return {?}
         */


        _createClass(_CdkVirtualForOf, [{
          key: "cdkVirtualForOf",
          get: function get() {
            return this._cdkVirtualForOf;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._cdkVirtualForOf = value;

            if ((0, _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_21__.isDataSource)(value)) {
              this._dataSourceChanges.next(value);
            } else {
              // Slice the value if its an NgIterable to ensure we're working with an array.
              this._dataSourceChanges.next(new _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_21__.ArrayDataSource((0, rxjs__WEBPACK_IMPORTED_MODULE_22__.isObservable)(value) ? value : Array.prototype.slice.call(value || [])));
            }
          }
          /**
           * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and
           * the item and produces a value to be used as the item's identity when tracking changes.
           * @return {?}
           */

        }, {
          key: "cdkVirtualForTrackBy",
          get: function get() {
            return this._cdkVirtualForTrackBy;
          }
          /**
           * @param {?} fn
           * @return {?}
           */
          ,
          set: function set(fn) {
            var _this72 = this;

            this._needsUpdate = true;
            this._cdkVirtualForTrackBy = fn ?
            /**
            * @param {?} index
            * @param {?} item
            * @return {?}
            */
            function (index, item) {
              return fn(index + (_this72._renderedRange ? _this72._renderedRange.start : 0), item);
            } : undefined;
          }
          /**
           * The template used to stamp out new elements.
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "cdkVirtualForTemplate",
          set: function set(value) {
            if (value) {
              this._needsUpdate = true;
              this._template = value;
            }
          }
          /**
           * Measures the combined size (width for horizontal orientation, height for vertical) of all items
           * in the specified range. Throws an error if the range includes items that are not currently
           * rendered.
           * @param {?} range
           * @param {?} orientation
           * @return {?}
           */

        }, {
          key: "measureRangeSize",
          value: function measureRangeSize(range, orientation) {
            if (range.start >= range.end) {
              return 0;
            }

            if (range.start < this._renderedRange.start || range.end > this._renderedRange.end) {
              throw Error("Error: attempted to measure an item that isn't rendered.");
            } // The index into the list of rendered views for the first item in the range.

            /** @type {?} */


            var renderedStartIndex = range.start - this._renderedRange.start; // The length of the range we're measuring.

            /** @type {?} */

            var rangeLen = range.end - range.start; // Loop over all root nodes for all items in the range and sum up their size.

            /** @type {?} */

            var totalSize = 0;
            /** @type {?} */

            var i = rangeLen;

            while (i--) {
              /** @type {?} */
              var view =
              /** @type {?} */
              this._viewContainerRef.get(i + renderedStartIndex);
              /** @type {?} */


              var j = view ? view.rootNodes.length : 0;

              while (j--) {
                totalSize += getSize(orientation,
                /** @type {?} */
                view.rootNodes[j]);
              }
            }

            return totalSize;
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngDoCheck",
          value: function ngDoCheck() {
            if (this._differ && this._needsUpdate) {
              // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of
              // this list being rendered (can use simpler algorithm) vs needs update due to data actually
              // changing (need to do this diff).

              /** @type {?} */
              var changes = this._differ.diff(this._renderedItems);

              if (!changes) {
                this._updateContext();
              } else {
                this._applyChanges(changes);
              }

              this._needsUpdate = false;
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this._viewport.detach();

            this._dataSourceChanges.next();

            this._dataSourceChanges.complete();

            this.viewChange.complete();

            this._destroyed.next();

            this._destroyed.complete();

            var _iterator5 = _createForOfIteratorHelper(this._templateCache),
                _step5;

            try {
              for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                var view = _step5.value;
                view.destroy();
              }
            } catch (err) {
              _iterator5.e(err);
            } finally {
              _iterator5.f();
            }
          }
          /**
           * React to scroll state changes in the viewport.
           * @private
           * @return {?}
           */

        }, {
          key: "_onRenderedDataChange",
          value: function _onRenderedDataChange() {
            if (!this._renderedRange) {
              return;
            }

            this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);

            if (!this._differ) {
              this._differ = this._differs.find(this._renderedItems).create(this.cdkVirtualForTrackBy);
            }

            this._needsUpdate = true;
          }
          /**
           * Swap out one `DataSource` for another.
           * @private
           * @param {?} oldDs
           * @param {?} newDs
           * @return {?}
           */

        }, {
          key: "_changeDataSource",
          value: function _changeDataSource(oldDs, newDs) {
            if (oldDs) {
              oldDs.disconnect(this);
            }

            this._needsUpdate = true;
            return newDs ? newDs.connect(this) : (0, rxjs__WEBPACK_IMPORTED_MODULE_4__.of)();
          }
          /**
           * Update the `CdkVirtualForOfContext` for all views.
           * @private
           * @return {?}
           */

        }, {
          key: "_updateContext",
          value: function _updateContext() {
            /** @type {?} */
            var count = this._data.length;
            /** @type {?} */

            var i = this._viewContainerRef.length;

            while (i--) {
              /** @type {?} */
              var view =
              /** @type {?} */
              this._viewContainerRef.get(i);

              view.context.index = this._renderedRange.start + i;
              view.context.count = count;

              this._updateComputedContextProperties(view.context);

              view.detectChanges();
            }
          }
          /**
           * Apply changes to the DOM.
           * @private
           * @param {?} changes
           * @return {?}
           */

        }, {
          key: "_applyChanges",
          value: function _applyChanges(changes) {
            var _this73 = this;

            // Rearrange the views to put them in the right location.
            changes.forEachOperation(
            /**
            * @param {?} record
            * @param {?} adjustedPreviousIndex
            * @param {?} currentIndex
            * @return {?}
            */
            function (record, adjustedPreviousIndex, currentIndex) {
              if (record.previousIndex == null) {
                // Item added.
                // Item added.

                /** @type {?} */
                var view = _this73._insertViewForNewItem(
                /** @type {?} */
                currentIndex);

                view.context.$implicit = record.item;
              } else if (currentIndex == null) {
                // Item removed.
                _this73._cacheView(_this73._detachView(
                /** @type {?} */
                adjustedPreviousIndex));
              } else {
                // Item moved.
                // Item moved.

                /** @type {?} */
                var _view =
                /** @type {?} */
                _this73._viewContainerRef.get(
                /** @type {?} */
                adjustedPreviousIndex);

                _this73._viewContainerRef.move(_view, currentIndex);

                _view.context.$implicit = record.item;
              }
            }); // Update $implicit for any items that had an identity change.

            changes.forEachIdentityChange(
            /**
            * @param {?} record
            * @return {?}
            */
            function (record) {
              /** @type {?} */
              var view =
              /** @type {?} */
              _this73._viewContainerRef.get(
              /** @type {?} */
              record.currentIndex);

              view.context.$implicit = record.item;
            }); // Update the context variables on all items.

            /** @type {?} */

            var count = this._data.length;
            /** @type {?} */

            var i = this._viewContainerRef.length;

            while (i--) {
              /** @type {?} */
              var view =
              /** @type {?} */
              this._viewContainerRef.get(i);

              view.context.index = this._renderedRange.start + i;
              view.context.count = count;

              this._updateComputedContextProperties(view.context);
            }
          }
          /**
           * Cache the given detached view.
           * @private
           * @param {?} view
           * @return {?}
           */

        }, {
          key: "_cacheView",
          value: function _cacheView(view) {
            if (this._templateCache.length < this.cdkVirtualForTemplateCacheSize) {
              this._templateCache.push(view);
            } else {
              /** @type {?} */
              var index = this._viewContainerRef.indexOf(view); // It's very unlikely that the index will ever be -1, but just in case,
              // destroy the view on its own, otherwise destroy it through the
              // container to ensure that all the references are removed.


              if (index === -1) {
                view.destroy();
              } else {
                this._viewContainerRef.remove(index);
              }
            }
          }
          /**
           * Inserts a view for a new item, either from the cache or by creating a new one.
           * @private
           * @param {?} index
           * @return {?}
           */

        }, {
          key: "_insertViewForNewItem",
          value: function _insertViewForNewItem(index) {
            return this._insertViewFromCache(index) || this._createEmbeddedViewAt(index);
          }
          /**
           * Update the computed properties on the `CdkVirtualForOfContext`.
           * @private
           * @param {?} context
           * @return {?}
           */

        }, {
          key: "_updateComputedContextProperties",
          value: function _updateComputedContextProperties(context) {
            context.first = context.index === 0;
            context.last = context.index === context.count - 1;
            context.even = context.index % 2 === 0;
            context.odd = !context.even;
          }
          /**
           * Creates a new embedded view and moves it to the given index
           * @private
           * @param {?} index
           * @return {?}
           */

        }, {
          key: "_createEmbeddedViewAt",
          value: function _createEmbeddedViewAt(index) {
            // Note that it's important that we insert the item directly at the proper index,
            // rather than inserting it and the moving it in place, because if there's a directive
            // on the same node that injects the `ViewContainerRef`, Angular will insert another
            // comment node which can throw off the move when it's being repeated for all items.
            return this._viewContainerRef.createEmbeddedView(this._template, {
              $implicit:
              /** @type {?} */
              null,
              // It's guaranteed that the iterable is not "undefined" or "null" because we only
              // generate views for elements if the "cdkVirtualForOf" iterable has elements.
              cdkVirtualForOf:
              /** @type {?} */
              this._cdkVirtualForOf,
              index: -1,
              count: -1,
              first: false,
              last: false,
              odd: false,
              even: false
            }, index);
          }
          /**
           * Inserts a recycled view from the cache at the given index.
           * @private
           * @param {?} index
           * @return {?}
           */

        }, {
          key: "_insertViewFromCache",
          value: function _insertViewFromCache(index) {
            /** @type {?} */
            var cachedView = this._templateCache.pop();

            if (cachedView) {
              this._viewContainerRef.insert(cachedView, index);
            }

            return cachedView || null;
          }
          /**
           * Detaches the embedded view at the given index.
           * @private
           * @param {?} index
           * @return {?}
           */

        }, {
          key: "_detachView",
          value: function _detachView(index) {
            return (
              /** @type {?} */
              this._viewContainerRef.detach(index)
            );
          }
        }]);

        return _CdkVirtualForOf;
      }();

      _CdkVirtualForOf.ɵfac = function CdkVirtualForOf_Factory(t) {
        return new (t || _CdkVirtualForOf)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.IterableDiffers), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_CdkVirtualScrollViewport, 4), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone));
      };

      _CdkVirtualForOf.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: _CdkVirtualForOf,
        selectors: [["", "cdkVirtualFor", "", "cdkVirtualForOf", ""]],
        inputs: {
          cdkVirtualForTemplateCacheSize: "cdkVirtualForTemplateCacheSize",
          cdkVirtualForOf: "cdkVirtualForOf",
          cdkVirtualForTrackBy: "cdkVirtualForTrackBy",
          cdkVirtualForTemplate: "cdkVirtualForTemplate"
        }
      });
      /** @nocollapse */

      _CdkVirtualForOf.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.IterableDiffers
        }, {
          type: _CdkVirtualScrollViewport,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.SkipSelf
          }]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
        }];
      };

      _CdkVirtualForOf.propDecorators = {
        cdkVirtualForOf: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        cdkVirtualForTrackBy: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        cdkVirtualForTemplate: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        cdkVirtualForTemplateCacheSize: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_CdkVirtualForOf, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
          args: [{
            selector: '[cdkVirtualFor][cdkVirtualForOf]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.IterableDiffers
          }, {
            type: _CdkVirtualScrollViewport,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.SkipSelf
            }]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
          }];
        }, {
          cdkVirtualForTemplateCacheSize: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          cdkVirtualForOf: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          cdkVirtualForTrackBy: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          cdkVirtualForTemplate: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }]
        });
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/scrolling/scrolling-module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var _CdkScrollableModule = function _CdkScrollableModule() {
        _classCallCheck(this, _CdkScrollableModule);
      };

      _CdkScrollableModule.ɵfac = function CdkScrollableModule_Factory(t) {
        return new (t || _CdkScrollableModule)();
      };

      _CdkScrollableModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: _CdkScrollableModule
      });
      _CdkScrollableModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({});

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_CdkScrollableModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
          args: [{
            exports: [_CdkScrollable],
            declarations: [_CdkScrollable]
          }]
        }], null, null);
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](_CdkScrollableModule, {
          declarations: [_CdkScrollable],
          exports: [_CdkScrollable]
        });
      })();

      var _ScrollingModule = function _ScrollingModule() {
        _classCallCheck(this, _ScrollingModule);
      };

      _ScrollingModule.ɵfac = function ScrollingModule_Factory(t) {
        return new (t || _ScrollingModule)();
      };

      _ScrollingModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: _ScrollingModule
      });
      _ScrollingModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        imports: [[_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_12__.BidiModule, _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.PlatformModule, _CdkScrollableModule], _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_12__.BidiModule, _CdkScrollableModule]
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_ScrollingModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
          args: [{
            imports: [_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_12__.BidiModule, _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.PlatformModule, _CdkScrollableModule],
            exports: [_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_12__.BidiModule, _CdkScrollableModule, _CdkFixedSizeVirtualScroll, _CdkVirtualForOf, _CdkVirtualScrollViewport],
            declarations: [_CdkFixedSizeVirtualScroll, _CdkVirtualForOf, _CdkVirtualScrollViewport]
          }]
        }], null, null);
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](_ScrollingModule, {
          declarations: function declarations() {
            return [_CdkFixedSizeVirtualScroll, _CdkVirtualForOf, _CdkVirtualScrollViewport];
          },
          imports: function imports() {
            return [_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_12__.BidiModule, _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.PlatformModule, _CdkScrollableModule];
          },
          exports: function exports() {
            return [_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_12__.BidiModule, _CdkScrollableModule, _CdkFixedSizeVirtualScroll, _CdkVirtualForOf, _CdkVirtualScrollViewport];
          }
        });
      })();
      /**
       * @fileoverview added by tsickle
       * Generated from: src/cdk/scrolling/public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Generated bundle index. Do not edit.
       */

      /***/

    },

    /***/
    11643:
    /*!***************************************************!*\
      !*** ./node_modules/@angular/cdk/fesm2015/cdk.js ***!
      \***************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "VERSION": function VERSION() {
          return (
            /* binding */
            _VERSION
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      2316);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** Current version of the Angular Component Development Kit. */


      var _VERSION = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.Version('9.2.4');
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /***/

    },

    /***/
    20657:
    /*!********************************************************!*\
      !*** ./node_modules/@angular/cdk/fesm2015/coercion.js ***!
      \********************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "_isNumberValue": function _isNumberValue() {
          return (
            /* binding */
            _isNumberValue2
          );
        },

        /* harmony export */
        "coerceArray": function coerceArray() {
          return (
            /* binding */
            _coerceArray
          );
        },

        /* harmony export */
        "coerceBooleanProperty": function coerceBooleanProperty() {
          return (
            /* binding */
            _coerceBooleanProperty
          );
        },

        /* harmony export */
        "coerceCssPixelValue": function coerceCssPixelValue() {
          return (
            /* binding */
            _coerceCssPixelValue
          );
        },

        /* harmony export */
        "coerceElement": function coerceElement() {
          return (
            /* binding */
            _coerceElement
          );
        },

        /* harmony export */
        "coerceNumberProperty": function coerceNumberProperty() {
          return (
            /* binding */
            _coerceNumberProperty
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      2316);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** Coerces a data-bound value (typically a string) to a boolean. */


      function _coerceBooleanProperty(value) {
        return value != null && "".concat(value) !== 'false';
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function _coerceNumberProperty(value) {
        var fallbackValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return _isNumberValue2(value) ? Number(value) : fallbackValue;
      }
      /**
       * Whether the provided value is considered a number.
       * @docs-private
       */


      function _isNumberValue2(value) {
        // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,
        // and other non-number values as NaN, where Number just uses 0) but it considers the string
        // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.
        return !isNaN(parseFloat(value)) && !isNaN(Number(value));
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function _coerceArray(value) {
        return Array.isArray(value) ? value : [value];
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** Coerces a value to a CSS pixel value. */


      function _coerceCssPixelValue(value) {
        if (value == null) {
          return '';
        }

        return typeof value === 'string' ? value : "".concat(value, "px");
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Coerces an ElementRef or an Element into an element.
       * Useful for APIs that can accept either a ref or the native element itself.
       */


      function _coerceElement(elementOrRef) {
        return elementOrRef instanceof _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef ? elementOrRef.nativeElement : elementOrRef;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /***/

    },

    /***/
    70781:
    /*!************************************************************************!*\
      !*** ./node_modules/@angular/material/__ivy_ngcc__/fesm2015/button.js ***!
      \************************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "MatAnchor": function MatAnchor() {
          return (
            /* binding */
            _MatAnchor
          );
        },

        /* harmony export */
        "MatButton": function MatButton() {
          return (
            /* binding */
            _MatButton
          );
        },

        /* harmony export */
        "MatButtonModule": function MatButtonModule() {
          return (
            /* binding */
            _MatButtonModule
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      2316);
      /* harmony import */


      var _angular_material_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/material/core */
      32220);
      /* harmony import */


      var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/cdk/a11y */
      51606);
      /* harmony import */


      var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/platform-browser/animations */
      20718);
      /**
       * @fileoverview added by tsickle
       * Generated from: src/material/button/button.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Default color palette for round buttons (mat-fab and mat-mini-fab)
       * @type {?}
       */


      var _c0 = ["mat-button", ""];
      var _c1 = ["*"];
      var _c2 = ".mat-button .mat-button-focus-overlay,.mat-icon-button .mat-button-focus-overlay{opacity:0}.mat-button:hover .mat-button-focus-overlay,.mat-stroked-button:hover .mat-button-focus-overlay{opacity:.04}@media(hover: none){.mat-button:hover .mat-button-focus-overlay,.mat-stroked-button:hover .mat-button-focus-overlay{opacity:0}}.mat-button,.mat-icon-button,.mat-stroked-button,.mat-flat-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible}.mat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner{border:0}.mat-button[disabled],.mat-icon-button[disabled],.mat-stroked-button[disabled],.mat-flat-button[disabled]{cursor:default}.mat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-button.cdk-program-focused .mat-button-focus-overlay,.mat-icon-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-icon-button.cdk-program-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-program-focused .mat-button-focus-overlay,.mat-flat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-flat-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner{border:0}.mat-raised-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-raised-button::-moz-focus-inner{border:0}.mat-raised-button[disabled]{cursor:default}.mat-raised-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-raised-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-raised-button::-moz-focus-inner{border:0}._mat-animation-noopable.mat-raised-button{transition:none;animation:none}.mat-stroked-button{border:1px solid currentColor;padding:0 15px;line-height:34px}.mat-stroked-button .mat-button-ripple.mat-ripple,.mat-stroked-button .mat-button-focus-overlay{top:-1px;left:-1px;right:-1px;bottom:-1px}.mat-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);min-width:0;border-radius:50%;width:56px;height:56px;padding:0;flex-shrink:0}.mat-fab::-moz-focus-inner{border:0}.mat-fab[disabled]{cursor:default}.mat-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-fab{transition:none;animation:none}.mat-fab .mat-button-wrapper{padding:16px 0;display:inline-block;line-height:24px}.mat-mini-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);min-width:0;border-radius:50%;width:40px;height:40px;padding:0;flex-shrink:0}.mat-mini-fab::-moz-focus-inner{border:0}.mat-mini-fab[disabled]{cursor:default}.mat-mini-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-mini-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-mini-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-mini-fab{transition:none;animation:none}.mat-mini-fab .mat-button-wrapper{padding:8px 0;display:inline-block;line-height:24px}.mat-icon-button{padding:0;min-width:0;width:40px;height:40px;flex-shrink:0;line-height:40px;border-radius:50%}.mat-icon-button i,.mat-icon-button .mat-icon{line-height:24px}.mat-button-ripple.mat-ripple,.mat-button-focus-overlay{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mat-button-ripple.mat-ripple:not(:empty){transform:translateZ(0)}.mat-button-focus-overlay{opacity:0;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1),background-color 200ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable .mat-button-focus-overlay{transition:none}.cdk-high-contrast-active .mat-button-focus-overlay{background-color:#fff}.cdk-high-contrast-black-on-white .mat-button-focus-overlay{background-color:#000}.mat-button-ripple-round{border-radius:50%;z-index:1}.mat-button .mat-button-wrapper>*,.mat-flat-button .mat-button-wrapper>*,.mat-stroked-button .mat-button-wrapper>*,.mat-raised-button .mat-button-wrapper>*,.mat-icon-button .mat-button-wrapper>*,.mat-fab .mat-button-wrapper>*,.mat-mini-fab .mat-button-wrapper>*{vertical-align:middle}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button{display:block;font-size:inherit;width:2.5em;height:2.5em}.cdk-high-contrast-active .mat-button,.cdk-high-contrast-active .mat-flat-button,.cdk-high-contrast-active .mat-raised-button,.cdk-high-contrast-active .mat-icon-button,.cdk-high-contrast-active .mat-fab,.cdk-high-contrast-active .mat-mini-fab{outline:solid 1px}\n";
      var DEFAULT_ROUND_BUTTON_COLOR = 'accent';
      /**
       * List of classes to add to MatButton instances based on host attributes to
       * style as different variants.
       * @type {?}
       */

      var BUTTON_HOST_ATTRIBUTES = ['mat-button', 'mat-flat-button', 'mat-icon-button', 'mat-raised-button', 'mat-stroked-button', 'mat-mini-fab', 'mat-fab']; // Boilerplate for applying mixins to MatButton.

      /**
       * \@docs-private
       */

      var MatButtonBase =
      /**
       * @param {?} _elementRef
       */
      function MatButtonBase(_elementRef) {
        _classCallCheck(this, MatButtonBase);

        this._elementRef = _elementRef;
      };

      if (false) {}
      /** @type {?} */


      var _MatButtonMixinBase = (0, _angular_material_core__WEBPACK_IMPORTED_MODULE_0__.mixinColor)((0, _angular_material_core__WEBPACK_IMPORTED_MODULE_0__.mixinDisabled)((0, _angular_material_core__WEBPACK_IMPORTED_MODULE_0__.mixinDisableRipple)(MatButtonBase)));
      /**
       * Material design button.
       */


      var _MatButton = /*#__PURE__*/function (_MatButtonMixinBase2) {
        _inherits(_MatButton, _MatButtonMixinBase2);

        var _super17 = _createSuper(_MatButton);

        /**
         * @param {?} elementRef
         * @param {?} _focusMonitor
         * @param {?} _animationMode
         */
        function _MatButton(elementRef, _focusMonitor, _animationMode) {
          var _this74;

          _classCallCheck(this, _MatButton);

          _this74 = _super17.call(this, elementRef);
          _this74._focusMonitor = _focusMonitor;
          _this74._animationMode = _animationMode;
          /**
           * Whether the button is round.
           */

          _this74.isRoundButton = _this74._hasHostAttributes('mat-fab', 'mat-mini-fab');
          /**
           * Whether the button is icon button.
           */

          _this74.isIconButton = _this74._hasHostAttributes('mat-icon-button'); // For each of the variant selectors that is present in the button's host
          // attributes, add the correct corresponding class.

          var _iterator6 = _createForOfIteratorHelper(BUTTON_HOST_ATTRIBUTES),
              _step6;

          try {
            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
              var attr = _step6.value;

              if (_this74._hasHostAttributes(attr)) {
                /** @type {?} */
                _this74._getHostElement().classList.add(attr);
              }
            } // Add a class that applies to all buttons. This makes it easier to target if somebody
            // wants to target all Material buttons. We do it here rather than `host` to ensure that
            // the class is applied to derived classes.

          } catch (err) {
            _iterator6.e(err);
          } finally {
            _iterator6.f();
          }

          elementRef.nativeElement.classList.add('mat-button-base');

          _this74._focusMonitor.monitor(_this74._elementRef, true);

          if (_this74.isRoundButton) {
            _this74.color = DEFAULT_ROUND_BUTTON_COLOR;
          }

          return _this74;
        }
        /**
         * @return {?}
         */


        _createClass(_MatButton, [{
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this._focusMonitor.stopMonitoring(this._elementRef);
          }
          /**
           * Focuses the button.
           * @param {?=} origin
           * @param {?=} options
           * @return {?}
           */

        }, {
          key: "focus",
          value: function focus() {
            var origin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'program';
            var options = arguments.length > 1 ? arguments[1] : undefined;

            this._focusMonitor.focusVia(this._getHostElement(), origin, options);
          }
          /**
           * @return {?}
           */

        }, {
          key: "_getHostElement",
          value: function _getHostElement() {
            return this._elementRef.nativeElement;
          }
          /**
           * @return {?}
           */

        }, {
          key: "_isRippleDisabled",
          value: function _isRippleDisabled() {
            return this.disableRipple || this.disabled;
          }
          /**
           * Gets whether the button has one of the given attributes.
           * @param {...?} attributes
           * @return {?}
           */

        }, {
          key: "_hasHostAttributes",
          value: function _hasHostAttributes() {
            var _this75 = this;

            for (var _len6 = arguments.length, attributes = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
              attributes[_key6] = arguments[_key6];
            }

            return attributes.some(
            /**
            * @param {?} attribute
            * @return {?}
            */
            function (attribute) {
              return _this75._getHostElement().hasAttribute(attribute);
            });
          }
        }]);

        return _MatButton;
      }(_MatButtonMixinBase);

      _MatButton.ɵfac = function MatButton_Factory(t) {
        return new (t || _MatButton)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_2__.FocusMonitor), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_3__.ANIMATION_MODULE_TYPE, 8));
      };

      _MatButton.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({
        type: _MatButton,
        selectors: [["button", "mat-button", ""], ["button", "mat-raised-button", ""], ["button", "mat-icon-button", ""], ["button", "mat-fab", ""], ["button", "mat-mini-fab", ""], ["button", "mat-stroked-button", ""], ["button", "mat-flat-button", ""]],
        viewQuery: function MatButton_Query(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵviewQuery"](_angular_material_core__WEBPACK_IMPORTED_MODULE_0__.MatRipple, 5);
          }

          if (rf & 2) {
            var _t;

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵloadQuery"]()) && (ctx.ripple = _t.first);
          }
        },
        hostAttrs: [1, "mat-focus-indicator"],
        hostVars: 3,
        hostBindings: function MatButton_HostBindings(rf, ctx) {
          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵattribute"]("disabled", ctx.disabled || null);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("_mat-animation-noopable", ctx._animationMode === "NoopAnimations");
          }
        },
        inputs: {
          disabled: "disabled",
          disableRipple: "disableRipple",
          color: "color"
        },
        exportAs: ["matButton"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵInheritDefinitionFeature"]],
        attrs: _c0,
        ngContentSelectors: _c1,
        decls: 4,
        vars: 5,
        consts: [[1, "mat-button-wrapper"], ["matRipple", "", 1, "mat-button-ripple", 3, "matRippleDisabled", "matRippleCentered", "matRippleTrigger"], [1, "mat-button-focus-overlay"]],
        template: function MatButton_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵprojectionDef"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "span", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵprojection"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](2, "div", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](3, "div", 2);
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("mat-button-ripple-round", ctx.isRoundButton || ctx.isIconButton);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("matRippleDisabled", ctx._isRippleDisabled())("matRippleCentered", ctx.isIconButton)("matRippleTrigger", ctx._getHostElement());
          }
        },
        directives: [_angular_material_core__WEBPACK_IMPORTED_MODULE_0__.MatRipple],
        styles: [_c2],
        encapsulation: 2,
        changeDetection: 0
      });
      /** @nocollapse */

      _MatButton.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.ElementRef
        }, {
          type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_2__.FocusMonitor
        }, {
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
            args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_3__.ANIMATION_MODULE_TYPE]
          }]
        }];
      };

      _MatButton.propDecorators = {
        ripple: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.ViewChild,
          args: [_angular_material_core__WEBPACK_IMPORTED_MODULE_0__.MatRipple]
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](_MatButton, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Component,
          args: [{
            selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]",
            exportAs: 'matButton',
            host: {
              '[attr.disabled]': 'disabled || null',
              '[class._mat-animation-noopable]': '_animationMode === "NoopAnimations"',
              'class': 'mat-focus-indicator'
            },
            template: "<span class=\"mat-button-wrapper\"><ng-content></ng-content></span>\n<div matRipple class=\"mat-button-ripple\"\n     [class.mat-button-ripple-round]=\"isRoundButton || isIconButton\"\n     [matRippleDisabled]=\"_isRippleDisabled()\"\n     [matRippleCentered]=\"isIconButton\"\n     [matRippleTrigger]=\"_getHostElement()\"></div>\n<div class=\"mat-button-focus-overlay\"></div>\n",
            inputs: ['disabled', 'disableRipple', 'color'],
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__.ViewEncapsulation.None,
            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__.ChangeDetectionStrategy.OnPush,
            styles: [".mat-button .mat-button-focus-overlay,.mat-icon-button .mat-button-focus-overlay{opacity:0}.mat-button:hover .mat-button-focus-overlay,.mat-stroked-button:hover .mat-button-focus-overlay{opacity:.04}@media(hover: none){.mat-button:hover .mat-button-focus-overlay,.mat-stroked-button:hover .mat-button-focus-overlay{opacity:0}}.mat-button,.mat-icon-button,.mat-stroked-button,.mat-flat-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible}.mat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner{border:0}.mat-button[disabled],.mat-icon-button[disabled],.mat-stroked-button[disabled],.mat-flat-button[disabled]{cursor:default}.mat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-button.cdk-program-focused .mat-button-focus-overlay,.mat-icon-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-icon-button.cdk-program-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-program-focused .mat-button-focus-overlay,.mat-flat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-flat-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner{border:0}.mat-raised-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-raised-button::-moz-focus-inner{border:0}.mat-raised-button[disabled]{cursor:default}.mat-raised-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-raised-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-raised-button::-moz-focus-inner{border:0}._mat-animation-noopable.mat-raised-button{transition:none;animation:none}.mat-stroked-button{border:1px solid currentColor;padding:0 15px;line-height:34px}.mat-stroked-button .mat-button-ripple.mat-ripple,.mat-stroked-button .mat-button-focus-overlay{top:-1px;left:-1px;right:-1px;bottom:-1px}.mat-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);min-width:0;border-radius:50%;width:56px;height:56px;padding:0;flex-shrink:0}.mat-fab::-moz-focus-inner{border:0}.mat-fab[disabled]{cursor:default}.mat-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-fab{transition:none;animation:none}.mat-fab .mat-button-wrapper{padding:16px 0;display:inline-block;line-height:24px}.mat-mini-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);min-width:0;border-radius:50%;width:40px;height:40px;padding:0;flex-shrink:0}.mat-mini-fab::-moz-focus-inner{border:0}.mat-mini-fab[disabled]{cursor:default}.mat-mini-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-mini-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-mini-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-mini-fab{transition:none;animation:none}.mat-mini-fab .mat-button-wrapper{padding:8px 0;display:inline-block;line-height:24px}.mat-icon-button{padding:0;min-width:0;width:40px;height:40px;flex-shrink:0;line-height:40px;border-radius:50%}.mat-icon-button i,.mat-icon-button .mat-icon{line-height:24px}.mat-button-ripple.mat-ripple,.mat-button-focus-overlay{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mat-button-ripple.mat-ripple:not(:empty){transform:translateZ(0)}.mat-button-focus-overlay{opacity:0;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1),background-color 200ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable .mat-button-focus-overlay{transition:none}.cdk-high-contrast-active .mat-button-focus-overlay{background-color:#fff}.cdk-high-contrast-black-on-white .mat-button-focus-overlay{background-color:#000}.mat-button-ripple-round{border-radius:50%;z-index:1}.mat-button .mat-button-wrapper>*,.mat-flat-button .mat-button-wrapper>*,.mat-stroked-button .mat-button-wrapper>*,.mat-raised-button .mat-button-wrapper>*,.mat-icon-button .mat-button-wrapper>*,.mat-fab .mat-button-wrapper>*,.mat-mini-fab .mat-button-wrapper>*{vertical-align:middle}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button{display:block;font-size:inherit;width:2.5em;height:2.5em}.cdk-high-contrast-active .mat-button,.cdk-high-contrast-active .mat-flat-button,.cdk-high-contrast-active .mat-raised-button,.cdk-high-contrast-active .mat-icon-button,.cdk-high-contrast-active .mat-fab,.cdk-high-contrast-active .mat-mini-fab{outline:solid 1px}\n"]
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.ElementRef
          }, {
            type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_2__.FocusMonitor
          }, {
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
              args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_3__.ANIMATION_MODULE_TYPE]
            }]
          }];
        }, {
          ripple: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.ViewChild,
            args: [_angular_material_core__WEBPACK_IMPORTED_MODULE_0__.MatRipple]
          }]
        });
      })();

      if (false) {}
      /**
       * Material design anchor button.
       */


      var _MatAnchor = /*#__PURE__*/function (_MatButton2) {
        _inherits(_MatAnchor, _MatButton2);

        var _super18 = _createSuper(_MatAnchor);

        /**
         * @param {?} focusMonitor
         * @param {?} elementRef
         * @param {?} animationMode
         */
        function _MatAnchor(focusMonitor, elementRef, animationMode) {
          _classCallCheck(this, _MatAnchor);

          return _super18.call(this, elementRef, focusMonitor, animationMode);
        }
        /**
         * @param {?} event
         * @return {?}
         */


        _createClass(_MatAnchor, [{
          key: "_haltDisabledEvents",
          value: function _haltDisabledEvents(event) {
            // A disabled button shouldn't apply any actions
            if (this.disabled) {
              event.preventDefault();
              event.stopImmediatePropagation();
            }
          }
        }]);

        return _MatAnchor;
      }(_MatButton);

      _MatAnchor.ɵfac = function MatAnchor_Factory(t) {
        return new (t || _MatAnchor)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_2__.FocusMonitor), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_3__.ANIMATION_MODULE_TYPE, 8));
      };

      _MatAnchor.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({
        type: _MatAnchor,
        selectors: [["a", "mat-button", ""], ["a", "mat-raised-button", ""], ["a", "mat-icon-button", ""], ["a", "mat-fab", ""], ["a", "mat-mini-fab", ""], ["a", "mat-stroked-button", ""], ["a", "mat-flat-button", ""]],
        hostAttrs: [1, "mat-focus-indicator"],
        hostVars: 5,
        hostBindings: function MatAnchor_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function MatAnchor_click_HostBindingHandler($event) {
              return ctx._haltDisabledEvents($event);
            });
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵattribute"]("tabindex", ctx.disabled ? -1 : ctx.tabIndex || 0)("disabled", ctx.disabled || null)("aria-disabled", ctx.disabled.toString());

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("_mat-animation-noopable", ctx._animationMode === "NoopAnimations");
          }
        },
        inputs: {
          disabled: "disabled",
          disableRipple: "disableRipple",
          color: "color",
          tabIndex: "tabIndex"
        },
        exportAs: ["matButton", "matAnchor"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵInheritDefinitionFeature"]],
        attrs: _c0,
        ngContentSelectors: _c1,
        decls: 4,
        vars: 5,
        consts: [[1, "mat-button-wrapper"], ["matRipple", "", 1, "mat-button-ripple", 3, "matRippleDisabled", "matRippleCentered", "matRippleTrigger"], [1, "mat-button-focus-overlay"]],
        template: function MatAnchor_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵprojectionDef"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "span", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵprojection"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](2, "div", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](3, "div", 2);
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("mat-button-ripple-round", ctx.isRoundButton || ctx.isIconButton);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("matRippleDisabled", ctx._isRippleDisabled())("matRippleCentered", ctx.isIconButton)("matRippleTrigger", ctx._getHostElement());
          }
        },
        directives: [_angular_material_core__WEBPACK_IMPORTED_MODULE_0__.MatRipple],
        styles: [_c2],
        encapsulation: 2,
        changeDetection: 0
      });
      /** @nocollapse */

      _MatAnchor.ctorParameters = function () {
        return [{
          type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_2__.FocusMonitor
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.ElementRef
        }, {
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
            args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_3__.ANIMATION_MODULE_TYPE]
          }]
        }];
      };

      _MatAnchor.propDecorators = {
        tabIndex: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](_MatAnchor, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Component,
          args: [{
            selector: "a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]",
            exportAs: 'matButton, matAnchor',
            host: {
              // Note that we ignore the user-specified tabindex when it's disabled for
              // consistency with the `mat-button` applied on native buttons where even
              // though they have an index, they're not tabbable.
              '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',
              '[attr.disabled]': 'disabled || null',
              '[attr.aria-disabled]': 'disabled.toString()',
              '(click)': '_haltDisabledEvents($event)',
              '[class._mat-animation-noopable]': '_animationMode === "NoopAnimations"',
              'class': 'mat-focus-indicator'
            },
            inputs: ['disabled', 'disableRipple', 'color'],
            template: "<span class=\"mat-button-wrapper\"><ng-content></ng-content></span>\n<div matRipple class=\"mat-button-ripple\"\n     [class.mat-button-ripple-round]=\"isRoundButton || isIconButton\"\n     [matRippleDisabled]=\"_isRippleDisabled()\"\n     [matRippleCentered]=\"isIconButton\"\n     [matRippleTrigger]=\"_getHostElement()\"></div>\n<div class=\"mat-button-focus-overlay\"></div>\n",
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__.ViewEncapsulation.None,
            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__.ChangeDetectionStrategy.OnPush,
            styles: [".mat-button .mat-button-focus-overlay,.mat-icon-button .mat-button-focus-overlay{opacity:0}.mat-button:hover .mat-button-focus-overlay,.mat-stroked-button:hover .mat-button-focus-overlay{opacity:.04}@media(hover: none){.mat-button:hover .mat-button-focus-overlay,.mat-stroked-button:hover .mat-button-focus-overlay{opacity:0}}.mat-button,.mat-icon-button,.mat-stroked-button,.mat-flat-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible}.mat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner{border:0}.mat-button[disabled],.mat-icon-button[disabled],.mat-stroked-button[disabled],.mat-flat-button[disabled]{cursor:default}.mat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-button.cdk-program-focused .mat-button-focus-overlay,.mat-icon-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-icon-button.cdk-program-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-program-focused .mat-button-focus-overlay,.mat-flat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-flat-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner{border:0}.mat-raised-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-raised-button::-moz-focus-inner{border:0}.mat-raised-button[disabled]{cursor:default}.mat-raised-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-raised-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-raised-button::-moz-focus-inner{border:0}._mat-animation-noopable.mat-raised-button{transition:none;animation:none}.mat-stroked-button{border:1px solid currentColor;padding:0 15px;line-height:34px}.mat-stroked-button .mat-button-ripple.mat-ripple,.mat-stroked-button .mat-button-focus-overlay{top:-1px;left:-1px;right:-1px;bottom:-1px}.mat-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);min-width:0;border-radius:50%;width:56px;height:56px;padding:0;flex-shrink:0}.mat-fab::-moz-focus-inner{border:0}.mat-fab[disabled]{cursor:default}.mat-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-fab{transition:none;animation:none}.mat-fab .mat-button-wrapper{padding:16px 0;display:inline-block;line-height:24px}.mat-mini-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);min-width:0;border-radius:50%;width:40px;height:40px;padding:0;flex-shrink:0}.mat-mini-fab::-moz-focus-inner{border:0}.mat-mini-fab[disabled]{cursor:default}.mat-mini-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-mini-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-mini-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-mini-fab{transition:none;animation:none}.mat-mini-fab .mat-button-wrapper{padding:8px 0;display:inline-block;line-height:24px}.mat-icon-button{padding:0;min-width:0;width:40px;height:40px;flex-shrink:0;line-height:40px;border-radius:50%}.mat-icon-button i,.mat-icon-button .mat-icon{line-height:24px}.mat-button-ripple.mat-ripple,.mat-button-focus-overlay{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mat-button-ripple.mat-ripple:not(:empty){transform:translateZ(0)}.mat-button-focus-overlay{opacity:0;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1),background-color 200ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable .mat-button-focus-overlay{transition:none}.cdk-high-contrast-active .mat-button-focus-overlay{background-color:#fff}.cdk-high-contrast-black-on-white .mat-button-focus-overlay{background-color:#000}.mat-button-ripple-round{border-radius:50%;z-index:1}.mat-button .mat-button-wrapper>*,.mat-flat-button .mat-button-wrapper>*,.mat-stroked-button .mat-button-wrapper>*,.mat-raised-button .mat-button-wrapper>*,.mat-icon-button .mat-button-wrapper>*,.mat-fab .mat-button-wrapper>*,.mat-mini-fab .mat-button-wrapper>*{vertical-align:middle}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button{display:block;font-size:inherit;width:2.5em;height:2.5em}.cdk-high-contrast-active .mat-button,.cdk-high-contrast-active .mat-flat-button,.cdk-high-contrast-active .mat-raised-button,.cdk-high-contrast-active .mat-icon-button,.cdk-high-contrast-active .mat-fab,.cdk-high-contrast-active .mat-mini-fab{outline:solid 1px}\n"]
          }]
        }], function () {
          return [{
            type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_2__.FocusMonitor
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.ElementRef
          }, {
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
              args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_3__.ANIMATION_MODULE_TYPE]
            }]
          }];
        }, {
          tabIndex: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
          }]
        });
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/material/button/button-module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var _MatButtonModule = function _MatButtonModule() {
        _classCallCheck(this, _MatButtonModule);
      };

      _MatButtonModule.ɵfac = function MatButtonModule_Factory(t) {
        return new (t || _MatButtonModule)();
      };

      _MatButtonModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
        type: _MatButtonModule
      });
      _MatButtonModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
        imports: [[_angular_material_core__WEBPACK_IMPORTED_MODULE_0__.MatRippleModule, _angular_material_core__WEBPACK_IMPORTED_MODULE_0__.MatCommonModule], _angular_material_core__WEBPACK_IMPORTED_MODULE_0__.MatCommonModule]
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](_MatButtonModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.NgModule,
          args: [{
            imports: [_angular_material_core__WEBPACK_IMPORTED_MODULE_0__.MatRippleModule, _angular_material_core__WEBPACK_IMPORTED_MODULE_0__.MatCommonModule],
            exports: [_MatButton, _MatAnchor, _angular_material_core__WEBPACK_IMPORTED_MODULE_0__.MatCommonModule],
            declarations: [_MatButton, _MatAnchor]
          }]
        }], null, null);
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵsetNgModuleScope"](_MatButtonModule, {
          declarations: function declarations() {
            return [_MatButton, _MatAnchor];
          },
          imports: function imports() {
            return [_angular_material_core__WEBPACK_IMPORTED_MODULE_0__.MatRippleModule, _angular_material_core__WEBPACK_IMPORTED_MODULE_0__.MatCommonModule];
          },
          exports: function exports() {
            return [_MatButton, _MatAnchor, _angular_material_core__WEBPACK_IMPORTED_MODULE_0__.MatCommonModule];
          }
        });
      })();
      /**
       * @fileoverview added by tsickle
       * Generated from: src/material/button/public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Generated bundle index. Do not edit.
       */

      /***/

    },

    /***/
    32220:
    /*!**********************************************************************!*\
      !*** ./node_modules/@angular/material/__ivy_ngcc__/fesm2015/core.js ***!
      \**********************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "APR": function APR() {
          return (
            /* binding */
            _APR
          );
        },

        /* harmony export */
        "AUG": function AUG() {
          return (
            /* binding */
            _AUG
          );
        },

        /* harmony export */
        "AnimationCurves": function AnimationCurves() {
          return (
            /* binding */
            _AnimationCurves
          );
        },

        /* harmony export */
        "AnimationDurations": function AnimationDurations() {
          return (
            /* binding */
            _AnimationDurations
          );
        },

        /* harmony export */
        "DEC": function DEC() {
          return (
            /* binding */
            _DEC
          );
        },

        /* harmony export */
        "DateAdapter": function DateAdapter() {
          return (
            /* binding */
            _DateAdapter
          );
        },

        /* harmony export */
        "ErrorStateMatcher": function ErrorStateMatcher() {
          return (
            /* binding */
            _ErrorStateMatcher
          );
        },

        /* harmony export */
        "FEB": function FEB() {
          return (
            /* binding */
            _FEB
          );
        },

        /* harmony export */
        "GestureConfig": function GestureConfig() {
          return (
            /* binding */
            _GestureConfig
          );
        },

        /* harmony export */
        "JAN": function JAN() {
          return (
            /* binding */
            _JAN
          );
        },

        /* harmony export */
        "JUL": function JUL() {
          return (
            /* binding */
            _JUL
          );
        },

        /* harmony export */
        "JUN": function JUN() {
          return (
            /* binding */
            _JUN
          );
        },

        /* harmony export */
        "MAR": function MAR() {
          return (
            /* binding */
            _MAR
          );
        },

        /* harmony export */
        "MATERIAL_SANITY_CHECKS": function MATERIAL_SANITY_CHECKS() {
          return (
            /* binding */
            _MATERIAL_SANITY_CHECKS
          );
        },

        /* harmony export */
        "MAT_DATE_FORMATS": function MAT_DATE_FORMATS() {
          return (
            /* binding */
            _MAT_DATE_FORMATS
          );
        },

        /* harmony export */
        "MAT_DATE_LOCALE": function MAT_DATE_LOCALE() {
          return (
            /* binding */
            _MAT_DATE_LOCALE
          );
        },

        /* harmony export */
        "MAT_DATE_LOCALE_FACTORY": function MAT_DATE_LOCALE_FACTORY() {
          return (
            /* binding */
            _MAT_DATE_LOCALE_FACTORY
          );
        },

        /* harmony export */
        "MAT_DATE_LOCALE_PROVIDER": function MAT_DATE_LOCALE_PROVIDER() {
          return (
            /* binding */
            _MAT_DATE_LOCALE_PROVIDER
          );
        },

        /* harmony export */
        "MAT_HAMMER_OPTIONS": function MAT_HAMMER_OPTIONS() {
          return (
            /* binding */
            _MAT_HAMMER_OPTIONS
          );
        },

        /* harmony export */
        "MAT_LABEL_GLOBAL_OPTIONS": function MAT_LABEL_GLOBAL_OPTIONS() {
          return (
            /* binding */
            _MAT_LABEL_GLOBAL_OPTIONS
          );
        },

        /* harmony export */
        "MAT_NATIVE_DATE_FORMATS": function MAT_NATIVE_DATE_FORMATS() {
          return (
            /* binding */
            _MAT_NATIVE_DATE_FORMATS
          );
        },

        /* harmony export */
        "MAT_OPTION_PARENT_COMPONENT": function MAT_OPTION_PARENT_COMPONENT() {
          return (
            /* binding */
            _MAT_OPTION_PARENT_COMPONENT
          );
        },

        /* harmony export */
        "MAT_RIPPLE_GLOBAL_OPTIONS": function MAT_RIPPLE_GLOBAL_OPTIONS() {
          return (
            /* binding */
            _MAT_RIPPLE_GLOBAL_OPTIONS
          );
        },

        /* harmony export */
        "MAY": function MAY() {
          return (
            /* binding */
            _MAY
          );
        },

        /* harmony export */
        "MatCommonModule": function MatCommonModule() {
          return (
            /* binding */
            _MatCommonModule
          );
        },

        /* harmony export */
        "MatLine": function MatLine() {
          return (
            /* binding */
            _MatLine
          );
        },

        /* harmony export */
        "MatLineModule": function MatLineModule() {
          return (
            /* binding */
            _MatLineModule
          );
        },

        /* harmony export */
        "MatLineSetter": function MatLineSetter() {
          return (
            /* binding */
            _MatLineSetter
          );
        },

        /* harmony export */
        "MatNativeDateModule": function MatNativeDateModule() {
          return (
            /* binding */
            _MatNativeDateModule
          );
        },

        /* harmony export */
        "MatOptgroup": function MatOptgroup() {
          return (
            /* binding */
            _MatOptgroup
          );
        },

        /* harmony export */
        "MatOption": function MatOption() {
          return (
            /* binding */
            _MatOption
          );
        },

        /* harmony export */
        "MatOptionModule": function MatOptionModule() {
          return (
            /* binding */
            _MatOptionModule
          );
        },

        /* harmony export */
        "MatOptionSelectionChange": function MatOptionSelectionChange() {
          return (
            /* binding */
            _MatOptionSelectionChange
          );
        },

        /* harmony export */
        "MatPseudoCheckbox": function MatPseudoCheckbox() {
          return (
            /* binding */
            _MatPseudoCheckbox
          );
        },

        /* harmony export */
        "MatPseudoCheckboxModule": function MatPseudoCheckboxModule() {
          return (
            /* binding */
            _MatPseudoCheckboxModule
          );
        },

        /* harmony export */
        "MatRipple": function MatRipple() {
          return (
            /* binding */
            _MatRipple
          );
        },

        /* harmony export */
        "MatRippleModule": function MatRippleModule() {
          return (
            /* binding */
            _MatRippleModule
          );
        },

        /* harmony export */
        "NOV": function NOV() {
          return (
            /* binding */
            _NOV
          );
        },

        /* harmony export */
        "NativeDateAdapter": function NativeDateAdapter() {
          return (
            /* binding */
            _NativeDateAdapter
          );
        },

        /* harmony export */
        "NativeDateModule": function NativeDateModule() {
          return (
            /* binding */
            _NativeDateModule
          );
        },

        /* harmony export */
        "OCT": function OCT() {
          return (
            /* binding */
            _OCT
          );
        },

        /* harmony export */
        "RippleRef": function RippleRef() {
          return (
            /* binding */
            _RippleRef
          );
        },

        /* harmony export */
        "RippleRenderer": function RippleRenderer() {
          return (
            /* binding */
            _RippleRenderer
          );
        },

        /* harmony export */
        "SEP": function SEP() {
          return (
            /* binding */
            _SEP
          );
        },

        /* harmony export */
        "ShowOnDirtyErrorStateMatcher": function ShowOnDirtyErrorStateMatcher() {
          return (
            /* binding */
            _ShowOnDirtyErrorStateMatcher
          );
        },

        /* harmony export */
        "VERSION": function VERSION() {
          return (
            /* binding */
            _VERSION2
          );
        },

        /* harmony export */
        "_countGroupLabelsBeforeOption": function _countGroupLabelsBeforeOption() {
          return (
            /* binding */
            _countGroupLabelsBeforeOption2
          );
        },

        /* harmony export */
        "_getOptionScrollPosition": function _getOptionScrollPosition() {
          return (
            /* binding */
            _getOptionScrollPosition2
          );
        },

        /* harmony export */
        "defaultRippleAnimationConfig": function defaultRippleAnimationConfig() {
          return (
            /* binding */
            _defaultRippleAnimationConfig
          );
        },

        /* harmony export */
        "mixinColor": function mixinColor() {
          return (
            /* binding */
            _mixinColor
          );
        },

        /* harmony export */
        "mixinDisableRipple": function mixinDisableRipple() {
          return (
            /* binding */
            _mixinDisableRipple
          );
        },

        /* harmony export */
        "mixinDisabled": function mixinDisabled() {
          return (
            /* binding */
            _mixinDisabled
          );
        },

        /* harmony export */
        "mixinErrorState": function mixinErrorState() {
          return (
            /* binding */
            _mixinErrorState
          );
        },

        /* harmony export */
        "mixinInitialized": function mixinInitialized() {
          return (
            /* binding */
            _mixinInitialized
          );
        },

        /* harmony export */
        "mixinTabIndex": function mixinTabIndex() {
          return (
            /* binding */
            _mixinTabIndex
          );
        },

        /* harmony export */
        "setLines": function setLines() {
          return (
            /* binding */
            _setLines
          );
        },

        /* harmony export */
        "ɵangular_material_src_material_core_core_a": function ɵangular_material_src_material_core_core_a() {
          return (
            /* binding */
            MATERIAL_SANITY_CHECKS_FACTORY
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      2316);
      /* harmony import */


      var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/cdk/a11y */
      51606);
      /* harmony import */


      var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/cdk/bidi */
      772);
      /* harmony import */


      var _angular_cdk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/cdk */
      11643);
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/common */
      54364);
      /* harmony import */


      var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/cdk/coercion */
      20657);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! rxjs */
      79441);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! rxjs */
      25160);
      /* harmony import */


      var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! @angular/cdk/platform */
      36145);
      /* harmony import */


      var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! @angular/platform-browser */
      71570);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! rxjs/operators */
      1143);
      /* harmony import */


      var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
      /*! @angular/platform-browser/animations */
      20718);
      /* harmony import */


      var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
      /*! @angular/cdk/keycodes */
      90084);
      /**
       * @fileoverview added by tsickle
       * Generated from: src/material/core/version.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Current version of Angular Material.
       * @type {?}
       */


      var _c0 = ["*", [["mat-option"], ["ng-container"]]];
      var _c1 = ["*", "mat-option, ng-container"];

      function MatOption_mat_pseudo_checkbox_0_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "mat-pseudo-checkbox", 3);
        }

        if (rf & 2) {
          var ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("state", ctx_r0.selected ? "checked" : "unchecked")("disabled", ctx_r0.disabled);
        }
      }

      var _c2 = ["*"];

      var _VERSION2 = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.Version('9.2.4');
      /**
       * @fileoverview added by tsickle
       * Generated from: src/material/core/animation/animation.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * \@docs-private
       */


      var _AnimationCurves = function _AnimationCurves() {
        _classCallCheck(this, _AnimationCurves);
      };

      _AnimationCurves.STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';
      _AnimationCurves.DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';
      _AnimationCurves.ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';
      _AnimationCurves.SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';

      if (false) {}
      /**
       * \@docs-private
       */


      var _AnimationDurations = function _AnimationDurations() {
        _classCallCheck(this, _AnimationDurations);
      };

      _AnimationDurations.COMPLEX = '375ms';
      _AnimationDurations.ENTERING = '225ms';
      _AnimationDurations.EXITING = '195ms';

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/material/core/common-behaviors/common-module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      // Private version constant to circumvent test/build issues,
      // i.e. avoid core to depend on the @angular/material primary entry-point
      // Can be removed once the Material primary entry-point no longer
      // re-exports all secondary entry-points

      /** @type {?} */


      var VERSION$1 = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.Version('9.2.4');
      /**
       * \@docs-private
       * @return {?}
       */

      function MATERIAL_SANITY_CHECKS_FACTORY() {
        return true;
      }
      /**
       * Injection token that configures whether the Material sanity checks are enabled.
       * @type {?}
       */


      var _MATERIAL_SANITY_CHECKS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('mat-sanity-checks', {
        providedIn: 'root',
        factory: MATERIAL_SANITY_CHECKS_FACTORY
      });
      /**
       * Object that can be used to configure the sanity checks granularly.
       * @record
       */


      function GranularSanityChecks() {}

      if (false) {}
      /**
       * Module that captures anything that should be loaded and/or run for *all* Angular Material
       * components. This includes Bidi, etc.
       *
       * This module should be imported to each top-level component module (e.g., MatTabsModule).
       */


      var _MatCommonModule = /*#__PURE__*/function () {
        /**
         * @param {?} highContrastModeDetector
         * @param {?} sanityChecks
         * @param {?=} document
         */
        function _MatCommonModule(highContrastModeDetector, sanityChecks,
        /** @breaking-change 11.0.0 make document required */
        document) {
          _classCallCheck(this, _MatCommonModule);

          /**
           * Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).
           */
          this._hasDoneGlobalChecks = false;
          this._document = document; // While A11yModule also does this, we repeat it here to avoid importing A11yModule
          // in MatCommonModule.

          highContrastModeDetector._applyBodyHighContrastModeCssClasses(); // Note that `_sanityChecks` is typed to `any`, because AoT
          // throws an error if we use the `SanityChecks` type directly.


          this._sanityChecks = sanityChecks;

          if (!this._hasDoneGlobalChecks) {
            this._checkDoctypeIsDefined();

            this._checkThemeIsPresent();

            this._checkCdkVersionMatch();

            this._hasDoneGlobalChecks = true;
          }
        }
        /**
         * Access injected document if available or fallback to global document reference
         * @private
         * @return {?}
         */


        _createClass(_MatCommonModule, [{
          key: "_getDocument",
          value: function _getDocument() {
            /** @type {?} */
            var doc = this._document || document;
            return typeof doc === 'object' && doc ? doc : null;
          }
          /**
           * Use defaultView of injected document if available or fallback to global window reference
           * @private
           * @return {?}
           */

        }, {
          key: "_getWindow",
          value: function _getWindow() {
            /** @type {?} */
            var doc = this._getDocument();
            /** @type {?} */


            var win = (doc === null || doc === void 0 ? void 0 : doc.defaultView) || window;
            return typeof win === 'object' && win ? win : null;
          }
          /**
           * Whether any sanity checks are enabled.
           * @private
           * @return {?}
           */

        }, {
          key: "_checksAreEnabled",
          value: function _checksAreEnabled() {
            return (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__.isDevMode)() && !this._isTestEnv();
          }
          /**
           * Whether the code is running in tests.
           * @private
           * @return {?}
           */

        }, {
          key: "_isTestEnv",
          value: function _isTestEnv() {
            /** @type {?} */
            var window =
            /** @type {?} */
            this._getWindow();

            return window && (window.__karma__ || window.jasmine);
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "_checkDoctypeIsDefined",
          value: function _checkDoctypeIsDefined() {
            /** @type {?} */
            var isEnabled = this._checksAreEnabled() && (this._sanityChecks === true ||
            /** @type {?} */
            this._sanityChecks.doctype);
            /** @type {?} */


            var document = this._getDocument();

            if (isEnabled && document && !document.doctype) {
              console.warn('Current document does not have a doctype. This may cause ' + 'some Angular Material components not to behave as expected.');
            }
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "_checkThemeIsPresent",
          value: function _checkThemeIsPresent() {
            // We need to assert that the `body` is defined, because these checks run very early
            // and the `body` won't be defined if the consumer put their scripts in the `head`.

            /** @type {?} */
            var isDisabled = !this._checksAreEnabled() || this._sanityChecks === false || !
            /** @type {?} */
            this._sanityChecks.theme;
            /** @type {?} */

            var document = this._getDocument();

            if (isDisabled || !document || !document.body || typeof getComputedStyle !== 'function') {
              return;
            }
            /** @type {?} */


            var testElement = document.createElement('div');
            testElement.classList.add('mat-theme-loaded-marker');
            document.body.appendChild(testElement);
            /** @type {?} */

            var computedStyle = getComputedStyle(testElement); // In some situations the computed style of the test element can be null. For example in
            // Firefox, the computed style is null if an application is running inside of a hidden iframe.
            // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397

            if (computedStyle && computedStyle.display !== 'none') {
              console.warn('Could not find Angular Material core theme. Most Material ' + 'components may not work as expected. For more info refer ' + 'to the theming guide: https://material.angular.io/guide/theming');
            }

            document.body.removeChild(testElement);
          }
          /**
           * Checks whether the material version matches the cdk version
           * @private
           * @return {?}
           */

        }, {
          key: "_checkCdkVersionMatch",
          value: function _checkCdkVersionMatch() {
            /** @type {?} */
            var isEnabled = this._checksAreEnabled() && (this._sanityChecks === true ||
            /** @type {?} */
            this._sanityChecks.version);

            if (isEnabled && VERSION$1.full !== _angular_cdk__WEBPACK_IMPORTED_MODULE_1__.VERSION.full) {
              console.warn('The Angular Material version (' + VERSION$1.full + ') does not match ' + 'the Angular CDK version (' + _angular_cdk__WEBPACK_IMPORTED_MODULE_1__.VERSION.full + ').\n' + 'Please ensure the versions of these two packages exactly match.');
            }
          }
        }]);

        return _MatCommonModule;
      }();

      _MatCommonModule.ɵfac = function MatCommonModule_Factory(t) {
        return new (t || _MatCommonModule)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_2__.HighContrastModeDetector), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_MATERIAL_SANITY_CHECKS, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_3__.DOCUMENT, 8));
      };

      _MatCommonModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: _MatCommonModule
      });
      _MatCommonModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        imports: [[_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_4__.BidiModule], _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_4__.BidiModule]
      });
      /** @nocollapse */

      _MatCommonModule.ctorParameters = function () {
        return [{
          type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_2__.HighContrastModeDetector
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
            args: [_MATERIAL_SANITY_CHECKS]
          }]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_3__.DOCUMENT]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_MatCommonModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
          args: [{
            imports: [_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_4__.BidiModule],
            exports: [_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_4__.BidiModule]
          }]
        }], function () {
          return [{
            type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_2__.HighContrastModeDetector
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
              args: [_MATERIAL_SANITY_CHECKS]
            }]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_3__.DOCUMENT]
            }]
          }];
        }, null);
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](_MatCommonModule, {
          imports: function imports() {
            return [_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_4__.BidiModule];
          },
          exports: function exports() {
            return [_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_4__.BidiModule];
          }
        });
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/material/core/common-behaviors/disabled.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@docs-private
       * @record
       */


      function CanDisable() {}

      if (false) {}
      /**
       * Mixin to augment a directive with a `disabled` property.
       * @template T
       * @param {?} base
       * @return {?}
       */


      function _mixinDisabled(base) {
        return /*#__PURE__*/function (_base) {
          _inherits(_class, _base);

          var _super19 = _createSuper(_class);

          /**
           * @param {...?} args
           */
          function _class() {
            var _this76;

            _classCallCheck(this, _class);

            for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
              args[_key7] = arguments[_key7];
            }

            _this76 = _super19.call.apply(_super19, [this].concat(args));
            _this76._disabled = false;
            return _this76;
          }
          /**
           * @return {?}
           */


          _createClass(_class, [{
            key: "disabled",
            get: function get() {
              return this._disabled;
            }
            /**
             * @param {?} value
             * @return {?}
             */
            ,
            set: function set(value) {
              this._disabled = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__.coerceBooleanProperty)(value);
            }
          }]);

          return _class;
        }(base);
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: src/material/core/common-behaviors/color.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * \@docs-private
       * @record
       */


      function CanColor() {}

      if (false) {}
      /**
       * \@docs-private
       * @record
       */


      function HasElementRef() {}

      if (false) {}
      /**
       * Mixin to augment a directive with a `color` property.
       * @template T
       * @param {?} base
       * @param {?=} defaultColor
       * @return {?}
       */


      function _mixinColor(base, defaultColor) {
        return /*#__PURE__*/function (_base2) {
          _inherits(_class2, _base2);

          var _super20 = _createSuper(_class2);

          /**
           * @param {...?} args
           */
          function _class2() {
            var _this77;

            _classCallCheck(this, _class2);

            for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
              args[_key8] = arguments[_key8];
            }

            _this77 = _super20.call.apply(_super20, [this].concat(args)); // Set the default color that can be specified from the mixin.

            _this77.color = defaultColor;
            return _this77;
          }
          /**
           * @return {?}
           */


          _createClass(_class2, [{
            key: "color",
            get: function get() {
              return this._color;
            }
            /**
             * @param {?} value
             * @return {?}
             */
            ,
            set: function set(value) {
              /** @type {?} */
              var colorPalette = value || defaultColor;

              if (colorPalette !== this._color) {
                if (this._color) {
                  this._elementRef.nativeElement.classList.remove("mat-".concat(this._color));
                }

                if (colorPalette) {
                  this._elementRef.nativeElement.classList.add("mat-".concat(colorPalette));
                }

                this._color = colorPalette;
              }
            }
          }]);

          return _class2;
        }(base);
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: src/material/core/common-behaviors/disable-ripple.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@docs-private
       * @record
       */


      function CanDisableRipple() {}

      if (false) {}
      /**
       * Mixin to augment a directive with a `disableRipple` property.
       * @template T
       * @param {?} base
       * @return {?}
       */


      function _mixinDisableRipple(base) {
        return /*#__PURE__*/function (_base3) {
          _inherits(_class3, _base3);

          var _super21 = _createSuper(_class3);

          /**
           * @param {...?} args
           */
          function _class3() {
            var _this78;

            _classCallCheck(this, _class3);

            for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
              args[_key9] = arguments[_key9];
            }

            _this78 = _super21.call.apply(_super21, [this].concat(args));
            _this78._disableRipple = false;
            return _this78;
          }
          /**
           * Whether the ripple effect is disabled or not.
           * @return {?}
           */


          _createClass(_class3, [{
            key: "disableRipple",
            get: function get() {
              return this._disableRipple;
            }
            /**
             * @param {?} value
             * @return {?}
             */
            ,
            set: function set(value) {
              this._disableRipple = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__.coerceBooleanProperty)(value);
            }
          }]);

          return _class3;
        }(base);
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: src/material/core/common-behaviors/tabindex.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * \@docs-private
       * @record
       */


      function HasTabIndex() {}

      if (false) {}
      /**
       * Mixin to augment a directive with a `tabIndex` property.
       * @template T
       * @param {?} base
       * @param {?=} defaultTabIndex
       * @return {?}
       */


      function _mixinTabIndex(base) {
        var defaultTabIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return /*#__PURE__*/function (_base4) {
          _inherits(_class4, _base4);

          var _super22 = _createSuper(_class4);

          /**
           * @param {...?} args
           */
          function _class4() {
            var _this79;

            _classCallCheck(this, _class4);

            for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
              args[_key10] = arguments[_key10];
            }

            _this79 = _super22.call.apply(_super22, [this].concat(args));
            _this79._tabIndex = defaultTabIndex;
            return _this79;
          }
          /**
           * @return {?}
           */


          _createClass(_class4, [{
            key: "tabIndex",
            get: function get() {
              return this.disabled ? -1 : this._tabIndex;
            }
            /**
             * @param {?} value
             * @return {?}
             */
            ,
            set: function set(value) {
              // If the specified tabIndex value is null or undefined, fall back to the default value.
              this._tabIndex = value != null ? value : defaultTabIndex;
            }
          }]);

          return _class4;
        }(base);
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: src/material/core/common-behaviors/error-state.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@docs-private
       * @record
       */


      function CanUpdateErrorState() {}

      if (false) {}
      /**
       * \@docs-private
       * @record
       */


      function HasErrorState() {}

      if (false) {}
      /**
       * Mixin to augment a directive with updateErrorState method.
       * For component with `errorState` and need to update `errorState`.
       * @template T
       * @param {?} base
       * @return {?}
       */


      function _mixinErrorState(base) {
        return /*#__PURE__*/function (_base5) {
          _inherits(_class5, _base5);

          var _super23 = _createSuper(_class5);

          /**
           * @param {...?} args
           */
          function _class5() {
            var _this80;

            _classCallCheck(this, _class5);

            for (var _len11 = arguments.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
              args[_key11] = arguments[_key11];
            }

            _this80 = _super23.call.apply(_super23, [this].concat(args));
            /**
             * Whether the component is in an error state.
             */

            _this80.errorState = false;
            /**
             * Stream that emits whenever the state of the input changes such that the wrapping
             * `MatFormField` needs to run change detection.
             */

            _this80.stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_6__.Subject();
            return _this80;
          }
          /**
           * @return {?}
           */


          _createClass(_class5, [{
            key: "updateErrorState",
            value: function updateErrorState() {
              /** @type {?} */
              var oldState = this.errorState;
              /** @type {?} */

              var parent = this._parentFormGroup || this._parentForm;
              /** @type {?} */

              var matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;
              /** @type {?} */

              var control = this.ngControl ?
              /** @type {?} */
              this.ngControl.control : null;
              /** @type {?} */

              var newState = matcher.isErrorState(control, parent);

              if (newState !== oldState) {
                this.errorState = newState;
                this.stateChanges.next();
              }
            }
          }]);

          return _class5;
        }(base);
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: src/material/core/common-behaviors/initialized.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a
       * value once markInitialized has been called, which should be done during the ngOnInit function.
       * If the subscription is made after it has already been marked as initialized, then it will trigger
       * an emit immediately.
       * \@docs-private
       * @record
       */


      function HasInitialized() {}

      if (false) {}
      /**
       * Mixin to augment a directive with an initialized property that will emits when ngOnInit ends.
       * @template T
       * @param {?} base
       * @return {?}
       */


      function _mixinInitialized(base) {
        return /*#__PURE__*/function (_base6) {
          _inherits(_class6, _base6);

          var _super24 = _createSuper(_class6);

          /**
           * @param {...?} args
           */
          function _class6() {
            var _this81;

            _classCallCheck(this, _class6);

            for (var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {
              args[_key12] = arguments[_key12];
            }

            _this81 = _super24.call.apply(_super24, [this].concat(args));
            /**
             * Whether this directive has been marked as initialized.
             */

            _this81._isInitialized = false;
            /**
             * List of subscribers that subscribed before the directive was initialized. Should be notified
             * during _markInitialized. Set to null after pending subscribers are notified, and should
             * not expect to be populated after.
             */

            _this81._pendingSubscribers = [];
            /**
             * Observable stream that emits when the directive initializes. If already initialized, the
             * subscriber is stored to be notified once _markInitialized is called.
             */

            _this81.initialized = new rxjs__WEBPACK_IMPORTED_MODULE_7__.Observable(
            /**
            * @param {?} subscriber
            * @return {?}
            */
            function (subscriber) {
              // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify
              // when _markInitialized is called.
              if (_this81._isInitialized) {
                _this81._notifySubscriber(subscriber);
              } else {
                /** @type {?} */
                _this81._pendingSubscribers.push(subscriber);
              }
            });
            return _this81;
          }
          /**
           * Marks the state as initialized and notifies pending subscribers. Should be called at the end
           * of ngOnInit.
           * \@docs-private
           * @return {?}
           */


          _createClass(_class6, [{
            key: "_markInitialized",
            value: function _markInitialized() {
              if (this._isInitialized) {
                throw Error('This directive has already been marked as initialized and ' + 'should not be called twice.');
              }

              this._isInitialized = true;

              /** @type {?} */
              this._pendingSubscribers.forEach(this._notifySubscriber);

              this._pendingSubscribers = null;
            }
            /**
             * Emits and completes the subscriber stream (should only emit once).
             * @param {?} subscriber
             * @return {?}
             */

          }, {
            key: "_notifySubscriber",
            value: function _notifySubscriber(subscriber) {
              subscriber.next();
              subscriber.complete();
            }
          }]);

          return _class6;
        }(base);
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: src/material/core/common-behaviors/index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: src/material/core/datetime/date-adapter.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * InjectionToken for datepicker that can be used to override default locale code.
       * @type {?}
       */


      var _MAT_DATE_LOCALE = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('MAT_DATE_LOCALE', {
        providedIn: 'root',
        factory: _MAT_DATE_LOCALE_FACTORY
      });
      /**
       * \@docs-private
       * @return {?}
       */


      function _MAT_DATE_LOCALE_FACTORY() {
        return (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(_angular_core__WEBPACK_IMPORTED_MODULE_0__.LOCALE_ID);
      }
      /**
       * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.
       * If you are importing and providing this in your code you can simply remove it.
       * @deprecated
       * \@breaking-change 8.0.0
       * @type {?}
       */


      var _MAT_DATE_LOCALE_PROVIDER = {
        provide: _MAT_DATE_LOCALE,
        useExisting: _angular_core__WEBPACK_IMPORTED_MODULE_0__.LOCALE_ID
      };
      /**
       * Adapts type `D` to be usable as a date by cdk-based components that work with dates.
       * @abstract
       * @template D
       */

      var _DateAdapter = /*#__PURE__*/function () {
        function _DateAdapter() {
          _classCallCheck(this, _DateAdapter);

          this._localeChanges = new rxjs__WEBPACK_IMPORTED_MODULE_6__.Subject();
        }
        /**
         * A stream that emits when the locale changes.
         * @return {?}
         */


        _createClass(_DateAdapter, [{
          key: "localeChanges",
          get: function get() {
            return this._localeChanges;
          }
          /**
           * Attempts to deserialize a value to a valid date object. This is different from parsing in that
           * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601
           * string). The default implementation does not allow any deserialization, it simply checks that
           * the given value is already a valid date object or null. The `<mat-datepicker>` will call this
           * method on all of its `\@Input()` properties that accept dates. It is therefore possible to
           * support passing values from your backend directly to these properties by overriding this method
           * to also deserialize the format used by your backend.
           * @param {?} value The value to be deserialized into a date object.
           * @return {?} The deserialized date object, either a valid date, null if the value can be
           *     deserialized into a null date (e.g. the empty string), or an invalid date.
           */

        }, {
          key: "deserialize",
          value: function deserialize(value) {
            if (value == null || this.isDateInstance(value) && this.isValid(value)) {
              return value;
            }

            return this.invalid();
          }
          /**
           * Sets the locale used for all dates.
           * @param {?} locale The new locale.
           * @return {?}
           */

        }, {
          key: "setLocale",
          value: function setLocale(locale) {
            this.locale = locale;

            this._localeChanges.next();
          }
          /**
           * Compares two dates.
           * @param {?} first The first date to compare.
           * @param {?} second The second date to compare.
           * @return {?} 0 if the dates are equal, a number less than 0 if the first date is earlier,
           *     a number greater than 0 if the first date is later.
           */

        }, {
          key: "compareDate",
          value: function compareDate(first, second) {
            return this.getYear(first) - this.getYear(second) || this.getMonth(first) - this.getMonth(second) || this.getDate(first) - this.getDate(second);
          }
          /**
           * Checks if two dates are equal.
           * @param {?} first The first date to check.
           * @param {?} second The second date to check.
           * @return {?} Whether the two dates are equal.
           *     Null dates are considered equal to other null dates.
           */

        }, {
          key: "sameDate",
          value: function sameDate(first, second) {
            if (first && second) {
              /** @type {?} */
              var firstValid = this.isValid(first);
              /** @type {?} */

              var secondValid = this.isValid(second);

              if (firstValid && secondValid) {
                return !this.compareDate(first, second);
              }

              return firstValid == secondValid;
            }

            return first == second;
          }
          /**
           * Clamp the given date between min and max dates.
           * @param {?} date The date to clamp.
           * @param {?=} min The minimum value to allow. If null or omitted no min is enforced.
           * @param {?=} max The maximum value to allow. If null or omitted no max is enforced.
           * @return {?} `min` if `date` is less than `min`, `max` if date is greater than `max`,
           *     otherwise `date`.
           */

        }, {
          key: "clampDate",
          value: function clampDate(date, min, max) {
            if (min && this.compareDate(date, min) < 0) {
              return min;
            }

            if (max && this.compareDate(date, max) > 0) {
              return max;
            }

            return date;
          }
        }]);

        return _DateAdapter;
      }();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/material/core/datetime/date-formats.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */


      var _MAT_DATE_FORMATS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('mat-date-formats');
      /**
       * @fileoverview added by tsickle
       * Generated from: src/material/core/datetime/native-date-adapter.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      // TODO(mmalerba): Remove when we no longer support safari 9.

      /**
       * Whether the browser supports the Intl API.
       * @type {?}
       */


      var SUPPORTS_INTL_API; // We need a try/catch around the reference to `Intl`, because accessing it in some cases can
      // cause IE to throw. These cases are tied to particular versions of Windows and can happen if
      // the consumer is providing a polyfilled `Map`. See:
      // https://github.com/Microsoft/ChakraCore/issues/3189
      // https://github.com/angular/components/issues/15687

      try {
        SUPPORTS_INTL_API = typeof Intl != 'undefined';
      } catch (_a) {
        SUPPORTS_INTL_API = false;
      }
      /**
       * The default month names to use if Intl API is not available.
       * @type {?}
       */


      var DEFAULT_MONTH_NAMES = {
        'long': ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
        'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
        'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']
      };

      var ɵ0 =
      /**
      * @param {?} i
      * @return {?}
      */
      function ɵ0(i) {
        return String(i + 1);
      };
      /**
       * The default date names to use if Intl API is not available.
       * @type {?}
       */


      var DEFAULT_DATE_NAMES = range(31, ɵ0);
      /**
       * The default day of the week names to use if Intl API is not available.
       * @type {?}
       */

      var DEFAULT_DAY_OF_WEEK_NAMES = {
        'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
        'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
        'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']
      };
      /**
       * Matches strings that have the form of a valid RFC 3339 string
       * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date
       * because the regex will match strings an with out of bounds month, date, etc.
       * @type {?}
       */

      var ISO_8601_REGEX = /^\d{4}-\d{2}-\d{2}(?:T\d{2}:\d{2}:\d{2}(?:\.\d+)?(?:Z|(?:(?:\+|-)\d{2}:\d{2}))?)?$/;
      /**
       * Creates an array and fills it with values.
       * @template T
       * @param {?} length
       * @param {?} valueFunction
       * @return {?}
       */

      function range(length, valueFunction) {
        /** @type {?} */
        var valuesArray = Array(length);

        for (var i = 0; i < length; i++) {
          valuesArray[i] = valueFunction(i);
        }

        return valuesArray;
      }
      /**
       * Adapts the native JS Date for use with cdk-based components that work with dates.
       */


      var _NativeDateAdapter = /*#__PURE__*/function (_DateAdapter2) {
        _inherits(_NativeDateAdapter, _DateAdapter2);

        var _super25 = _createSuper(_NativeDateAdapter);

        /**
         * @param {?} matDateLocale
         * @param {?} platform
         */
        function _NativeDateAdapter(matDateLocale, platform) {
          var _thisSuper3, _this82;

          _classCallCheck(this, _NativeDateAdapter);

          _this82 = _super25.call(this);
          /**
           * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.
           * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off
           * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`
           * will produce `'8/13/1800'`.
           *
           * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now
           * getting the string representation of a Date object from its utc representation. We're keeping
           * it here for sometime, just for precaution, in case we decide to revert some of these changes
           * though.
           */

          _this82.useUtcForDisplay = true;

          _get((_thisSuper3 = _assertThisInitialized(_this82), _getPrototypeOf(_NativeDateAdapter.prototype)), "setLocale", _thisSuper3).call(_thisSuper3, matDateLocale); // IE does its own time zone correction, so we disable this on IE.


          _this82.useUtcForDisplay = !platform.TRIDENT;
          _this82._clampDate = platform.TRIDENT || platform.EDGE;
          return _this82;
        }
        /**
         * @param {?} date
         * @return {?}
         */


        _createClass(_NativeDateAdapter, [{
          key: "getYear",
          value: function getYear(date) {
            return date.getFullYear();
          }
          /**
           * @param {?} date
           * @return {?}
           */

        }, {
          key: "getMonth",
          value: function getMonth(date) {
            return date.getMonth();
          }
          /**
           * @param {?} date
           * @return {?}
           */

        }, {
          key: "getDate",
          value: function getDate(date) {
            return date.getDate();
          }
          /**
           * @param {?} date
           * @return {?}
           */

        }, {
          key: "getDayOfWeek",
          value: function getDayOfWeek(date) {
            return date.getDay();
          }
          /**
           * @param {?} style
           * @return {?}
           */

        }, {
          key: "getMonthNames",
          value: function getMonthNames(style) {
            var _this83 = this;

            if (SUPPORTS_INTL_API) {
              /** @type {?} */
              var dtf = new Intl.DateTimeFormat(this.locale, {
                month: style,
                timeZone: 'utc'
              });
              return range(12,
              /**
              * @param {?} i
              * @return {?}
              */
              function (i) {
                return _this83._stripDirectionalityCharacters(_this83._format(dtf, new Date(2017, i, 1)));
              });
            }

            return DEFAULT_MONTH_NAMES[style];
          }
          /**
           * @return {?}
           */

        }, {
          key: "getDateNames",
          value: function getDateNames() {
            var _this84 = this;

            if (SUPPORTS_INTL_API) {
              /** @type {?} */
              var dtf = new Intl.DateTimeFormat(this.locale, {
                day: 'numeric',
                timeZone: 'utc'
              });
              return range(31,
              /**
              * @param {?} i
              * @return {?}
              */
              function (i) {
                return _this84._stripDirectionalityCharacters(_this84._format(dtf, new Date(2017, 0, i + 1)));
              });
            }

            return DEFAULT_DATE_NAMES;
          }
          /**
           * @param {?} style
           * @return {?}
           */

        }, {
          key: "getDayOfWeekNames",
          value: function getDayOfWeekNames(style) {
            var _this85 = this;

            if (SUPPORTS_INTL_API) {
              /** @type {?} */
              var dtf = new Intl.DateTimeFormat(this.locale, {
                weekday: style,
                timeZone: 'utc'
              });
              return range(7,
              /**
              * @param {?} i
              * @return {?}
              */
              function (i) {
                return _this85._stripDirectionalityCharacters(_this85._format(dtf, new Date(2017, 0, i + 1)));
              });
            }

            return DEFAULT_DAY_OF_WEEK_NAMES[style];
          }
          /**
           * @param {?} date
           * @return {?}
           */

        }, {
          key: "getYearName",
          value: function getYearName(date) {
            if (SUPPORTS_INTL_API) {
              /** @type {?} */
              var dtf = new Intl.DateTimeFormat(this.locale, {
                year: 'numeric',
                timeZone: 'utc'
              });
              return this._stripDirectionalityCharacters(this._format(dtf, date));
            }

            return String(this.getYear(date));
          }
          /**
           * @return {?}
           */

        }, {
          key: "getFirstDayOfWeek",
          value: function getFirstDayOfWeek() {
            // We can't tell using native JS Date what the first day of the week is, we default to Sunday.
            return 0;
          }
          /**
           * @param {?} date
           * @return {?}
           */

        }, {
          key: "getNumDaysInMonth",
          value: function getNumDaysInMonth(date) {
            return this.getDate(this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + 1, 0));
          }
          /**
           * @param {?} date
           * @return {?}
           */

        }, {
          key: "clone",
          value: function clone(date) {
            return new Date(date.getTime());
          }
          /**
           * @param {?} year
           * @param {?} month
           * @param {?} date
           * @return {?}
           */

        }, {
          key: "createDate",
          value: function createDate(year, month, date) {
            // Check for invalid month and date (except upper bound on date which we have to check after
            // creating the Date).
            if (month < 0 || month > 11) {
              throw Error("Invalid month index \"".concat(month, "\". Month index has to be between 0 and 11."));
            }

            if (date < 1) {
              throw Error("Invalid date \"".concat(date, "\". Date has to be greater than 0."));
            }
            /** @type {?} */


            var result = this._createDateWithOverflow(year, month, date); // Check that the date wasn't above the upper bound for the month, causing the month to overflow


            if (result.getMonth() != month) {
              throw Error("Invalid date \"".concat(date, "\" for month with index \"").concat(month, "\"."));
            }

            return result;
          }
          /**
           * @return {?}
           */

        }, {
          key: "today",
          value: function today() {
            return new Date();
          }
          /**
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "parse",
          value: function parse(value) {
            // We have no way using the native JS Date to set the parse format or locale, so we ignore these
            // parameters.
            if (typeof value == 'number') {
              return new Date(value);
            }

            return value ? new Date(Date.parse(value)) : null;
          }
          /**
           * @param {?} date
           * @param {?} displayFormat
           * @return {?}
           */

        }, {
          key: "format",
          value: function format(date, displayFormat) {
            if (!this.isValid(date)) {
              throw Error('NativeDateAdapter: Cannot format invalid date.');
            }

            if (SUPPORTS_INTL_API) {
              // On IE and Edge the i18n API will throw a hard error that can crash the entire app
              // if we attempt to format a date whose year is less than 1 or greater than 9999.
              if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {
                date = this.clone(date);
                date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));
              }

              displayFormat = Object.assign(Object.assign({}, displayFormat), {
                timeZone: 'utc'
              });
              /** @type {?} */

              var dtf = new Intl.DateTimeFormat(this.locale, displayFormat);
              return this._stripDirectionalityCharacters(this._format(dtf, date));
            }

            return this._stripDirectionalityCharacters(date.toDateString());
          }
          /**
           * @param {?} date
           * @param {?} years
           * @return {?}
           */

        }, {
          key: "addCalendarYears",
          value: function addCalendarYears(date, years) {
            return this.addCalendarMonths(date, years * 12);
          }
          /**
           * @param {?} date
           * @param {?} months
           * @return {?}
           */

        }, {
          key: "addCalendarMonths",
          value: function addCalendarMonths(date, months) {
            /** @type {?} */
            var newDate = this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + months, this.getDate(date)); // It's possible to wind up in the wrong month if the original month has more days than the new
            // month. In this case we want to go to the last day of the desired month.
            // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't
            // guarantee this.


            if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {
              newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);
            }

            return newDate;
          }
          /**
           * @param {?} date
           * @param {?} days
           * @return {?}
           */

        }, {
          key: "addCalendarDays",
          value: function addCalendarDays(date, days) {
            return this._createDateWithOverflow(this.getYear(date), this.getMonth(date), this.getDate(date) + days);
          }
          /**
           * @param {?} date
           * @return {?}
           */

        }, {
          key: "toIso8601",
          value: function toIso8601(date) {
            return [date.getUTCFullYear(), this._2digit(date.getUTCMonth() + 1), this._2digit(date.getUTCDate())].join('-');
          }
          /**
           * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings
           * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an
           * invalid date for all other values.
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "deserialize",
          value: function deserialize(value) {
            if (typeof value === 'string') {
              if (!value) {
                return null;
              } // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the
              // string is the right format first.


              if (ISO_8601_REGEX.test(value)) {
                /** @type {?} */
                var date = new Date(value);

                if (this.isValid(date)) {
                  return date;
                }
              }
            }

            return _get(_getPrototypeOf(_NativeDateAdapter.prototype), "deserialize", this).call(this, value);
          }
          /**
           * @param {?} obj
           * @return {?}
           */

        }, {
          key: "isDateInstance",
          value: function isDateInstance(obj) {
            return obj instanceof Date;
          }
          /**
           * @param {?} date
           * @return {?}
           */

        }, {
          key: "isValid",
          value: function isValid(date) {
            return !isNaN(date.getTime());
          }
          /**
           * @return {?}
           */

        }, {
          key: "invalid",
          value: function invalid() {
            return new Date(NaN);
          }
          /**
           * Creates a date but allows the month and date to overflow.
           * @private
           * @param {?} year
           * @param {?} month
           * @param {?} date
           * @return {?}
           */

        }, {
          key: "_createDateWithOverflow",
          value: function _createDateWithOverflow(year, month, date) {
            /** @type {?} */
            var result = new Date(year, month, date); // We need to correct for the fact that JS native Date treats years in range [0, 99] as
            // abbreviations for 19xx.

            if (year >= 0 && year < 100) {
              result.setFullYear(this.getYear(result) - 1900);
            }

            return result;
          }
          /**
           * Pads a number to make it two digits.
           * @private
           * @param {?} n The number to pad.
           * @return {?} The padded number.
           */

        }, {
          key: "_2digit",
          value: function _2digit(n) {
            return ('00' + n).slice(-2);
          }
          /**
           * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while
           * other browsers do not. We remove them to make output consistent and because they interfere with
           * date parsing.
           * @private
           * @param {?} str The string to strip direction characters from.
           * @return {?} The stripped string.
           */

        }, {
          key: "_stripDirectionalityCharacters",
          value: function _stripDirectionalityCharacters(str) {
            return str.replace(/[\u200e\u200f]/g, '');
          }
          /**
           * When converting Date object to string, javascript built-in functions may return wrong
           * results because it applies its internal DST rules. The DST rules around the world change
           * very frequently, and the current valid rule is not always valid in previous years though.
           * We work around this problem building a new Date object which has its internal UTC
           * representation with the local date and time.
           * @private
           * @param {?} dtf Intl.DateTimeFormat object, containg the desired string format. It must have
           *    timeZone set to 'utc' to work fine.
           * @param {?} date Date from which we want to get the string representation according to dtf
           * @return {?} A Date object with its UTC representation based on the passed in date info
           */

        }, {
          key: "_format",
          value: function _format(dtf, date) {
            /** @type {?} */
            var d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
            return dtf.format(d);
          }
        }]);

        return _NativeDateAdapter;
      }(_DateAdapter);

      _NativeDateAdapter.ɵfac = function NativeDateAdapter_Factory(t) {
        return new (t || _NativeDateAdapter)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_MAT_DATE_LOCALE, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_8__.Platform));
      };

      _NativeDateAdapter.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: _NativeDateAdapter,
        factory: _NativeDateAdapter.ɵfac
      });
      /** @nocollapse */

      _NativeDateAdapter.ctorParameters = function () {
        return [{
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
            args: [_MAT_DATE_LOCALE]
          }]
        }, {
          type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_8__.Platform
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_NativeDateAdapter, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable
        }], function () {
          return [{
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
              args: [_MAT_DATE_LOCALE]
            }]
          }, {
            type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_8__.Platform
          }];
        }, null);
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/material/core/datetime/native-date-formats.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** @type {?} */


      var _MAT_NATIVE_DATE_FORMATS = {
        parse: {
          dateInput: null
        },
        display: {
          dateInput: {
            year: 'numeric',
            month: 'numeric',
            day: 'numeric'
          },
          monthYearLabel: {
            year: 'numeric',
            month: 'short'
          },
          dateA11yLabel: {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
          },
          monthYearA11yLabel: {
            year: 'numeric',
            month: 'long'
          }
        }
      };
      /**
       * @fileoverview added by tsickle
       * Generated from: src/material/core/datetime/index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      var _NativeDateModule = function _NativeDateModule() {
        _classCallCheck(this, _NativeDateModule);
      };

      _NativeDateModule.ɵfac = function NativeDateModule_Factory(t) {
        return new (t || _NativeDateModule)();
      };

      _NativeDateModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: _NativeDateModule
      });
      _NativeDateModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        providers: [{
          provide: _DateAdapter,
          useClass: _NativeDateAdapter
        }],
        imports: [[_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_8__.PlatformModule]]
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_NativeDateModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
          args: [{
            imports: [_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_8__.PlatformModule],
            providers: [{
              provide: _DateAdapter,
              useClass: _NativeDateAdapter
            }]
          }]
        }], null, null);
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](_NativeDateModule, {
          imports: function imports() {
            return [_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_8__.PlatformModule];
          }
        });
      })();

      var ɵ0$1 = _MAT_NATIVE_DATE_FORMATS;

      var _MatNativeDateModule = function _MatNativeDateModule() {
        _classCallCheck(this, _MatNativeDateModule);
      };

      _MatNativeDateModule.ɵfac = function MatNativeDateModule_Factory(t) {
        return new (t || _MatNativeDateModule)();
      };

      _MatNativeDateModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: _MatNativeDateModule
      });
      _MatNativeDateModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        providers: [{
          provide: _MAT_DATE_FORMATS,
          useValue: ɵ0$1
        }],
        imports: [[_NativeDateModule]]
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_MatNativeDateModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
          args: [{
            imports: [_NativeDateModule],
            providers: [{
              provide: _MAT_DATE_FORMATS,
              useValue: ɵ0$1
            }]
          }]
        }], null, null);
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](_MatNativeDateModule, {
          imports: [_NativeDateModule]
        });
      })();
      /**
       * @fileoverview added by tsickle
       * Generated from: src/material/core/error/error-options.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Error state matcher that matches when a control is invalid and dirty.
       */


      var _ShowOnDirtyErrorStateMatcher = /*#__PURE__*/function () {
        function _ShowOnDirtyErrorStateMatcher() {
          _classCallCheck(this, _ShowOnDirtyErrorStateMatcher);
        }

        _createClass(_ShowOnDirtyErrorStateMatcher, [{
          key: "isErrorState",
          value:
          /**
           * @param {?} control
           * @param {?} form
           * @return {?}
           */
          function isErrorState(control, form) {
            return !!(control && control.invalid && (control.dirty || form && form.submitted));
          }
        }]);

        return _ShowOnDirtyErrorStateMatcher;
      }();

      _ShowOnDirtyErrorStateMatcher.ɵfac = function ShowOnDirtyErrorStateMatcher_Factory(t) {
        return new (t || _ShowOnDirtyErrorStateMatcher)();
      };

      _ShowOnDirtyErrorStateMatcher.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: _ShowOnDirtyErrorStateMatcher,
        factory: _ShowOnDirtyErrorStateMatcher.ɵfac
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_ShowOnDirtyErrorStateMatcher, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable
        }], null, null);
      })();
      /**
       * Provider that defines how form controls behave with regards to displaying error messages.
       */


      var _ErrorStateMatcher = /*#__PURE__*/function () {
        function _ErrorStateMatcher() {
          _classCallCheck(this, _ErrorStateMatcher);
        }

        _createClass(_ErrorStateMatcher, [{
          key: "isErrorState",
          value:
          /**
           * @param {?} control
           * @param {?} form
           * @return {?}
           */
          function isErrorState(control, form) {
            return !!(control && control.invalid && (control.touched || form && form.submitted));
          }
        }]);

        return _ErrorStateMatcher;
      }();

      _ErrorStateMatcher.ɵfac = function ErrorStateMatcher_Factory(t) {
        return new (t || _ErrorStateMatcher)();
      };
      /** @nocollapse */


      _ErrorStateMatcher.ɵprov = (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
        factory: function ErrorStateMatcher_Factory() {
          return new _ErrorStateMatcher();
        },
        token: _ErrorStateMatcher,
        providedIn: "root"
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_ErrorStateMatcher, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
          args: [{
            providedIn: 'root'
          }]
        }], null, null);
      })();
      /**
       * @fileoverview added by tsickle
       * Generated from: src/material/core/gestures/gesture-annotations.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Stripped-down HammerJS annotations to be used within Material, which are necessary,
       * because HammerJS is an optional dependency. For the full annotations see:
       * https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/hammerjs/index.d.ts
       */

      /**
       * @deprecated No longer being used. To be removed.
       * \@breaking-change 10.0.0
       * \@docs-private
       * @record
       */


      function HammerInput() {}

      if (false) {}
      /**
       * @deprecated No longer being used. To be removed.
       * \@breaking-change 10.0.0
       * \@docs-private
       * @record
       */


      function HammerStatic() {}

      if (false) {}
      /**
       * @deprecated No longer being used. To be removed.
       * \@breaking-change 10.0.0
       * \@docs-private
       * @record
       */


      function Recognizer() {}

      if (false) {}
      /**
       * @deprecated No longer being used. To be removed.
       * \@breaking-change 10.0.0
       * \@docs-private
       * @record
       */


      function RecognizerStatic() {}
      /**
       * @deprecated No longer being used. To be removed.
       * \@breaking-change 10.0.0
       * \@docs-private
       * @record
       */


      function HammerInstance() {}

      if (false) {}
      /**
       * @deprecated No longer being used. To be removed.
       * \@breaking-change 10.0.0
       * \@docs-private
       * @record
       */


      function HammerManager() {}

      if (false) {}
      /**
       * @deprecated No longer being used. To be removed.
       * \@breaking-change 10.0.0
       * \@docs-private
       * @record
       */


      function HammerOptions() {}

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/material/core/gestures/gesture-config.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Injection token that can be used to provide options to the Hammerjs instance.
       * More info at http://hammerjs.github.io/api/.
       * @deprecated No longer being used. To be removed.
       * \@breaking-change 10.0.0
       * @type {?}
       */


      var _MAT_HAMMER_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('MAT_HAMMER_OPTIONS');
      /** @type {?} */


      var ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = ['longpress', 'slide', 'slidestart', 'slideend', 'slideright', 'slideleft'];

      var ɵ0$2 =
      /**
      * @return {?}
      */
      function ɵ0$2() {},
          ɵ1 =
      /**
      * @return {?}
      */
      function ɵ1() {};
      /**
       * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not
       * been loaded on the page.
       * @type {?}
       */


      var noopHammerInstance = {
        on: ɵ0$2,
        off: ɵ1
      };
      /**
       * Adjusts configuration of our gesture library, Hammer.
       * @deprecated No longer being used. To be removed.
       * \@breaking-change 10.0.0
       */

      var _GestureConfig = /*#__PURE__*/function (_angular_platform_bro) {
        _inherits(_GestureConfig, _angular_platform_bro);

        var _super26 = _createSuper(_GestureConfig);

        /**
         * @param {?=} _hammerOptions
         * @param {?=} _commonModule
         */
        function _GestureConfig(_hammerOptions, _commonModule) {
          var _this86;

          _classCallCheck(this, _GestureConfig);

          _this86 = _super26.call(this);
          _this86._hammerOptions = _hammerOptions;
          /**
           * List of new event names to add to the gesture support list
           */

          _this86.events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;
          return _this86;
        }
        /**
         * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.
         *
         * Our gesture names come from the Material Design gestures spec:
         * https://material.io/design/#gestures-touch-mechanics
         *
         * More information on default recognizers can be found in Hammer docs:
         * http://hammerjs.github.io/recognizer-pan/
         * http://hammerjs.github.io/recognizer-press/
         *
         * @param {?} element Element to which to assign the new HammerJS gestures.
         * @return {?} Newly-created HammerJS instance.
         */


        _createClass(_GestureConfig, [{
          key: "buildHammer",
          value: function buildHammer(element) {
            /** @type {?} */
            var hammer = typeof window !== 'undefined' ?
            /** @type {?} */
            window.Hammer : null;

            if (!hammer) {
              // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to
              // ensure that omitting HammerJS completely will not cause any errors while *also* supporting
              // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.
              // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set
              // `this.events` to the set we support, instead of conditionally setting it to `[]` if
              // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is
              // undefined).
              // @breaking-change 8.0.0
              return noopHammerInstance;
            }
            /** @type {?} */


            var mc = new hammer(element, this._hammerOptions || undefined); // Default Hammer Recognizers.

            /** @type {?} */

            var pan = new hammer.Pan();
            /** @type {?} */

            var swipe = new hammer.Swipe();
            /** @type {?} */

            var press = new hammer.Press(); // Notice that a HammerJS recognizer can only depend on one other recognizer once.
            // Otherwise the previous `recognizeWith` will be dropped.
            // TODO: Confirm threshold numbers with Material Design UX Team

            /** @type {?} */

            var slide = this._createRecognizer(pan, {
              event: 'slide',
              threshold: 0
            }, swipe);
            /** @type {?} */


            var longpress = this._createRecognizer(press, {
              event: 'longpress',
              time: 500
            }); // Overwrite the default `pan` event to use the swipe event.


            pan.recognizeWith(swipe); // Since the slide event threshold is set to zero, the slide recognizer can fire and
            // accidentally reset the longpress recognizer. In order to make sure that the two
            // recognizers can run simultaneously but don't affect each other, we allow the slide
            // recognizer to recognize while a longpress is being processed.
            // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124

            longpress.recognizeWith(slide); // Add customized gestures to Hammer manager

            mc.add([swipe, press, pan, slide, longpress]);
            return (
              /** @type {?} */
              mc
            );
          }
          /**
           * Creates a new recognizer, without affecting the default recognizers of HammerJS
           * @private
           * @param {?} base
           * @param {?} options
           * @param {...?} inheritances
           * @return {?}
           */

        }, {
          key: "_createRecognizer",
          value: function _createRecognizer(base, options) {
            /** @type {?} */
            var recognizer = new
            /** @type {?} */
            base.constructor(options);

            for (var _len13 = arguments.length, inheritances = new Array(_len13 > 2 ? _len13 - 2 : 0), _key13 = 2; _key13 < _len13; _key13++) {
              inheritances[_key13 - 2] = arguments[_key13];
            }

            inheritances.push(base);
            inheritances.forEach(
            /**
            * @param {?} item
            * @return {?}
            */
            function (item) {
              return recognizer.recognizeWith(item);
            });
            return recognizer;
          }
        }]);

        return _GestureConfig;
      }(_angular_platform_browser__WEBPACK_IMPORTED_MODULE_9__.HammerGestureConfig);

      _GestureConfig.ɵfac = function GestureConfig_Factory(t) {
        return new (t || _GestureConfig)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_MAT_HAMMER_OPTIONS, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_MatCommonModule, 8));
      };

      _GestureConfig.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: _GestureConfig,
        factory: _GestureConfig.ɵfac
      });
      /** @nocollapse */

      _GestureConfig.ctorParameters = function () {
        return [{
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
            args: [_MAT_HAMMER_OPTIONS]
          }]
        }, {
          type: _MatCommonModule,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_GestureConfig, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable
        }], function () {
          return [{
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
              args: [_MAT_HAMMER_OPTIONS]
            }]
          }, {
            type: _MatCommonModule,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
            }]
          }];
        }, null);
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/material/core/line/line.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Shared directive to count lines inside a text area, such as a list item.
       * Line elements can be extracted with a \@ContentChildren(MatLine) query, then
       * counted by checking the query list's length.
       */


      var _MatLine = function _MatLine() {
        _classCallCheck(this, _MatLine);
      };

      _MatLine.ɵfac = function MatLine_Factory(t) {
        return new (t || _MatLine)();
      };

      _MatLine.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: _MatLine,
        selectors: [["", "mat-line", ""], ["", "matLine", ""]],
        hostAttrs: [1, "mat-line"]
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_MatLine, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
          args: [{
            selector: '[mat-line], [matLine]',
            host: {
              'class': 'mat-line'
            }
          }]
        }], null, null);
      })();
      /**
       * Helper that takes a query list of lines and sets the correct class on the host.
       * \@docs-private
       * @param {?} lines
       * @param {?} element
       * @param {?=} prefix
       * @return {?}
       */


      function _setLines(lines, element) {
        var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'mat';
        // Note: doesn't need to unsubscribe, because `changes`
        // gets completed by Angular when the view is destroyed.
        lines.changes.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_10__.startWith)(lines)).subscribe(
        /**
        * @param {?} __0
        * @return {?}
        */
        function (_ref3) {
          var length = _ref3.length;
          setClass(element, "".concat(prefix, "-2-line"), false);
          setClass(element, "".concat(prefix, "-3-line"), false);
          setClass(element, "".concat(prefix, "-multi-line"), false);

          if (length === 2 || length === 3) {
            setClass(element, "".concat(prefix, "-").concat(length, "-line"), true);
          } else if (length > 3) {
            setClass(element, "".concat(prefix, "-multi-line"), true);
          }
        });
      }
      /**
       * Adds or removes a class from an element.
       * @param {?} element
       * @param {?} className
       * @param {?} isAdd
       * @return {?}
       */


      function setClass(element, className, isAdd) {
        /** @type {?} */
        var classList = element.nativeElement.classList;
        isAdd ? classList.add(className) : classList.remove(className);
      }
      /**
       * Helper that takes a query list of lines and sets the correct class on the host.
       * \@docs-private
       * @deprecated Use `setLines` instead.
       * \@breaking-change 8.0.0
       */


      var _MatLineSetter =
      /**
       * @param {?} lines
       * @param {?} element
       */
      function _MatLineSetter(lines, element) {
        _classCallCheck(this, _MatLineSetter);

        _setLines(lines, element);
      };

      var _MatLineModule = function _MatLineModule() {
        _classCallCheck(this, _MatLineModule);
      };

      _MatLineModule.ɵfac = function MatLineModule_Factory(t) {
        return new (t || _MatLineModule)();
      };

      _MatLineModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: _MatLineModule
      });
      _MatLineModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        imports: [[_MatCommonModule], _MatCommonModule]
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_MatLineModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
          args: [{
            imports: [_MatCommonModule],
            exports: [_MatLine, _MatCommonModule],
            declarations: [_MatLine]
          }]
        }], null, null);
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](_MatLineModule, {
          declarations: [_MatLine],
          imports: [_MatCommonModule],
          exports: [_MatLine, _MatCommonModule]
        });
      })();
      /**
       * @fileoverview added by tsickle
       * Generated from: src/material/core/ripple/ripple-ref.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** @enum {number} */


      var RippleState = {
        FADING_IN: 0,
        VISIBLE: 1,
        FADING_OUT: 2,
        HIDDEN: 3
      };
      /**
       * Reference to a previously launched ripple element.
       */

      var _RippleRef = /*#__PURE__*/function () {
        /**
         * @param {?} _renderer
         * @param {?} element
         * @param {?} config
         */
        function _RippleRef(_renderer, element, config) {
          _classCallCheck(this, _RippleRef);

          this._renderer = _renderer;
          this.element = element;
          this.config = config;
          /**
           * Current state of the ripple.
           */

          this.state = 3
          /* HIDDEN */
          ;
        }
        /**
         * Fades out the ripple element.
         * @return {?}
         */


        _createClass(_RippleRef, [{
          key: "fadeOut",
          value: function fadeOut() {
            this._renderer.fadeOutRipple(this);
          }
        }]);

        return _RippleRef;
      }();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/material/core/ripple/ripple-renderer.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Interface that describes the configuration for the animation of a ripple.
       * There are two animation phases with different durations for the ripples.
       * @record
       */


      function RippleAnimationConfig() {}

      if (false) {}
      /**
       * Interface that describes the target for launching ripples.
       * It defines the ripple configuration and disabled state for interaction ripples.
       * \@docs-private
       * @record
       */


      function RippleTarget() {}

      if (false) {}
      /**
       * Default ripple animation configuration for ripples without an explicit
       * animation config specified.
       * @type {?}
       */


      var _defaultRippleAnimationConfig = {
        enterDuration: 450,
        exitDuration: 400
      };
      /**
       * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch
       * events to avoid synthetic mouse events.
       * @type {?}
       */

      var ignoreMouseEventsTimeout = 800;
      /**
       * Options that apply to all the event listeners that are bound by the ripple renderer.
       * @type {?}
       */

      var passiveEventOptions = (0, _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_8__.normalizePassiveListenerOptions)({
        passive: true
      });
      /**
       * Events that signal that the pointer is down.
       * @type {?}
       */

      var pointerDownEvents = ['mousedown', 'touchstart'];
      /**
       * Events that signal that the pointer is up.
       * @type {?}
       */

      var pointerUpEvents = ['mouseup', 'mouseleave', 'touchend', 'touchcancel'];
      /**
       * Helper service that performs DOM manipulations. Not intended to be used outside this module.
       * The constructor takes a reference to the ripple directive's host element and a map of DOM
       * event handlers to be installed on the element that triggers ripple animations.
       * This will eventually become a custom renderer once Angular support exists.
       * \@docs-private
       */

      var _RippleRenderer = /*#__PURE__*/function () {
        /**
         * @param {?} _target
         * @param {?} _ngZone
         * @param {?} elementOrElementRef
         * @param {?} platform
         */
        function _RippleRenderer(_target, _ngZone, elementOrElementRef, platform) {
          _classCallCheck(this, _RippleRenderer);

          this._target = _target;
          this._ngZone = _ngZone;
          /**
           * Whether the pointer is currently down or not.
           */

          this._isPointerDown = false;
          /**
           * Set of currently active ripple references.
           */

          this._activeRipples = new Set();
          /**
           * Whether pointer-up event listeners have been registered.
           */

          this._pointerUpEventsRegistered = false; // Only do anything if we're on the browser.

          if (platform.isBrowser) {
            this._containerElement = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__.coerceElement)(elementOrElementRef);
          }
        }
        /**
         * Fades in a ripple at the given coordinates.
         * @param {?} x Coordinate within the element, along the X axis at which to start the ripple.
         * @param {?} y Coordinate within the element, along the Y axis at which to start the ripple.
         * @param {?=} config Extra ripple options.
         * @return {?}
         */


        _createClass(_RippleRenderer, [{
          key: "fadeInRipple",
          value: function fadeInRipple(x, y) {
            var _this87 = this;

            var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            /** @type {?} */
            var containerRect = this._containerRect = this._containerRect || this._containerElement.getBoundingClientRect();
            /** @type {?} */


            var animationConfig = Object.assign(Object.assign({}, _defaultRippleAnimationConfig), config.animation);

            if (config.centered) {
              x = containerRect.left + containerRect.width / 2;
              y = containerRect.top + containerRect.height / 2;
            }
            /** @type {?} */


            var radius = config.radius || distanceToFurthestCorner(x, y, containerRect);
            /** @type {?} */

            var offsetX = x - containerRect.left;
            /** @type {?} */

            var offsetY = y - containerRect.top;
            /** @type {?} */

            var duration = animationConfig.enterDuration;
            /** @type {?} */

            var ripple = document.createElement('div');
            ripple.classList.add('mat-ripple-element');
            ripple.style.left = "".concat(offsetX - radius, "px");
            ripple.style.top = "".concat(offsetY - radius, "px");
            ripple.style.height = "".concat(radius * 2, "px");
            ripple.style.width = "".concat(radius * 2, "px"); // If a custom color has been specified, set it as inline style. If no color is
            // set, the default color will be applied through the ripple theme styles.

            if (config.color != null) {
              ripple.style.backgroundColor = config.color;
            }

            ripple.style.transitionDuration = "".concat(duration, "ms");

            this._containerElement.appendChild(ripple); // By default the browser does not recalculate the styles of dynamically created
            // ripple elements. This is critical because then the `scale` would not animate properly.


            enforceStyleRecalculation(ripple);
            ripple.style.transform = 'scale(1)'; // Exposed reference to the ripple that will be returned.

            /** @type {?} */

            var rippleRef = new _RippleRef(this, ripple, config);
            rippleRef.state = 0
            /* FADING_IN */
            ; // Add the ripple reference to the list of all active ripples.

            this._activeRipples.add(rippleRef);

            if (!config.persistent) {
              this._mostRecentTransientRipple = rippleRef;
            } // Wait for the ripple element to be completely faded in.
            // Once it's faded in, the ripple can be hidden immediately if the mouse is released.


            this._runTimeoutOutsideZone(
            /**
            * @return {?}
            */
            function () {
              /** @type {?} */
              var isMostRecentTransientRipple = rippleRef === _this87._mostRecentTransientRipple;
              rippleRef.state = 1
              /* VISIBLE */
              ; // When the timer runs out while the user has kept their pointer down, we want to
              // keep only the persistent ripples and the latest transient ripple. We do this,
              // because we don't want stacked transient ripples to appear after their enter
              // animation has finished.

              if (!config.persistent && (!isMostRecentTransientRipple || !_this87._isPointerDown)) {
                rippleRef.fadeOut();
              }
            }, duration);

            return rippleRef;
          }
          /**
           * Fades out a ripple reference.
           * @param {?} rippleRef
           * @return {?}
           */

        }, {
          key: "fadeOutRipple",
          value: function fadeOutRipple(rippleRef) {
            /** @type {?} */
            var wasActive = this._activeRipples["delete"](rippleRef);

            if (rippleRef === this._mostRecentTransientRipple) {
              this._mostRecentTransientRipple = null;
            } // Clear out the cached bounding rect if we have no more ripples.


            if (!this._activeRipples.size) {
              this._containerRect = null;
            } // For ripples that are not active anymore, don't re-run the fade-out animation.


            if (!wasActive) {
              return;
            }
            /** @type {?} */


            var rippleEl = rippleRef.element;
            /** @type {?} */

            var animationConfig = Object.assign(Object.assign({}, _defaultRippleAnimationConfig), rippleRef.config.animation);
            rippleEl.style.transitionDuration = "".concat(animationConfig.exitDuration, "ms");
            rippleEl.style.opacity = '0';
            rippleRef.state = 2
            /* FADING_OUT */
            ; // Once the ripple faded out, the ripple can be safely removed from the DOM.

            this._runTimeoutOutsideZone(
            /**
            * @return {?}
            */
            function () {
              rippleRef.state = 3
              /* HIDDEN */
              ;

              /** @type {?} */
              rippleEl.parentNode.removeChild(rippleEl);
            }, animationConfig.exitDuration);
          }
          /**
           * Fades out all currently active ripples.
           * @return {?}
           */

        }, {
          key: "fadeOutAll",
          value: function fadeOutAll() {
            this._activeRipples.forEach(
            /**
            * @param {?} ripple
            * @return {?}
            */
            function (ripple) {
              return ripple.fadeOut();
            });
          }
          /**
           * Sets up the trigger event listeners
           * @param {?} elementOrElementRef
           * @return {?}
           */

        }, {
          key: "setupTriggerEvents",
          value: function setupTriggerEvents(elementOrElementRef) {
            /** @type {?} */
            var element = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__.coerceElement)(elementOrElementRef);

            if (!element || element === this._triggerElement) {
              return;
            } // Remove all previously registered event listeners from the trigger element.


            this._removeTriggerEvents();

            this._triggerElement = element;

            this._registerEvents(pointerDownEvents);
          }
          /**
           * Handles all registered events.
           * \@docs-private
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "handleEvent",
          value: function handleEvent(event) {
            if (event.type === 'mousedown') {
              this._onMousedown(
              /** @type {?} */
              event);
            } else if (event.type === 'touchstart') {
              this._onTouchStart(
              /** @type {?} */
              event);
            } else {
              this._onPointerUp();
            } // If pointer-up events haven't been registered yet, do so now.
            // We do this on-demand in order to reduce the total number of event listeners
            // registered by the ripples, which speeds up the rendering time for large UIs.


            if (!this._pointerUpEventsRegistered) {
              this._registerEvents(pointerUpEvents);

              this._pointerUpEventsRegistered = true;
            }
          }
          /**
           * Function being called whenever the trigger is being pressed using mouse.
           * @private
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "_onMousedown",
          value: function _onMousedown(event) {
            // Screen readers will fire fake mouse events for space/enter. Skip launching a
            // ripple in this case for consistency with the non-screen-reader experience.

            /** @type {?} */
            var isFakeMousedown = (0, _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_2__.isFakeMousedownFromScreenReader)(event);
            /** @type {?} */

            var isSyntheticEvent = this._lastTouchStartEvent && Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;

            if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {
              this._isPointerDown = true;
              this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);
            }
          }
          /**
           * Function being called whenever the trigger is being pressed using touch.
           * @private
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "_onTouchStart",
          value: function _onTouchStart(event) {
            if (!this._target.rippleDisabled) {
              // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse
              // events will launch a second ripple if we don't ignore mouse events for a specific
              // time after a touchstart event.
              this._lastTouchStartEvent = Date.now();
              this._isPointerDown = true; // Use `changedTouches` so we skip any touches where the user put
              // their finger down, but used another finger to tap the element again.

              /** @type {?} */

              var touches = event.changedTouches;

              for (var i = 0; i < touches.length; i++) {
                this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);
              }
            }
          }
          /**
           * Function being called whenever the trigger is being released.
           * @private
           * @return {?}
           */

        }, {
          key: "_onPointerUp",
          value: function _onPointerUp() {
            if (!this._isPointerDown) {
              return;
            }

            this._isPointerDown = false; // Fade-out all ripples that are visible and not persistent.

            this._activeRipples.forEach(
            /**
            * @param {?} ripple
            * @return {?}
            */
            function (ripple) {
              // By default, only ripples that are completely visible will fade out on pointer release.
              // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.

              /** @type {?} */
              var isVisible = ripple.state === 1
              /* VISIBLE */
              || ripple.config.terminateOnPointerUp && ripple.state === 0
              /* FADING_IN */
              ;

              if (!ripple.config.persistent && isVisible) {
                ripple.fadeOut();
              }
            });
          }
          /**
           * Runs a timeout outside of the Angular zone to avoid triggering the change detection.
           * @private
           * @param {?} fn
           * @param {?=} delay
           * @return {?}
           */

        }, {
          key: "_runTimeoutOutsideZone",
          value: function _runTimeoutOutsideZone(fn) {
            var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

            this._ngZone.runOutsideAngular(
            /**
            * @return {?}
            */
            function () {
              return setTimeout(fn, delay);
            });
          }
          /**
           * Registers event listeners for a given list of events.
           * @private
           * @param {?} eventTypes
           * @return {?}
           */

        }, {
          key: "_registerEvents",
          value: function _registerEvents(eventTypes) {
            var _this88 = this;

            this._ngZone.runOutsideAngular(
            /**
            * @return {?}
            */
            function () {
              eventTypes.forEach(
              /**
              * @param {?} type
              * @return {?}
              */
              function (type) {
                /** @type {?} */
                _this88._triggerElement.addEventListener(type, _this88, passiveEventOptions);
              });
            });
          }
          /**
           * Removes previously registered event listeners from the trigger element.
           * @return {?}
           */

        }, {
          key: "_removeTriggerEvents",
          value: function _removeTriggerEvents() {
            var _this89 = this;

            if (this._triggerElement) {
              pointerDownEvents.forEach(
              /**
              * @param {?} type
              * @return {?}
              */
              function (type) {
                /** @type {?} */
                _this89._triggerElement.removeEventListener(type, _this89, passiveEventOptions);
              });

              if (this._pointerUpEventsRegistered) {
                pointerUpEvents.forEach(
                /**
                * @param {?} type
                * @return {?}
                */
                function (type) {
                  /** @type {?} */
                  _this89._triggerElement.removeEventListener(type, _this89, passiveEventOptions);
                });
              }
            }
          }
        }]);

        return _RippleRenderer;
      }();

      if (false) {}
      /**
       * Enforces a style recalculation of a DOM element by computing its styles.
       * @param {?} element
       * @return {?}
       */


      function enforceStyleRecalculation(element) {
        // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.
        // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.
        // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a
        window.getComputedStyle(element).getPropertyValue('opacity');
      }
      /**
       * Returns the distance from the point (x, y) to the furthest corner of a rectangle.
       * @param {?} x
       * @param {?} y
       * @param {?} rect
       * @return {?}
       */


      function distanceToFurthestCorner(x, y, rect) {
        /** @type {?} */
        var distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));
        /** @type {?} */

        var distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));
        return Math.sqrt(distX * distX + distY * distY);
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: src/material/core/ripple/ripple.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Configurable options for `matRipple`.
       * @record
       */


      function RippleGlobalOptions() {}

      if (false) {}
      /**
       * Injection token that can be used to specify the global ripple options.
       * @type {?}
       */


      var _MAT_RIPPLE_GLOBAL_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('mat-ripple-global-options');

      var _MatRipple = /*#__PURE__*/function () {
        /**
         * @param {?} _elementRef
         * @param {?} ngZone
         * @param {?} platform
         * @param {?=} globalOptions
         * @param {?=} _animationMode
         */
        function _MatRipple(_elementRef, ngZone, platform, globalOptions, _animationMode) {
          _classCallCheck(this, _MatRipple);

          this._elementRef = _elementRef;
          this._animationMode = _animationMode;
          /**
           * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius
           * will be the distance from the center of the ripple to the furthest corner of the host element's
           * bounding rectangle.
           */

          this.radius = 0;
          this._disabled = false;
          /**
           * Whether ripple directive is initialized and the input bindings are set.
           */

          this._isInitialized = false;
          this._globalOptions = globalOptions || {};
          this._rippleRenderer = new _RippleRenderer(this, ngZone, _elementRef, platform);
        }
        /**
         * Whether click events will not trigger the ripple. Ripples can be still launched manually
         * by using the `launch()` method.
         * @return {?}
         */


        _createClass(_MatRipple, [{
          key: "disabled",
          get: function get() {
            return this._disabled;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._disabled = value;

            this._setupTriggerEventsIfEnabled();
          }
          /**
           * The element that triggers the ripple when click events are received.
           * Defaults to the directive's host element.
           * @return {?}
           */

        }, {
          key: "trigger",
          get: function get() {
            return this._trigger || this._elementRef.nativeElement;
          }
          /**
           * @param {?} trigger
           * @return {?}
           */
          ,
          set: function set(trigger) {
            this._trigger = trigger;

            this._setupTriggerEventsIfEnabled();
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnInit",
          value: function ngOnInit() {
            this._isInitialized = true;

            this._setupTriggerEventsIfEnabled();
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this._rippleRenderer._removeTriggerEvents();
          }
          /**
           * Fades out all currently showing ripple elements.
           * @return {?}
           */

        }, {
          key: "fadeOutAll",
          value: function fadeOutAll() {
            this._rippleRenderer.fadeOutAll();
          }
          /**
           * Ripple configuration from the directive's input values.
           * \@docs-private Implemented as part of RippleTarget
           * @return {?}
           */

        }, {
          key: "rippleConfig",
          get: function get() {
            return {
              centered: this.centered,
              radius: this.radius,
              color: this.color,
              animation: Object.assign(Object.assign(Object.assign({}, this._globalOptions.animation), this._animationMode === 'NoopAnimations' ? {
                enterDuration: 0,
                exitDuration: 0
              } : {}), this.animation),
              terminateOnPointerUp: this._globalOptions.terminateOnPointerUp
            };
          }
          /**
           * Whether ripples on pointer-down are disabled or not.
           * \@docs-private Implemented as part of RippleTarget
           * @return {?}
           */

        }, {
          key: "rippleDisabled",
          get: function get() {
            return this.disabled || !!this._globalOptions.disabled;
          }
          /**
           * Sets up the trigger event listeners if ripples are enabled.
           * @private
           * @return {?}
           */

        }, {
          key: "_setupTriggerEventsIfEnabled",
          value: function _setupTriggerEventsIfEnabled() {
            if (!this.disabled && this._isInitialized) {
              this._rippleRenderer.setupTriggerEvents(this.trigger);
            }
          }
          /**
           * Launches a manual ripple at the specified coordinated or just by the ripple config.
           * @param {?} configOrX
           * @param {?=} y
           * @param {?=} config
           * @return {?}
           */

        }, {
          key: "launch",
          value: function launch(configOrX) {
            var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var config = arguments.length > 2 ? arguments[2] : undefined;

            if (typeof configOrX === 'number') {
              return this._rippleRenderer.fadeInRipple(configOrX, y, Object.assign(Object.assign({}, this.rippleConfig), config));
            } else {
              return this._rippleRenderer.fadeInRipple(0, 0, Object.assign(Object.assign({}, this.rippleConfig), configOrX));
            }
          }
        }]);

        return _MatRipple;
      }();

      _MatRipple.ɵfac = function MatRipple_Factory(t) {
        return new (t || _MatRipple)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_8__.Platform), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_MAT_RIPPLE_GLOBAL_OPTIONS, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_11__.ANIMATION_MODULE_TYPE, 8));
      };

      _MatRipple.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: _MatRipple,
        selectors: [["", "mat-ripple", ""], ["", "matRipple", ""]],
        hostAttrs: [1, "mat-ripple"],
        hostVars: 2,
        hostBindings: function MatRipple_HostBindings(rf, ctx) {
          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("mat-ripple-unbounded", ctx.unbounded);
          }
        },
        inputs: {
          radius: ["matRippleRadius", "radius"],
          disabled: ["matRippleDisabled", "disabled"],
          trigger: ["matRippleTrigger", "trigger"],
          color: ["matRippleColor", "color"],
          unbounded: ["matRippleUnbounded", "unbounded"],
          centered: ["matRippleCentered", "centered"],
          animation: ["matRippleAnimation", "animation"]
        },
        exportAs: ["matRipple"]
      });
      /** @nocollapse */

      _MatRipple.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
        }, {
          type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_8__.Platform
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
            args: [_MAT_RIPPLE_GLOBAL_OPTIONS]
          }]
        }, {
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
            args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_11__.ANIMATION_MODULE_TYPE]
          }]
        }];
      };

      _MatRipple.propDecorators = {
        color: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
          args: ['matRippleColor']
        }],
        unbounded: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
          args: ['matRippleUnbounded']
        }],
        centered: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
          args: ['matRippleCentered']
        }],
        radius: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
          args: ['matRippleRadius']
        }],
        animation: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
          args: ['matRippleAnimation']
        }],
        disabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
          args: ['matRippleDisabled']
        }],
        trigger: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
          args: ['matRippleTrigger']
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_MatRipple, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
          args: [{
            selector: '[mat-ripple], [matRipple]',
            exportAs: 'matRipple',
            host: {
              'class': 'mat-ripple',
              '[class.mat-ripple-unbounded]': 'unbounded'
            }
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
          }, {
            type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_8__.Platform
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
              args: [_MAT_RIPPLE_GLOBAL_OPTIONS]
            }]
          }, {
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
              args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_11__.ANIMATION_MODULE_TYPE]
            }]
          }];
        }, {
          radius: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
            args: ['matRippleRadius']
          }],
          disabled: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
            args: ['matRippleDisabled']
          }],
          trigger: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
            args: ['matRippleTrigger']
          }],
          color: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
            args: ['matRippleColor']
          }],
          unbounded: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
            args: ['matRippleUnbounded']
          }],
          centered: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
            args: ['matRippleCentered']
          }],
          animation: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
            args: ['matRippleAnimation']
          }]
        });
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/material/core/ripple/index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var _MatRippleModule = function _MatRippleModule() {
        _classCallCheck(this, _MatRippleModule);
      };

      _MatRippleModule.ɵfac = function MatRippleModule_Factory(t) {
        return new (t || _MatRippleModule)();
      };

      _MatRippleModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: _MatRippleModule
      });
      _MatRippleModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        imports: [[_MatCommonModule, _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_8__.PlatformModule], _MatCommonModule]
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_MatRippleModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
          args: [{
            imports: [_MatCommonModule, _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_8__.PlatformModule],
            exports: [_MatRipple, _MatCommonModule],
            declarations: [_MatRipple]
          }]
        }], null, null);
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](_MatRippleModule, {
          declarations: function declarations() {
            return [_MatRipple];
          },
          imports: function imports() {
            return [_MatCommonModule, _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_8__.PlatformModule];
          },
          exports: function exports() {
            return [_MatRipple, _MatCommonModule];
          }
        });
      })();
      /**
       * @fileoverview added by tsickle
       * Generated from: src/material/core/selection/pseudo-checkbox/pseudo-checkbox.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Component that shows a simplified checkbox without including any kind of "real" checkbox.
       * Meant to be used when the checkbox is purely decorative and a large number of them will be
       * included, such as for the options in a multi-select. Uses no SVGs or complex animations.
       * Note that theming is meant to be handled by the parent element, e.g.
       * `mat-primary .mat-pseudo-checkbox`.
       *
       * Note that this component will be completely invisible to screen-reader users. This is *not*
       * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly
       * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail
       * of more complex components that appropriately handle selected / checked state.
       * \@docs-private
       */


      var _MatPseudoCheckbox =
      /**
       * @param {?=} _animationMode
       */
      function _MatPseudoCheckbox(_animationMode) {
        _classCallCheck(this, _MatPseudoCheckbox);

        this._animationMode = _animationMode;
        /**
         * Display state of the checkbox.
         */

        this.state = 'unchecked';
        /**
         * Whether the checkbox is disabled.
         */

        this.disabled = false;
      };

      _MatPseudoCheckbox.ɵfac = function MatPseudoCheckbox_Factory(t) {
        return new (t || _MatPseudoCheckbox)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_11__.ANIMATION_MODULE_TYPE, 8));
      };

      _MatPseudoCheckbox.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: _MatPseudoCheckbox,
        selectors: [["mat-pseudo-checkbox"]],
        hostAttrs: [1, "mat-pseudo-checkbox"],
        hostVars: 8,
        hostBindings: function MatPseudoCheckbox_HostBindings(rf, ctx) {
          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("mat-pseudo-checkbox-indeterminate", ctx.state === "indeterminate")("mat-pseudo-checkbox-checked", ctx.state === "checked")("mat-pseudo-checkbox-disabled", ctx.disabled)("_mat-animation-noopable", ctx._animationMode === "NoopAnimations");
          }
        },
        inputs: {
          state: "state",
          disabled: "disabled"
        },
        decls: 0,
        vars: 0,
        template: function MatPseudoCheckbox_Template(rf, ctx) {},
        styles: [".mat-pseudo-checkbox{width:16px;height:16px;border:2px solid;border-radius:2px;cursor:pointer;display:inline-block;vertical-align:middle;box-sizing:border-box;position:relative;flex-shrink:0;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1),background-color 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox::after{position:absolute;opacity:0;content:\"\";border-bottom:2px solid currentColor;transition:opacity 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox.mat-pseudo-checkbox-checked,.mat-pseudo-checkbox.mat-pseudo-checkbox-indeterminate{border-color:transparent}._mat-animation-noopable.mat-pseudo-checkbox{transition:none;animation:none}._mat-animation-noopable.mat-pseudo-checkbox::after{transition:none}.mat-pseudo-checkbox-disabled{cursor:default}.mat-pseudo-checkbox-indeterminate::after{top:5px;left:1px;width:10px;opacity:1;border-radius:2px}.mat-pseudo-checkbox-checked::after{top:2.4px;left:1px;width:8px;height:3px;border-left:2px solid currentColor;transform:rotate(-45deg);opacity:1;box-sizing:content-box}\n"],
        encapsulation: 2,
        changeDetection: 0
      });
      /** @nocollapse */

      _MatPseudoCheckbox.ctorParameters = function () {
        return [{
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
            args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_11__.ANIMATION_MODULE_TYPE]
          }]
        }];
      };

      _MatPseudoCheckbox.propDecorators = {
        state: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        disabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_MatPseudoCheckbox, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
          args: [{
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewEncapsulation.None,
            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.OnPush,
            selector: 'mat-pseudo-checkbox',
            template: '',
            host: {
              'class': 'mat-pseudo-checkbox',
              '[class.mat-pseudo-checkbox-indeterminate]': 'state === "indeterminate"',
              '[class.mat-pseudo-checkbox-checked]': 'state === "checked"',
              '[class.mat-pseudo-checkbox-disabled]': 'disabled',
              '[class._mat-animation-noopable]': '_animationMode === "NoopAnimations"'
            },
            styles: [".mat-pseudo-checkbox{width:16px;height:16px;border:2px solid;border-radius:2px;cursor:pointer;display:inline-block;vertical-align:middle;box-sizing:border-box;position:relative;flex-shrink:0;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1),background-color 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox::after{position:absolute;opacity:0;content:\"\";border-bottom:2px solid currentColor;transition:opacity 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox.mat-pseudo-checkbox-checked,.mat-pseudo-checkbox.mat-pseudo-checkbox-indeterminate{border-color:transparent}._mat-animation-noopable.mat-pseudo-checkbox{transition:none;animation:none}._mat-animation-noopable.mat-pseudo-checkbox::after{transition:none}.mat-pseudo-checkbox-disabled{cursor:default}.mat-pseudo-checkbox-indeterminate::after{top:5px;left:1px;width:10px;opacity:1;border-radius:2px}.mat-pseudo-checkbox-checked::after{top:2.4px;left:1px;width:8px;height:3px;border-left:2px solid currentColor;transform:rotate(-45deg);opacity:1;box-sizing:content-box}\n"]
          }]
        }], function () {
          return [{
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
              args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_11__.ANIMATION_MODULE_TYPE]
            }]
          }];
        }, {
          state: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          disabled: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }]
        });
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/material/core/selection/index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var _MatPseudoCheckboxModule = function _MatPseudoCheckboxModule() {
        _classCallCheck(this, _MatPseudoCheckboxModule);
      };

      _MatPseudoCheckboxModule.ɵfac = function MatPseudoCheckboxModule_Factory(t) {
        return new (t || _MatPseudoCheckboxModule)();
      };

      _MatPseudoCheckboxModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: _MatPseudoCheckboxModule
      });
      _MatPseudoCheckboxModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({});

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_MatPseudoCheckboxModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
          args: [{
            exports: [_MatPseudoCheckbox],
            declarations: [_MatPseudoCheckbox]
          }]
        }], null, null);
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](_MatPseudoCheckboxModule, {
          declarations: [_MatPseudoCheckbox],
          exports: [_MatPseudoCheckbox]
        });
      })();
      /**
       * @fileoverview added by tsickle
       * Generated from: src/material/core/option/optgroup.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      // Boilerplate for applying mixins to MatOptgroup.

      /**
       * \@docs-private
       */


      var MatOptgroupBase = function MatOptgroupBase() {
        _classCallCheck(this, MatOptgroupBase);
      };
      /** @type {?} */


      var _MatOptgroupMixinBase = _mixinDisabled(MatOptgroupBase); // Counter for unique group ids.

      /** @type {?} */


      var _uniqueOptgroupIdCounter = 0;
      /**
       * Component that is used to group instances of `mat-option`.
       */

      var _MatOptgroup = /*#__PURE__*/function (_MatOptgroupMixinBase2) {
        _inherits(_MatOptgroup, _MatOptgroupMixinBase2);

        var _super27 = _createSuper(_MatOptgroup);

        function _MatOptgroup() {
          var _this90;

          _classCallCheck(this, _MatOptgroup);

          _this90 = _super27.apply(this, arguments);
          /**
           * Unique id for the underlying label.
           */

          _this90._labelId = "mat-optgroup-label-".concat(_uniqueOptgroupIdCounter++);
          return _this90;
        }

        return _MatOptgroup;
      }(_MatOptgroupMixinBase);

      _MatOptgroup.ɵfac = /*@__PURE__*/function () {
        var ɵMatOptgroup_BaseFactory;
        return function MatOptgroup_Factory(t) {
          return (ɵMatOptgroup_BaseFactory || (ɵMatOptgroup_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](_MatOptgroup)))(t || _MatOptgroup);
        };
      }();

      _MatOptgroup.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: _MatOptgroup,
        selectors: [["mat-optgroup"]],
        hostAttrs: ["role", "group", 1, "mat-optgroup"],
        hostVars: 4,
        hostBindings: function MatOptgroup_HostBindings(rf, ctx) {
          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-disabled", ctx.disabled.toString())("aria-labelledby", ctx._labelId);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("mat-optgroup-disabled", ctx.disabled);
          }
        },
        inputs: {
          disabled: "disabled",
          label: "label"
        },
        exportAs: ["matOptgroup"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]],
        ngContentSelectors: _c1,
        decls: 4,
        vars: 2,
        consts: [[1, "mat-optgroup-label", 3, "id"]],
        template: function MatOptgroup_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"](_c0);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "label", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](3, 1);
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("id", ctx._labelId);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"]("", ctx.label, " ");
          }
        },
        styles: [".mat-optgroup-label{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-optgroup-label[disabled]{cursor:default}[dir=rtl] .mat-optgroup-label{text-align:right}.mat-optgroup-label .mat-icon{margin-right:16px;vertical-align:middle}.mat-optgroup-label .mat-icon svg{vertical-align:top}[dir=rtl] .mat-optgroup-label .mat-icon{margin-left:16px;margin-right:0}\n"],
        encapsulation: 2,
        changeDetection: 0
      });
      _MatOptgroup.propDecorators = {
        label: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_MatOptgroup, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
          args: [{
            selector: 'mat-optgroup',
            exportAs: 'matOptgroup',
            template: "<label class=\"mat-optgroup-label\" [id]=\"_labelId\">{{ label }} <ng-content></ng-content></label>\n<ng-content select=\"mat-option, ng-container\"></ng-content>\n",
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewEncapsulation.None,
            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.OnPush,
            inputs: ['disabled'],
            host: {
              'class': 'mat-optgroup',
              'role': 'group',
              '[class.mat-optgroup-disabled]': 'disabled',
              '[attr.aria-disabled]': 'disabled.toString()',
              '[attr.aria-labelledby]': '_labelId'
            },
            styles: [".mat-optgroup-label{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-optgroup-label[disabled]{cursor:default}[dir=rtl] .mat-optgroup-label{text-align:right}.mat-optgroup-label .mat-icon{margin-right:16px;vertical-align:middle}.mat-optgroup-label .mat-icon svg{vertical-align:top}[dir=rtl] .mat-optgroup-label .mat-icon{margin-left:16px;margin-right:0}\n"]
          }]
        }], null, {
          label: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }]
        });
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/material/core/option/option.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Option IDs need to be unique across components, so this counter exists outside of
       * the component definition.
       * @type {?}
       */


      var _uniqueIdCounter = 0;
      /**
       * Event object emitted by MatOption when selected or deselected.
       */

      var _MatOptionSelectionChange =
      /**
       * @param {?} source
       * @param {?=} isUserInput
       */
      function _MatOptionSelectionChange(source) {
        var isUserInput = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        _classCallCheck(this, _MatOptionSelectionChange);

        this.source = source;
        this.isUserInput = isUserInput;
      };

      if (false) {}
      /**
       * Describes a parent component that manages a list of options.
       * Contains properties that the options can inherit.
       * \@docs-private
       * @record
       */


      function MatOptionParentComponent() {}

      if (false) {}
      /**
       * Injection token used to provide the parent component to options.
       * @type {?}
       */


      var _MAT_OPTION_PARENT_COMPONENT = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('MAT_OPTION_PARENT_COMPONENT');
      /**
       * Single option inside of a `<mat-select>` element.
       */


      var _MatOption = /*#__PURE__*/function () {
        /**
         * @param {?} _element
         * @param {?} _changeDetectorRef
         * @param {?} _parent
         * @param {?} group
         */
        function _MatOption(_element, _changeDetectorRef, _parent, group) {
          _classCallCheck(this, _MatOption);

          this._element = _element;
          this._changeDetectorRef = _changeDetectorRef;
          this._parent = _parent;
          this.group = group;
          this._selected = false;
          this._active = false;
          this._disabled = false;
          this._mostRecentViewValue = '';
          /**
           * The unique ID of the option.
           */

          this.id = "mat-option-".concat(_uniqueIdCounter++);
          /**
           * Event emitted when the option is selected or deselected.
           */
          // tslint:disable-next-line:no-output-on-prefix

          this.onSelectionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
          /**
           * Emits when the state of the option changes and any parents have to be notified.
           */

          this._stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_6__.Subject();
        }
        /**
         * Whether the wrapping component is in multiple selection mode.
         * @return {?}
         */


        _createClass(_MatOption, [{
          key: "multiple",
          get: function get() {
            return this._parent && this._parent.multiple;
          }
          /**
           * Whether or not the option is currently selected.
           * @return {?}
           */

        }, {
          key: "selected",
          get: function get() {
            return this._selected;
          }
          /**
           * Whether the option is disabled.
           * @return {?}
           */

        }, {
          key: "disabled",
          get: function get() {
            return this.group && this.group.disabled || this._disabled;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._disabled = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__.coerceBooleanProperty)(value);
          }
          /**
           * Whether ripples for the option are disabled.
           * @return {?}
           */

        }, {
          key: "disableRipple",
          get: function get() {
            return this._parent && this._parent.disableRipple;
          }
          /**
           * Whether or not the option is currently active and ready to be selected.
           * An active option displays styles as if it is focused, but the
           * focus is actually retained somewhere else. This comes in handy
           * for components like autocomplete where focus must remain on the input.
           * @return {?}
           */

        }, {
          key: "active",
          get: function get() {
            return this._active;
          }
          /**
           * The displayed value of the option. It is necessary to show the selected option in the
           * select's trigger.
           * @return {?}
           */

        }, {
          key: "viewValue",
          get: function get() {
            // TODO(kara): Add input property alternative for node envs.
            return (this._getHostElement().textContent || '').trim();
          }
          /**
           * Selects the option.
           * @return {?}
           */

        }, {
          key: "select",
          value: function select() {
            if (!this._selected) {
              this._selected = true;

              this._changeDetectorRef.markForCheck();

              this._emitSelectionChangeEvent();
            }
          }
          /**
           * Deselects the option.
           * @return {?}
           */

        }, {
          key: "deselect",
          value: function deselect() {
            if (this._selected) {
              this._selected = false;

              this._changeDetectorRef.markForCheck();

              this._emitSelectionChangeEvent();
            }
          }
          /**
           * Sets focus onto this option.
           * @param {?=} _origin
           * @param {?=} options
           * @return {?}
           */

        }, {
          key: "focus",
          value: function focus(_origin, options) {
            // Note that we aren't using `_origin`, but we need to keep it because some internal consumers
            // use `MatOption` in a `FocusKeyManager` and we need it to match `FocusableOption`.

            /** @type {?} */
            var element = this._getHostElement();

            if (typeof element.focus === 'function') {
              element.focus(options);
            }
          }
          /**
           * This method sets display styles on the option to make it appear
           * active. This is used by the ActiveDescendantKeyManager so key
           * events will display the proper options as active on arrow key events.
           * @return {?}
           */

        }, {
          key: "setActiveStyles",
          value: function setActiveStyles() {
            if (!this._active) {
              this._active = true;

              this._changeDetectorRef.markForCheck();
            }
          }
          /**
           * This method removes display styles on the option that made it appear
           * active. This is used by the ActiveDescendantKeyManager so key
           * events will display the proper options as active on arrow key events.
           * @return {?}
           */

        }, {
          key: "setInactiveStyles",
          value: function setInactiveStyles() {
            if (this._active) {
              this._active = false;

              this._changeDetectorRef.markForCheck();
            }
          }
          /**
           * Gets the label to be used when determining whether the option should be focused.
           * @return {?}
           */

        }, {
          key: "getLabel",
          value: function getLabel() {
            return this.viewValue;
          }
          /**
           * Ensures the option is selected when activated from the keyboard.
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "_handleKeydown",
          value: function _handleKeydown(event) {
            if ((event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__.ENTER || event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__.SPACE) && !(0, _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__.hasModifierKey)(event)) {
              this._selectViaInteraction(); // Prevent the page from scrolling down and form submits.


              event.preventDefault();
            }
          }
          /**
           * `Selects the option while indicating the selection came from the user. Used to
           * determine if the select's view -> model callback should be invoked.`
           * @return {?}
           */

        }, {
          key: "_selectViaInteraction",
          value: function _selectViaInteraction() {
            if (!this.disabled) {
              this._selected = this.multiple ? !this._selected : true;

              this._changeDetectorRef.markForCheck();

              this._emitSelectionChangeEvent(true);
            }
          }
          /**
           * Gets the `aria-selected` value for the option. We explicitly omit the `aria-selected`
           * attribute from single-selection, unselected options. Including the `aria-selected="false"`
           * attributes adds a significant amount of noise to screen-reader users without providing useful
           * information.
           * @return {?}
           */

        }, {
          key: "_getAriaSelected",
          value: function _getAriaSelected() {
            return this.selected || (this.multiple ? false : null);
          }
          /**
           * Returns the correct tabindex for the option depending on disabled state.
           * @return {?}
           */

        }, {
          key: "_getTabIndex",
          value: function _getTabIndex() {
            return this.disabled ? '-1' : '0';
          }
          /**
           * Gets the host DOM element.
           * @return {?}
           */

        }, {
          key: "_getHostElement",
          value: function _getHostElement() {
            return this._element.nativeElement;
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngAfterViewChecked",
          value: function ngAfterViewChecked() {
            // Since parent components could be using the option's label to display the selected values
            // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed
            // we have to check for changes in the DOM ourselves and dispatch an event. These checks are
            // relatively cheap, however we still limit them only to selected options in order to avoid
            // hitting the DOM too often.
            if (this._selected) {
              /** @type {?} */
              var viewValue = this.viewValue;

              if (viewValue !== this._mostRecentViewValue) {
                this._mostRecentViewValue = viewValue;

                this._stateChanges.next();
              }
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this._stateChanges.complete();
          }
          /**
           * Emits the selection change event.
           * @private
           * @param {?=} isUserInput
           * @return {?}
           */

        }, {
          key: "_emitSelectionChangeEvent",
          value: function _emitSelectionChangeEvent() {
            var isUserInput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
            this.onSelectionChange.emit(new _MatOptionSelectionChange(this, isUserInput));
          }
        }]);

        return _MatOption;
      }();

      _MatOption.ɵfac = function MatOption_Factory(t) {
        return new (t || _MatOption)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_MAT_OPTION_PARENT_COMPONENT, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_MatOptgroup, 8));
      };

      _MatOption.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: _MatOption,
        selectors: [["mat-option"]],
        hostAttrs: ["role", "option", 1, "mat-option", "mat-focus-indicator"],
        hostVars: 12,
        hostBindings: function MatOption_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function MatOption_click_HostBindingHandler() {
              return ctx._selectViaInteraction();
            })("keydown", function MatOption_keydown_HostBindingHandler($event) {
              return ctx._handleKeydown($event);
            });
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵhostProperty"]("id", ctx.id);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("tabindex", ctx._getTabIndex())("aria-selected", ctx._getAriaSelected())("aria-disabled", ctx.disabled.toString());

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("mat-selected", ctx.selected)("mat-option-multiple", ctx.multiple)("mat-active", ctx.active)("mat-option-disabled", ctx.disabled);
          }
        },
        inputs: {
          id: "id",
          disabled: "disabled",
          value: "value"
        },
        outputs: {
          onSelectionChange: "onSelectionChange"
        },
        exportAs: ["matOption"],
        ngContentSelectors: _c2,
        decls: 4,
        vars: 3,
        consts: [["class", "mat-option-pseudo-checkbox", 3, "state", "disabled", 4, "ngIf"], [1, "mat-option-text"], ["mat-ripple", "", 1, "mat-option-ripple", 3, "matRippleTrigger", "matRippleDisabled"], [1, "mat-option-pseudo-checkbox", 3, "state", "disabled"]],
        template: function MatOption_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, MatOption_mat_pseudo_checkbox_0_Template, 1, 2, "mat-pseudo-checkbox", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "span", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](3, "div", 2);
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.multiple);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("matRippleTrigger", ctx._getHostElement())("matRippleDisabled", ctx.disabled || ctx.disableRipple);
          }
        },
        directives: [_angular_common__WEBPACK_IMPORTED_MODULE_3__.NgIf, _MatRipple, _MatPseudoCheckbox],
        styles: [".mat-option{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative;cursor:pointer;outline:none;display:flex;flex-direction:row;max-width:100%;box-sizing:border-box;align-items:center;-webkit-tap-highlight-color:transparent}.mat-option[disabled]{cursor:default}[dir=rtl] .mat-option{text-align:right}.mat-option .mat-icon{margin-right:16px;vertical-align:middle}.mat-option .mat-icon svg{vertical-align:top}[dir=rtl] .mat-option .mat-icon{margin-left:16px;margin-right:0}.mat-option[aria-disabled=true]{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-optgroup .mat-option:not(.mat-option-multiple){padding-left:32px}[dir=rtl] .mat-optgroup .mat-option:not(.mat-option-multiple){padding-left:16px;padding-right:32px}.cdk-high-contrast-active .mat-option{margin:0 1px}.cdk-high-contrast-active .mat-option.mat-active{border:solid 1px currentColor;margin:0}.mat-option-text{display:inline-block;flex-grow:1;overflow:hidden;text-overflow:ellipsis}.mat-option .mat-option-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.cdk-high-contrast-active .mat-option .mat-option-ripple{opacity:.5}.mat-option-pseudo-checkbox{margin-right:8px}[dir=rtl] .mat-option-pseudo-checkbox{margin-left:8px;margin-right:0}\n"],
        encapsulation: 2,
        changeDetection: 0
      });
      /** @nocollapse */

      _MatOption.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
            args: [_MAT_OPTION_PARENT_COMPONENT]
          }]
        }, {
          type: _MatOptgroup,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
          }]
        }];
      };

      _MatOption.propDecorators = {
        value: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        id: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        disabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        onSelectionChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_MatOption, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
          args: [{
            selector: 'mat-option',
            exportAs: 'matOption',
            host: {
              'role': 'option',
              '[attr.tabindex]': '_getTabIndex()',
              '[class.mat-selected]': 'selected',
              '[class.mat-option-multiple]': 'multiple',
              '[class.mat-active]': 'active',
              '[id]': 'id',
              '[attr.aria-selected]': '_getAriaSelected()',
              '[attr.aria-disabled]': 'disabled.toString()',
              '[class.mat-option-disabled]': 'disabled',
              '(click)': '_selectViaInteraction()',
              '(keydown)': '_handleKeydown($event)',
              'class': 'mat-option mat-focus-indicator'
            },
            template: "<mat-pseudo-checkbox *ngIf=\"multiple\" class=\"mat-option-pseudo-checkbox\"\n    [state]=\"selected ? 'checked' : 'unchecked'\" [disabled]=\"disabled\"></mat-pseudo-checkbox>\n\n<span class=\"mat-option-text\"><ng-content></ng-content></span>\n\n<div class=\"mat-option-ripple\" mat-ripple\n     [matRippleTrigger]=\"_getHostElement()\"\n     [matRippleDisabled]=\"disabled || disableRipple\">\n</div>\n",
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewEncapsulation.None,
            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.OnPush,
            styles: [".mat-option{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative;cursor:pointer;outline:none;display:flex;flex-direction:row;max-width:100%;box-sizing:border-box;align-items:center;-webkit-tap-highlight-color:transparent}.mat-option[disabled]{cursor:default}[dir=rtl] .mat-option{text-align:right}.mat-option .mat-icon{margin-right:16px;vertical-align:middle}.mat-option .mat-icon svg{vertical-align:top}[dir=rtl] .mat-option .mat-icon{margin-left:16px;margin-right:0}.mat-option[aria-disabled=true]{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-optgroup .mat-option:not(.mat-option-multiple){padding-left:32px}[dir=rtl] .mat-optgroup .mat-option:not(.mat-option-multiple){padding-left:16px;padding-right:32px}.cdk-high-contrast-active .mat-option{margin:0 1px}.cdk-high-contrast-active .mat-option.mat-active{border:solid 1px currentColor;margin:0}.mat-option-text{display:inline-block;flex-grow:1;overflow:hidden;text-overflow:ellipsis}.mat-option .mat-option-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.cdk-high-contrast-active .mat-option .mat-option-ripple{opacity:.5}.mat-option-pseudo-checkbox{margin-right:8px}[dir=rtl] .mat-option-pseudo-checkbox{margin-left:8px;margin-right:0}\n"]
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
              args: [_MAT_OPTION_PARENT_COMPONENT]
            }]
          }, {
            type: _MatOptgroup,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
            }]
          }];
        }, {
          id: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          onSelectionChange: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
          }],
          disabled: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          value: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }]
        });
      })();

      if (false) {}
      /**
       * Counts the amount of option group labels that precede the specified option.
       * \@docs-private
       * @param {?} optionIndex Index of the option at which to start counting.
       * @param {?} options Flat list of all of the options.
       * @param {?} optionGroups Flat list of all of the option groups.
       * @return {?}
       */


      function _countGroupLabelsBeforeOption2(optionIndex, options, optionGroups) {
        if (optionGroups.length) {
          /** @type {?} */
          var optionsArray = options.toArray();
          /** @type {?} */

          var groups = optionGroups.toArray();
          /** @type {?} */

          var groupCounter = 0;

          for (var i = 0; i < optionIndex + 1; i++) {
            if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {
              groupCounter++;
            }
          }

          return groupCounter;
        }

        return 0;
      }
      /**
       * Determines the position to which to scroll a panel in order for an option to be into view.
       * \@docs-private
       * @param {?} optionIndex Index of the option to be scrolled into the view.
       * @param {?} optionHeight Height of the options.
       * @param {?} currentScrollPosition Current scroll position of the panel.
       * @param {?} panelHeight Height of the panel.
       * @return {?}
       */


      function _getOptionScrollPosition2(optionIndex, optionHeight, currentScrollPosition, panelHeight) {
        /** @type {?} */
        var optionOffset = optionIndex * optionHeight;

        if (optionOffset < currentScrollPosition) {
          return optionOffset;
        }

        if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {
          return Math.max(0, optionOffset - panelHeight + optionHeight);
        }

        return currentScrollPosition;
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: src/material/core/option/index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var _MatOptionModule = function _MatOptionModule() {
        _classCallCheck(this, _MatOptionModule);
      };

      _MatOptionModule.ɵfac = function MatOptionModule_Factory(t) {
        return new (t || _MatOptionModule)();
      };

      _MatOptionModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: _MatOptionModule
      });
      _MatOptionModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        imports: [[_MatRippleModule, _angular_common__WEBPACK_IMPORTED_MODULE_3__.CommonModule, _MatPseudoCheckboxModule]]
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_MatOptionModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
          args: [{
            imports: [_MatRippleModule, _angular_common__WEBPACK_IMPORTED_MODULE_3__.CommonModule, _MatPseudoCheckboxModule],
            exports: [_MatOption, _MatOptgroup],
            declarations: [_MatOption, _MatOptgroup]
          }]
        }], null, null);
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](_MatOptionModule, {
          declarations: function declarations() {
            return [_MatOption, _MatOptgroup];
          },
          imports: function imports() {
            return [_MatRippleModule, _angular_common__WEBPACK_IMPORTED_MODULE_3__.CommonModule, _MatPseudoCheckboxModule];
          },
          exports: function exports() {
            return [_MatOption, _MatOptgroup];
          }
        });
      })();
      /**
       * @fileoverview added by tsickle
       * Generated from: src/material/core/label/label-options.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * InjectionToken that can be used to specify the global label options.
       * @deprecated Use `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token from
       *     `\@angular/material/form-field` instead.
       * \@breaking-change 11.0.0
       * @type {?}
       */


      var _MAT_LABEL_GLOBAL_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('mat-label-global-options');
      /**
       * Configurable options for floating labels.
       * @deprecated Use `MatFormFieldDefaultOptions` from `\@angular/material/form-field` instead.
       * \@breaking-change 11.0.0
       * @record
       */


      function LabelOptions() {}

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/material/core/month-constants.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * When constructing a Date, the month is zero-based. This can be confusing, since people are
       * used to seeing them one-based. So we create these aliases to make writing the tests easier.
       * \@docs-private
       * \@breaking-change 8.0.0 Remove this with V8 since it was only targeted for testing.
       * @type {?}
       */


      var _JAN = 0;
      /** @type {?} */

      var _FEB = 1;
      /** @type {?} */

      var _MAR = 2;
      /** @type {?} */

      var _APR = 3;
      /** @type {?} */

      var _MAY = 4;
      /** @type {?} */

      var _JUN = 5;
      /** @type {?} */

      var _JUL = 6;
      /** @type {?} */

      var _AUG = 7;
      /** @type {?} */

      var _SEP = 8;
      /** @type {?} */

      var _OCT = 9;
      /** @type {?} */

      var _NOV = 10;
      /** @type {?} */

      var _DEC = 11;
      /**
       * @fileoverview added by tsickle
       * Generated from: src/material/core/public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Generated bundle index. Do not edit.
       */

      /***/
    },

    /***/
    68456:
    /*!***************************************************************************!*\
      !*** ./node_modules/@angular/material/__ivy_ngcc__/fesm2015/snack-bar.js ***!
      \***************************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "MAT_SNACK_BAR_DATA": function MAT_SNACK_BAR_DATA() {
          return (
            /* binding */
            _MAT_SNACK_BAR_DATA
          );
        },

        /* harmony export */
        "MAT_SNACK_BAR_DEFAULT_OPTIONS": function MAT_SNACK_BAR_DEFAULT_OPTIONS() {
          return (
            /* binding */
            _MAT_SNACK_BAR_DEFAULT_OPTIONS
          );
        },

        /* harmony export */
        "MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY": function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {
          return (
            /* binding */
            _MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY
          );
        },

        /* harmony export */
        "MatSnackBar": function MatSnackBar() {
          return (
            /* binding */
            _MatSnackBar
          );
        },

        /* harmony export */
        "MatSnackBarConfig": function MatSnackBarConfig() {
          return (
            /* binding */
            _MatSnackBarConfig
          );
        },

        /* harmony export */
        "MatSnackBarContainer": function MatSnackBarContainer() {
          return (
            /* binding */
            _MatSnackBarContainer
          );
        },

        /* harmony export */
        "MatSnackBarModule": function MatSnackBarModule() {
          return (
            /* binding */
            _MatSnackBarModule
          );
        },

        /* harmony export */
        "MatSnackBarRef": function MatSnackBarRef() {
          return (
            /* binding */
            _MatSnackBarRef
          );
        },

        /* harmony export */
        "SimpleSnackBar": function SimpleSnackBar() {
          return (
            /* binding */
            _SimpleSnackBar
          );
        },

        /* harmony export */
        "matSnackBarAnimations": function matSnackBarAnimations() {
          return (
            /* binding */
            _matSnackBarAnimations
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! @angular/cdk/overlay */
      45129);
      /* harmony import */


      var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/cdk/portal */
      40912);
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/common */
      54364);
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      2316);
      /* harmony import */


      var _angular_material_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! @angular/material/core */
      32220);
      /* harmony import */


      var _angular_material_button__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/material/button */
      70781);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! rxjs */
      79441);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! rxjs/operators */
      53466);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! rxjs/operators */
      22663);
      /* harmony import */


      var _angular_animations__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/animations */
      97175);
      /* harmony import */


      var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
      /*! @angular/cdk/a11y */
      51606);
      /* harmony import */


      var _angular_cdk_layout__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! @angular/cdk/layout */
      66883);
      /**
       * @fileoverview added by tsickle
       * Generated from: src/material/snack-bar/snack-bar-ref.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Event that is emitted when a snack bar is dismissed.
       * @record
       */


      function SimpleSnackBar_div_2_Template(rf, ctx) {
        if (rf & 1) {
          var _r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "button", 2);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SimpleSnackBar_div_2_Template_button_click_1_listener() {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r2);

            var ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

            return ctx_r1.action();
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx_r0.data.action);
        }
      }

      function MatSnackBarContainer_ng_template_0_Template(rf, ctx) {}

      function MatSnackBarDismiss() {}

      if (false) {}
      /**
       * Maximum amount of milliseconds that can be passed into setTimeout.
       * @type {?}
       */


      var MAX_TIMEOUT = Math.pow(2, 31) - 1;
      /**
       * Reference to a snack bar dispatched from the snack bar service.
       * @template T
       */

      var _MatSnackBarRef = /*#__PURE__*/function () {
        /**
         * @param {?} containerInstance
         * @param {?} _overlayRef
         */
        function _MatSnackBarRef(containerInstance, _overlayRef) {
          var _this91 = this;

          _classCallCheck(this, _MatSnackBarRef);

          this._overlayRef = _overlayRef;
          /**
           * Subject for notifying the user that the snack bar has been dismissed.
           */

          this._afterDismissed = new rxjs__WEBPACK_IMPORTED_MODULE_1__.Subject();
          /**
           * Subject for notifying the user that the snack bar has opened and appeared.
           */

          this._afterOpened = new rxjs__WEBPACK_IMPORTED_MODULE_1__.Subject();
          /**
           * Subject for notifying the user that the snack bar action was called.
           */

          this._onAction = new rxjs__WEBPACK_IMPORTED_MODULE_1__.Subject();
          /**
           * Whether the snack bar was dismissed using the action button.
           */

          this._dismissedByAction = false;
          this.containerInstance = containerInstance; // Dismiss snackbar on action.

          this.onAction().subscribe(
          /**
          * @return {?}
          */
          function () {
            return _this91.dismiss();
          });

          containerInstance._onExit.subscribe(
          /**
          * @return {?}
          */
          function () {
            return _this91._finishDismiss();
          });
        }
        /**
         * Dismisses the snack bar.
         * @return {?}
         */


        _createClass(_MatSnackBarRef, [{
          key: "dismiss",
          value: function dismiss() {
            if (!this._afterDismissed.closed) {
              this.containerInstance.exit();
            }

            clearTimeout(this._durationTimeoutId);
          }
          /**
           * Marks the snackbar action clicked.
           * @return {?}
           */

        }, {
          key: "dismissWithAction",
          value: function dismissWithAction() {
            if (!this._onAction.closed) {
              this._dismissedByAction = true;

              this._onAction.next();

              this._onAction.complete();
            }
          }
          /**
           * Marks the snackbar action clicked.
           * @deprecated Use `dismissWithAction` instead.
           * \@breaking-change 8.0.0
           * @return {?}
           */

        }, {
          key: "closeWithAction",
          value: function closeWithAction() {
            this.dismissWithAction();
          }
          /**
           * Dismisses the snack bar after some duration
           * @param {?} duration
           * @return {?}
           */

        }, {
          key: "_dismissAfter",
          value: function _dismissAfter(duration) {
            var _this92 = this;

            // Note that we need to cap the duration to the maximum value for setTimeout, because
            // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.
            this._durationTimeoutId = setTimeout(
            /**
            * @return {?}
            */
            function () {
              return _this92.dismiss();
            }, Math.min(duration, MAX_TIMEOUT));
          }
          /**
           * Marks the snackbar as opened
           * @return {?}
           */

        }, {
          key: "_open",
          value: function _open() {
            if (!this._afterOpened.closed) {
              this._afterOpened.next();

              this._afterOpened.complete();
            }
          }
          /**
           * Cleans up the DOM after closing.
           * @private
           * @return {?}
           */

        }, {
          key: "_finishDismiss",
          value: function _finishDismiss() {
            this._overlayRef.dispose();

            if (!this._onAction.closed) {
              this._onAction.complete();
            }

            this._afterDismissed.next({
              dismissedByAction: this._dismissedByAction
            });

            this._afterDismissed.complete();

            this._dismissedByAction = false;
          }
          /**
           * Gets an observable that is notified when the snack bar is finished closing.
           * @return {?}
           */

        }, {
          key: "afterDismissed",
          value: function afterDismissed() {
            return this._afterDismissed.asObservable();
          }
          /**
           * Gets an observable that is notified when the snack bar has opened and appeared.
           * @return {?}
           */

        }, {
          key: "afterOpened",
          value: function afterOpened() {
            return this.containerInstance._onEnter;
          }
          /**
           * Gets an observable that is notified when the snack bar action is called.
           * @return {?}
           */

        }, {
          key: "onAction",
          value: function onAction() {
            return this._onAction.asObservable();
          }
        }]);

        return _MatSnackBarRef;
      }();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/material/snack-bar/snack-bar-config.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Injection token that can be used to access the data that was passed in to a snack bar.
       * @type {?}
       */


      var _MAT_SNACK_BAR_DATA = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('MatSnackBarData');
      /**
       * Configuration used when opening a snack-bar.
       * @template D
       */


      var _MatSnackBarConfig = function _MatSnackBarConfig() {
        _classCallCheck(this, _MatSnackBarConfig);

        /**
         * The politeness level for the MatAriaLiveAnnouncer announcement.
         */
        this.politeness = 'assertive';
        /**
         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom
         * component or template, the announcement message will default to the specified message.
         */

        this.announcementMessage = '';
        /**
         * The length of time in milliseconds to wait before automatically dismissing the snack bar.
         */

        this.duration = 0;
        /**
         * Data being injected into the child component.
         */

        this.data = null;
        /**
         * The horizontal position to place the snack bar.
         */

        this.horizontalPosition = 'center';
        /**
         * The vertical position to place the snack bar.
         */

        this.verticalPosition = 'bottom';
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/material/snack-bar/simple-snack-bar.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * A component used to open as the default snack bar, matching material spec.
       * This should only be used internally by the snack bar service.
       */


      var _SimpleSnackBar = /*#__PURE__*/function () {
        /**
         * @param {?} snackBarRef
         * @param {?} data
         */
        function _SimpleSnackBar(snackBarRef, data) {
          _classCallCheck(this, _SimpleSnackBar);

          this.snackBarRef = snackBarRef;
          this.data = data;
        }
        /**
         * Performs the action on the snack bar.
         * @return {?}
         */


        _createClass(_SimpleSnackBar, [{
          key: "action",
          value: function action() {
            this.snackBarRef.dismissWithAction();
          }
          /**
           * If the action button should be shown.
           * @return {?}
           */

        }, {
          key: "hasAction",
          get: function get() {
            return !!this.data.action;
          }
        }]);

        return _SimpleSnackBar;
      }();

      _SimpleSnackBar.ɵfac = function SimpleSnackBar_Factory(t) {
        return new (t || _SimpleSnackBar)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_MatSnackBarRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_MAT_SNACK_BAR_DATA));
      };

      _SimpleSnackBar.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: _SimpleSnackBar,
        selectors: [["simple-snack-bar"]],
        hostAttrs: [1, "mat-simple-snackbar"],
        decls: 3,
        vars: 2,
        consts: [["class", "mat-simple-snackbar-action", 4, "ngIf"], [1, "mat-simple-snackbar-action"], ["mat-button", "", 3, "click"]],
        template: function SimpleSnackBar_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SimpleSnackBar_div_2_Template, 3, 1, "div", 0);
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx.data.message);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.hasAction);
          }
        },
        directives: [_angular_common__WEBPACK_IMPORTED_MODULE_2__.NgIf, _angular_material_button__WEBPACK_IMPORTED_MODULE_3__.MatButton],
        styles: [".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\n"],
        encapsulation: 2,
        changeDetection: 0
      });
      /** @nocollapse */

      _SimpleSnackBar.ctorParameters = function () {
        return [{
          type: _MatSnackBarRef
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
            args: [_MAT_SNACK_BAR_DATA]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_SimpleSnackBar, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
          args: [{
            selector: 'simple-snack-bar',
            template: "<span>{{data.message}}</span>\n<div class=\"mat-simple-snackbar-action\"  *ngIf=\"hasAction\">\n  <button mat-button (click)=\"action()\">{{data.action}}</button>\n</div>\n",
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewEncapsulation.None,
            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.OnPush,
            host: {
              'class': 'mat-simple-snackbar'
            },
            styles: [".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\n"]
          }]
        }], function () {
          return [{
            type: _MatSnackBarRef
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
              args: [_MAT_SNACK_BAR_DATA]
            }]
          }];
        }, null);
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/material/snack-bar/snack-bar-animations.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Animations used by the Material snack bar.
       * \@docs-private
       * @type {?}
       */


      var _matSnackBarAnimations = {
        /**
         * Animation that shows and hides a snack bar.
         */
        snackBarState: (0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.trigger)('state', [(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.state)('void, hidden', (0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.style)({
          transform: 'scale(0.8)',
          opacity: 0
        })), (0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.state)('visible', (0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.style)({
          transform: 'scale(1)',
          opacity: 1
        })), (0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.transition)('* => visible', (0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.animate)('150ms cubic-bezier(0, 0, 0.2, 1)')), (0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.transition)('* => void, * => hidden', (0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.animate)('75ms cubic-bezier(0.4, 0.0, 1, 1)', (0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.style)({
          opacity: 0
        })))])
      };
      /**
       * @fileoverview added by tsickle
       * Generated from: src/material/snack-bar/snack-bar-container.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Internal component that wraps user-provided snack bar content.
       * \@docs-private
       */

      var _MatSnackBarContainer = /*#__PURE__*/function (_angular_cdk_portal__) {
        _inherits(_MatSnackBarContainer, _angular_cdk_portal__);

        var _super28 = _createSuper(_MatSnackBarContainer);

        /**
         * @param {?} _ngZone
         * @param {?} _elementRef
         * @param {?} _changeDetectorRef
         * @param {?} snackBarConfig
         */
        function _MatSnackBarContainer(_ngZone, _elementRef, _changeDetectorRef, snackBarConfig) {
          var _this93;

          _classCallCheck(this, _MatSnackBarContainer);

          _this93 = _super28.call(this);
          _this93._ngZone = _ngZone;
          _this93._elementRef = _elementRef;
          _this93._changeDetectorRef = _changeDetectorRef;
          _this93.snackBarConfig = snackBarConfig;
          /**
           * Whether the component has been destroyed.
           */

          _this93._destroyed = false;
          /**
           * Subject for notifying that the snack bar has exited from view.
           */

          _this93._onExit = new rxjs__WEBPACK_IMPORTED_MODULE_1__.Subject();
          /**
           * Subject for notifying that the snack bar has finished entering the view.
           */

          _this93._onEnter = new rxjs__WEBPACK_IMPORTED_MODULE_1__.Subject();
          /**
           * The state of the snack bar animations.
           */

          _this93._animationState = 'void';
          /**
           * Attaches a DOM portal to the snack bar container.
           * @deprecated To be turned into a method.
           * \@breaking-change 10.0.0
           */

          _this93.attachDomPortal =
          /**
          * @param {?} portal
          * @return {?}
          */
          function (portal) {
            _this93._assertNotAttached();

            _this93._applySnackBarClasses();

            return _this93._portalOutlet.attachDomPortal(portal);
          }; // Based on the ARIA spec, `alert` and `status` roles have an
          // implicit `assertive` and `polite` politeness respectively.


          if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {
            _this93._role = 'alert';
          } else if (snackBarConfig.politeness === 'off') {
            _this93._role = null;
          } else {
            _this93._role = 'status';
          }

          return _this93;
        }
        /**
         * Attach a component portal as content to this snack bar container.
         * @template T
         * @param {?} portal
         * @return {?}
         */


        _createClass(_MatSnackBarContainer, [{
          key: "attachComponentPortal",
          value: function attachComponentPortal(portal) {
            this._assertNotAttached();

            this._applySnackBarClasses();

            return this._portalOutlet.attachComponentPortal(portal);
          }
          /**
           * Attach a template portal as content to this snack bar container.
           * @template C
           * @param {?} portal
           * @return {?}
           */

        }, {
          key: "attachTemplatePortal",
          value: function attachTemplatePortal(portal) {
            this._assertNotAttached();

            this._applySnackBarClasses();

            return this._portalOutlet.attachTemplatePortal(portal);
          }
          /**
           * Handle end of animations, updating the state of the snackbar.
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "onAnimationEnd",
          value: function onAnimationEnd(event) {
            var fromState = event.fromState,
                toState = event.toState;

            if (toState === 'void' && fromState !== 'void' || toState === 'hidden') {
              this._completeExit();
            }

            if (toState === 'visible') {
              // Note: we shouldn't use `this` inside the zone callback,
              // because it can cause a memory leak.

              /** @type {?} */
              var onEnter = this._onEnter;

              this._ngZone.run(
              /**
              * @return {?}
              */
              function () {
                onEnter.next();
                onEnter.complete();
              });
            }
          }
          /**
           * Begin animation of snack bar entrance into view.
           * @return {?}
           */

        }, {
          key: "enter",
          value: function enter() {
            if (!this._destroyed) {
              this._animationState = 'visible';

              this._changeDetectorRef.detectChanges();
            }
          }
          /**
           * Begin animation of the snack bar exiting from view.
           * @return {?}
           */

        }, {
          key: "exit",
          value: function exit() {
            // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case
            // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to
            // `MatSnackBar.open`).
            this._animationState = 'hidden'; // Mark this element with an 'exit' attribute to indicate that the snackbar has
            // been dismissed and will soon be removed from the DOM. This is used by the snackbar
            // test harness.

            this._elementRef.nativeElement.setAttribute('mat-exit', '');

            return this._onExit;
          }
          /**
           * Makes sure the exit callbacks have been invoked when the element is destroyed.
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this._destroyed = true;

            this._completeExit();
          }
          /**
           * Waits for the zone to settle before removing the element. Helps prevent
           * errors where we end up removing an element which is in the middle of an animation.
           * @private
           * @return {?}
           */

        }, {
          key: "_completeExit",
          value: function _completeExit() {
            var _this94 = this;

            this._ngZone.onMicrotaskEmpty.asObservable().pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.take)(1)).subscribe(
            /**
            * @return {?}
            */
            function () {
              _this94._onExit.next();

              _this94._onExit.complete();
            });
          }
          /**
           * Applies the various positioning and user-configured CSS classes to the snack bar.
           * @private
           * @return {?}
           */

        }, {
          key: "_applySnackBarClasses",
          value: function _applySnackBarClasses() {
            /** @type {?} */
            var element = this._elementRef.nativeElement;
            /** @type {?} */

            var panelClasses = this.snackBarConfig.panelClass;

            if (panelClasses) {
              if (Array.isArray(panelClasses)) {
                // Note that we can't use a spread here, because IE doesn't support multiple arguments.
                panelClasses.forEach(
                /**
                * @param {?} cssClass
                * @return {?}
                */
                function (cssClass) {
                  return element.classList.add(cssClass);
                });
              } else {
                element.classList.add(panelClasses);
              }
            }

            if (this.snackBarConfig.horizontalPosition === 'center') {
              element.classList.add('mat-snack-bar-center');
            }

            if (this.snackBarConfig.verticalPosition === 'top') {
              element.classList.add('mat-snack-bar-top');
            }
          }
          /**
           * Asserts that no content is already attached to the container.
           * @private
           * @return {?}
           */

        }, {
          key: "_assertNotAttached",
          value: function _assertNotAttached() {
            if (this._portalOutlet.hasAttached()) {
              throw Error('Attempting to attach snack bar content after content is already attached');
            }
          }
        }]);

        return _MatSnackBarContainer;
      }(_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_5__.BasePortalOutlet);

      _MatSnackBarContainer.ɵfac = function MatSnackBarContainer_Factory(t) {
        return new (t || _MatSnackBarContainer)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_MatSnackBarConfig));
      };

      _MatSnackBarContainer.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: _MatSnackBarContainer,
        selectors: [["snack-bar-container"]],
        viewQuery: function MatSnackBarContainer_Query(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_5__.CdkPortalOutlet, 7);
          }

          if (rf & 2) {
            var _t;

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx._portalOutlet = _t.first);
          }
        },
        hostAttrs: [1, "mat-snack-bar-container"],
        hostVars: 2,
        hostBindings: function MatSnackBarContainer_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsyntheticHostListener"]("@state.done", function MatSnackBarContainer_animation_state_done_HostBindingHandler($event) {
              return ctx.onAnimationEnd($event);
            });
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("role", ctx._role);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsyntheticHostProperty"]("@state", ctx._animationState);
          }
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]],
        decls: 1,
        vars: 0,
        consts: [["cdkPortalOutlet", ""]],
        template: function MatSnackBarContainer_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, MatSnackBarContainer_ng_template_0_Template, 0, 0, "ng-template", 0);
          }
        },
        directives: [_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_5__.CdkPortalOutlet],
        styles: [".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\n"],
        encapsulation: 2,
        data: {
          animation: [_matSnackBarAnimations.snackBarState]
        }
      });
      /** @nocollapse */

      _MatSnackBarContainer.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
        }, {
          type: _MatSnackBarConfig
        }];
      };

      _MatSnackBarContainer.propDecorators = {
        _portalOutlet: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
          args: [_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_5__.CdkPortalOutlet, {
            "static": true
          }]
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_MatSnackBarContainer, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
          args: [{
            selector: 'snack-bar-container',
            template: "<ng-template cdkPortalOutlet></ng-template>\n",
            // In Ivy embedded views will be change detected from their declaration place, rather than
            // where they were stamped out. This means that we can't have the snack bar container be OnPush,
            // because it might cause snack bars that were opened from a template not to be out of date.
            // tslint:disable-next-line:validate-decorators
            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.Default,
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewEncapsulation.None,
            animations: [_matSnackBarAnimations.snackBarState],
            host: {
              '[attr.role]': '_role',
              'class': 'mat-snack-bar-container',
              '[@state]': '_animationState',
              '(@state.done)': 'onAnimationEnd($event)'
            },
            styles: [".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\n"]
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
          }, {
            type: _MatSnackBarConfig
          }];
        }, {
          _portalOutlet: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
            args: [_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_5__.CdkPortalOutlet, {
              "static": true
            }]
          }]
        });
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/material/snack-bar/snack-bar-module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var _MatSnackBarModule = function _MatSnackBarModule() {
        _classCallCheck(this, _MatSnackBarModule);
      };

      _MatSnackBarModule.ɵfac = function MatSnackBarModule_Factory(t) {
        return new (t || _MatSnackBarModule)();
      };

      _MatSnackBarModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: _MatSnackBarModule
      });
      _MatSnackBarModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        imports: [[_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_7__.OverlayModule, _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_5__.PortalModule, _angular_common__WEBPACK_IMPORTED_MODULE_2__.CommonModule, _angular_material_button__WEBPACK_IMPORTED_MODULE_3__.MatButtonModule, _angular_material_core__WEBPACK_IMPORTED_MODULE_8__.MatCommonModule], _angular_material_core__WEBPACK_IMPORTED_MODULE_8__.MatCommonModule]
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_MatSnackBarModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
          args: [{
            imports: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_7__.OverlayModule, _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_5__.PortalModule, _angular_common__WEBPACK_IMPORTED_MODULE_2__.CommonModule, _angular_material_button__WEBPACK_IMPORTED_MODULE_3__.MatButtonModule, _angular_material_core__WEBPACK_IMPORTED_MODULE_8__.MatCommonModule],
            exports: [_MatSnackBarContainer, _angular_material_core__WEBPACK_IMPORTED_MODULE_8__.MatCommonModule],
            declarations: [_MatSnackBarContainer, _SimpleSnackBar],
            entryComponents: [_MatSnackBarContainer, _SimpleSnackBar]
          }]
        }], null, null);
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](_MatSnackBarModule, {
          declarations: function declarations() {
            return [_MatSnackBarContainer, _SimpleSnackBar];
          },
          imports: function imports() {
            return [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_7__.OverlayModule, _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_5__.PortalModule, _angular_common__WEBPACK_IMPORTED_MODULE_2__.CommonModule, _angular_material_button__WEBPACK_IMPORTED_MODULE_3__.MatButtonModule, _angular_material_core__WEBPACK_IMPORTED_MODULE_8__.MatCommonModule];
          },
          exports: function exports() {
            return [_MatSnackBarContainer, _angular_material_core__WEBPACK_IMPORTED_MODULE_8__.MatCommonModule];
          }
        });
      })();
      /**
       * @fileoverview added by tsickle
       * Generated from: src/material/snack-bar/snack-bar.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Injection token that can be used to specify default snack bar.
       * @type {?}
       */


      var _MAT_SNACK_BAR_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('mat-snack-bar-default-options', {
        providedIn: 'root',
        factory: _MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY
      });
      /**
       * \@docs-private
       * @return {?}
       */


      function _MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {
        return new _MatSnackBarConfig();
      }
      /**
       * Service to dispatch Material Design snack bar messages.
       */


      var _MatSnackBar = /*#__PURE__*/function () {
        /**
         * @param {?} _overlay
         * @param {?} _live
         * @param {?} _injector
         * @param {?} _breakpointObserver
         * @param {?} _parentSnackBar
         * @param {?} _defaultConfig
         */
        function _MatSnackBar(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {
          _classCallCheck(this, _MatSnackBar);

          this._overlay = _overlay;
          this._live = _live;
          this._injector = _injector;
          this._breakpointObserver = _breakpointObserver;
          this._parentSnackBar = _parentSnackBar;
          this._defaultConfig = _defaultConfig;
          /**
           * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).
           * If there is a parent snack-bar service, all operations should delegate to that parent
           * via `_openedSnackBarRef`.
           */

          this._snackBarRefAtThisLevel = null;
        }
        /**
         * Reference to the currently opened snackbar at *any* level.
         * @return {?}
         */


        _createClass(_MatSnackBar, [{
          key: "_openedSnackBarRef",
          get: function get() {
            /** @type {?} */
            var parent = this._parentSnackBar;
            return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            if (this._parentSnackBar) {
              this._parentSnackBar._openedSnackBarRef = value;
            } else {
              this._snackBarRefAtThisLevel = value;
            }
          }
          /**
           * Creates and dispatches a snack bar with a custom component for the content, removing any
           * currently opened snack bars.
           *
           * @template T
           * @param {?} component Component to be instantiated.
           * @param {?=} config Extra configuration for the snack bar.
           * @return {?}
           */

        }, {
          key: "openFromComponent",
          value: function openFromComponent(component, config) {
            return (
              /** @type {?} */
              this._attach(component, config)
            );
          }
          /**
           * Creates and dispatches a snack bar with a custom template for the content, removing any
           * currently opened snack bars.
           *
           * @param {?} template Template to be instantiated.
           * @param {?=} config Extra configuration for the snack bar.
           * @return {?}
           */

        }, {
          key: "openFromTemplate",
          value: function openFromTemplate(template, config) {
            return this._attach(template, config);
          }
          /**
           * Opens a snackbar with a message and an optional action.
           * @param {?} message The message to show in the snackbar.
           * @param {?=} action The label for the snackbar action.
           * @param {?=} config Additional configuration options for the snackbar.
           * @return {?}
           */

        }, {
          key: "open",
          value: function open(message) {
            var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
            var config = arguments.length > 2 ? arguments[2] : undefined;

            /** @type {?} */
            var _config = Object.assign(Object.assign({}, this._defaultConfig), config); // Since the user doesn't have access to the component, we can
            // override the data to pass in our own message and action.


            _config.data = {
              message: message,
              action: action
            };

            if (!_config.announcementMessage) {
              _config.announcementMessage = message;
            }

            return this.openFromComponent(_SimpleSnackBar, _config);
          }
          /**
           * Dismisses the currently-visible snack bar.
           * @return {?}
           */

        }, {
          key: "dismiss",
          value: function dismiss() {
            if (this._openedSnackBarRef) {
              this._openedSnackBarRef.dismiss();
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            // Only dismiss the snack bar at the current level on destroy.
            if (this._snackBarRefAtThisLevel) {
              this._snackBarRefAtThisLevel.dismiss();
            }
          }
          /**
           * Attaches the snack bar container component to the overlay.
           * @private
           * @param {?} overlayRef
           * @param {?} config
           * @return {?}
           */

        }, {
          key: "_attachSnackBarContainer",
          value: function _attachSnackBarContainer(overlayRef, config) {
            /** @type {?} */
            var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;
            /** @type {?} */

            var injector = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_5__.PortalInjector(userInjector || this._injector, new WeakMap([[_MatSnackBarConfig, config]]));
            /** @type {?} */

            var containerPortal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_5__.ComponentPortal(_MatSnackBarContainer, config.viewContainerRef, injector);
            /** @type {?} */

            var containerRef = overlayRef.attach(containerPortal);
            containerRef.instance.snackBarConfig = config;
            return containerRef.instance;
          }
          /**
           * Places a new component or a template as the content of the snack bar container.
           * @private
           * @template T
           * @param {?} content
           * @param {?=} userConfig
           * @return {?}
           */

        }, {
          key: "_attach",
          value: function _attach(content, userConfig) {
            /** @type {?} */
            var config = Object.assign(Object.assign(Object.assign({}, new _MatSnackBarConfig()), this._defaultConfig), userConfig);
            /** @type {?} */

            var overlayRef = this._createOverlay(config);
            /** @type {?} */


            var container = this._attachSnackBarContainer(overlayRef, config);
            /** @type {?} */


            var snackBarRef = new _MatSnackBarRef(container, overlayRef);

            if (content instanceof _angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef) {
              /** @type {?} */
              var portal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_5__.TemplatePortal(content,
              /** @type {?} */
              null,
              /** @type {?} */
              {
                $implicit: config.data,
                snackBarRef: snackBarRef
              });
              snackBarRef.instance = container.attachTemplatePortal(portal);
            } else {
              /** @type {?} */
              var injector = this._createInjector(config, snackBarRef);
              /** @type {?} */


              var _portal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_5__.ComponentPortal(content, undefined, injector);
              /** @type {?} */


              var contentRef = container.attachComponentPortal(_portal); // We can't pass this via the injector, because the injector is created earlier.

              snackBarRef.instance = contentRef.instance;
            } // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as
            // appropriate. This class is applied to the overlay element because the overlay must expand to
            // fill the width of the screen for full width snackbars.


            this._breakpointObserver.observe(_angular_cdk_layout__WEBPACK_IMPORTED_MODULE_9__.Breakpoints.HandsetPortrait).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_10__.takeUntil)(overlayRef.detachments())).subscribe(
            /**
            * @param {?} state
            * @return {?}
            */
            function (state) {
              /** @type {?} */
              var classList = overlayRef.overlayElement.classList;
              /** @type {?} */

              var className = 'mat-snack-bar-handset';
              state.matches ? classList.add(className) : classList.remove(className);
            });

            this._animateSnackBar(snackBarRef, config);

            this._openedSnackBarRef = snackBarRef;
            return this._openedSnackBarRef;
          }
          /**
           * Animates the old snack bar out and the new one in.
           * @private
           * @param {?} snackBarRef
           * @param {?} config
           * @return {?}
           */

        }, {
          key: "_animateSnackBar",
          value: function _animateSnackBar(snackBarRef, config) {
            var _this95 = this;

            // When the snackbar is dismissed, clear the reference to it.
            snackBarRef.afterDismissed().subscribe(
            /**
            * @return {?}
            */
            function () {
              // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.
              if (_this95._openedSnackBarRef == snackBarRef) {
                _this95._openedSnackBarRef = null;
              }

              if (config.announcementMessage) {
                _this95._live.clear();
              }
            });

            if (this._openedSnackBarRef) {
              // If a snack bar is already in view, dismiss it and enter the
              // new snack bar after exit animation is complete.
              this._openedSnackBarRef.afterDismissed().subscribe(
              /**
              * @return {?}
              */
              function () {
                snackBarRef.containerInstance.enter();
              });

              this._openedSnackBarRef.dismiss();
            } else {
              // If no snack bar is in view, enter the new snack bar.
              snackBarRef.containerInstance.enter();
            } // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.


            if (config.duration && config.duration > 0) {
              snackBarRef.afterOpened().subscribe(
              /**
              * @return {?}
              */
              function () {
                return snackBarRef._dismissAfter(
                /** @type {?} */
                config.duration);
              });
            }

            if (config.announcementMessage) {
              this._live.announce(config.announcementMessage, config.politeness);
            }
          }
          /**
           * Creates a new overlay and places it in the correct location.
           * @private
           * @param {?} config The user-specified snack bar config.
           * @return {?}
           */

        }, {
          key: "_createOverlay",
          value: function _createOverlay(config) {
            /** @type {?} */
            var overlayConfig = new _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_7__.OverlayConfig();
            overlayConfig.direction = config.direction;
            /** @type {?} */

            var positionStrategy = this._overlay.position().global(); // Set horizontal position.

            /** @type {?} */


            var isRtl = config.direction === 'rtl';
            /** @type {?} */

            var isLeft = config.horizontalPosition === 'left' || config.horizontalPosition === 'start' && !isRtl || config.horizontalPosition === 'end' && isRtl;
            /** @type {?} */

            var isRight = !isLeft && config.horizontalPosition !== 'center';

            if (isLeft) {
              positionStrategy.left('0');
            } else if (isRight) {
              positionStrategy.right('0');
            } else {
              positionStrategy.centerHorizontally();
            } // Set horizontal position.


            if (config.verticalPosition === 'top') {
              positionStrategy.top('0');
            } else {
              positionStrategy.bottom('0');
            }

            overlayConfig.positionStrategy = positionStrategy;
            return this._overlay.create(overlayConfig);
          }
          /**
           * Creates an injector to be used inside of a snack bar component.
           * @private
           * @template T
           * @param {?} config Config that was used to create the snack bar.
           * @param {?} snackBarRef Reference to the snack bar.
           * @return {?}
           */

        }, {
          key: "_createInjector",
          value: function _createInjector(config, snackBarRef) {
            /** @type {?} */
            var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;
            return new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_5__.PortalInjector(userInjector || this._injector, new WeakMap([[_MatSnackBarRef, snackBarRef], [_MAT_SNACK_BAR_DATA, config.data]]));
          }
        }]);

        return _MatSnackBar;
      }();

      _MatSnackBar.ɵfac = function MatSnackBar_Factory(t) {
        return new (t || _MatSnackBar)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_7__.Overlay), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_11__.LiveAnnouncer), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.Injector), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_cdk_layout__WEBPACK_IMPORTED_MODULE_9__.BreakpointObserver), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_MatSnackBar, 12), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_MAT_SNACK_BAR_DEFAULT_OPTIONS));
      };
      /** @nocollapse */


      _MatSnackBar.ctorParameters = function () {
        return [{
          type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_7__.Overlay
        }, {
          type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_11__.LiveAnnouncer
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injector
        }, {
          type: _angular_cdk_layout__WEBPACK_IMPORTED_MODULE_9__.BreakpointObserver
        }, {
          type: _MatSnackBar,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.SkipSelf
          }]
        }, {
          type: _MatSnackBarConfig,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
            args: [_MAT_SNACK_BAR_DEFAULT_OPTIONS]
          }]
        }];
      };
      /** @nocollapse */


      _MatSnackBar.ɵprov = (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
        factory: function MatSnackBar_Factory() {
          return new _MatSnackBar((0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_7__.Overlay), (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_11__.LiveAnnouncer), (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_0__.INJECTOR), (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_cdk_layout__WEBPACK_IMPORTED_MODULE_9__.BreakpointObserver), (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_MatSnackBar, 12), (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_MAT_SNACK_BAR_DEFAULT_OPTIONS));
        },
        token: _MatSnackBar,
        providedIn: _MatSnackBarModule
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_MatSnackBar, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
          args: [{
            providedIn: _MatSnackBarModule
          }]
        }], function () {
          return [{
            type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_7__.Overlay
          }, {
            type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_11__.LiveAnnouncer
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injector
          }, {
            type: _angular_cdk_layout__WEBPACK_IMPORTED_MODULE_9__.BreakpointObserver
          }, {
            type: _MatSnackBar,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.SkipSelf
            }]
          }, {
            type: _MatSnackBarConfig,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
              args: [_MAT_SNACK_BAR_DEFAULT_OPTIONS]
            }]
          }];
        }, null);
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: src/material/snack-bar/public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Generated bundle index. Do not edit.
       */

      /***/

    },

    /***/
    94848:
    /*!*************************************************************************************!*\
      !*** ./node_modules/angular-feather/__ivy_ngcc__/fesm2015/angular-feather-icons.js ***!
      \*************************************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "Activity": function Activity() {
          return (
            /* binding */
            _Activity
          );
        },

        /* harmony export */
        "Airplay": function Airplay() {
          return (
            /* binding */
            _Airplay
          );
        },

        /* harmony export */
        "AlertCircle": function AlertCircle() {
          return (
            /* binding */
            _AlertCircle
          );
        },

        /* harmony export */
        "AlertOctagon": function AlertOctagon() {
          return (
            /* binding */
            _AlertOctagon
          );
        },

        /* harmony export */
        "AlertTriangle": function AlertTriangle() {
          return (
            /* binding */
            _AlertTriangle
          );
        },

        /* harmony export */
        "AlignCenter": function AlignCenter() {
          return (
            /* binding */
            _AlignCenter
          );
        },

        /* harmony export */
        "AlignJustify": function AlignJustify() {
          return (
            /* binding */
            _AlignJustify
          );
        },

        /* harmony export */
        "AlignLeft": function AlignLeft() {
          return (
            /* binding */
            _AlignLeft
          );
        },

        /* harmony export */
        "AlignRight": function AlignRight() {
          return (
            /* binding */
            _AlignRight
          );
        },

        /* harmony export */
        "Anchor": function Anchor() {
          return (
            /* binding */
            _Anchor
          );
        },

        /* harmony export */
        "Aperture": function Aperture() {
          return (
            /* binding */
            _Aperture
          );
        },

        /* harmony export */
        "Archive": function Archive() {
          return (
            /* binding */
            _Archive
          );
        },

        /* harmony export */
        "ArrowDown": function ArrowDown() {
          return (
            /* binding */
            _ArrowDown
          );
        },

        /* harmony export */
        "ArrowDownCircle": function ArrowDownCircle() {
          return (
            /* binding */
            _ArrowDownCircle
          );
        },

        /* harmony export */
        "ArrowDownLeft": function ArrowDownLeft() {
          return (
            /* binding */
            _ArrowDownLeft
          );
        },

        /* harmony export */
        "ArrowDownRight": function ArrowDownRight() {
          return (
            /* binding */
            _ArrowDownRight
          );
        },

        /* harmony export */
        "ArrowLeft": function ArrowLeft() {
          return (
            /* binding */
            _ArrowLeft
          );
        },

        /* harmony export */
        "ArrowLeftCircle": function ArrowLeftCircle() {
          return (
            /* binding */
            _ArrowLeftCircle
          );
        },

        /* harmony export */
        "ArrowRight": function ArrowRight() {
          return (
            /* binding */
            _ArrowRight
          );
        },

        /* harmony export */
        "ArrowRightCircle": function ArrowRightCircle() {
          return (
            /* binding */
            _ArrowRightCircle
          );
        },

        /* harmony export */
        "ArrowUp": function ArrowUp() {
          return (
            /* binding */
            _ArrowUp
          );
        },

        /* harmony export */
        "ArrowUpCircle": function ArrowUpCircle() {
          return (
            /* binding */
            _ArrowUpCircle
          );
        },

        /* harmony export */
        "ArrowUpLeft": function ArrowUpLeft() {
          return (
            /* binding */
            _ArrowUpLeft
          );
        },

        /* harmony export */
        "ArrowUpRight": function ArrowUpRight() {
          return (
            /* binding */
            _ArrowUpRight
          );
        },

        /* harmony export */
        "AtSign": function AtSign() {
          return (
            /* binding */
            _AtSign
          );
        },

        /* harmony export */
        "Award": function Award() {
          return (
            /* binding */
            _Award
          );
        },

        /* harmony export */
        "BarChart": function BarChart() {
          return (
            /* binding */
            _BarChart
          );
        },

        /* harmony export */
        "BarChart2": function BarChart2() {
          return (
            /* binding */
            _BarChart2
          );
        },

        /* harmony export */
        "Battery": function Battery() {
          return (
            /* binding */
            _Battery
          );
        },

        /* harmony export */
        "BatteryCharging": function BatteryCharging() {
          return (
            /* binding */
            _BatteryCharging
          );
        },

        /* harmony export */
        "Bell": function Bell() {
          return (
            /* binding */
            _Bell
          );
        },

        /* harmony export */
        "BellOff": function BellOff() {
          return (
            /* binding */
            _BellOff
          );
        },

        /* harmony export */
        "Bluetooth": function Bluetooth() {
          return (
            /* binding */
            _Bluetooth
          );
        },

        /* harmony export */
        "Bold": function Bold() {
          return (
            /* binding */
            _Bold
          );
        },

        /* harmony export */
        "Book": function Book() {
          return (
            /* binding */
            _Book
          );
        },

        /* harmony export */
        "BookOpen": function BookOpen() {
          return (
            /* binding */
            _BookOpen
          );
        },

        /* harmony export */
        "Bookmark": function Bookmark() {
          return (
            /* binding */
            _Bookmark
          );
        },

        /* harmony export */
        "Box": function Box() {
          return (
            /* binding */
            _Box
          );
        },

        /* harmony export */
        "Briefcase": function Briefcase() {
          return (
            /* binding */
            _Briefcase
          );
        },

        /* harmony export */
        "Calendar": function Calendar() {
          return (
            /* binding */
            _Calendar
          );
        },

        /* harmony export */
        "Camera": function Camera() {
          return (
            /* binding */
            _Camera
          );
        },

        /* harmony export */
        "CameraOff": function CameraOff() {
          return (
            /* binding */
            _CameraOff
          );
        },

        /* harmony export */
        "Cast": function Cast() {
          return (
            /* binding */
            _Cast
          );
        },

        /* harmony export */
        "Check": function Check() {
          return (
            /* binding */
            _Check
          );
        },

        /* harmony export */
        "CheckCircle": function CheckCircle() {
          return (
            /* binding */
            _CheckCircle
          );
        },

        /* harmony export */
        "CheckSquare": function CheckSquare() {
          return (
            /* binding */
            _CheckSquare
          );
        },

        /* harmony export */
        "ChevronDown": function ChevronDown() {
          return (
            /* binding */
            _ChevronDown
          );
        },

        /* harmony export */
        "ChevronLeft": function ChevronLeft() {
          return (
            /* binding */
            _ChevronLeft
          );
        },

        /* harmony export */
        "ChevronRight": function ChevronRight() {
          return (
            /* binding */
            _ChevronRight
          );
        },

        /* harmony export */
        "ChevronUp": function ChevronUp() {
          return (
            /* binding */
            _ChevronUp
          );
        },

        /* harmony export */
        "ChevronsDown": function ChevronsDown() {
          return (
            /* binding */
            _ChevronsDown
          );
        },

        /* harmony export */
        "ChevronsLeft": function ChevronsLeft() {
          return (
            /* binding */
            _ChevronsLeft
          );
        },

        /* harmony export */
        "ChevronsRight": function ChevronsRight() {
          return (
            /* binding */
            _ChevronsRight
          );
        },

        /* harmony export */
        "ChevronsUp": function ChevronsUp() {
          return (
            /* binding */
            _ChevronsUp
          );
        },

        /* harmony export */
        "Chrome": function Chrome() {
          return (
            /* binding */
            _Chrome
          );
        },

        /* harmony export */
        "Circle": function Circle() {
          return (
            /* binding */
            _Circle
          );
        },

        /* harmony export */
        "Clipboard": function Clipboard() {
          return (
            /* binding */
            _Clipboard
          );
        },

        /* harmony export */
        "Clock": function Clock() {
          return (
            /* binding */
            _Clock
          );
        },

        /* harmony export */
        "Cloud": function Cloud() {
          return (
            /* binding */
            _Cloud
          );
        },

        /* harmony export */
        "CloudDrizzle": function CloudDrizzle() {
          return (
            /* binding */
            _CloudDrizzle
          );
        },

        /* harmony export */
        "CloudLightning": function CloudLightning() {
          return (
            /* binding */
            _CloudLightning
          );
        },

        /* harmony export */
        "CloudOff": function CloudOff() {
          return (
            /* binding */
            _CloudOff
          );
        },

        /* harmony export */
        "CloudRain": function CloudRain() {
          return (
            /* binding */
            _CloudRain
          );
        },

        /* harmony export */
        "CloudSnow": function CloudSnow() {
          return (
            /* binding */
            _CloudSnow
          );
        },

        /* harmony export */
        "Code": function Code() {
          return (
            /* binding */
            _Code
          );
        },

        /* harmony export */
        "Codepen": function Codepen() {
          return (
            /* binding */
            _Codepen
          );
        },

        /* harmony export */
        "Codesandbox": function Codesandbox() {
          return (
            /* binding */
            _Codesandbox
          );
        },

        /* harmony export */
        "Coffee": function Coffee() {
          return (
            /* binding */
            _Coffee
          );
        },

        /* harmony export */
        "Columns": function Columns() {
          return (
            /* binding */
            _Columns
          );
        },

        /* harmony export */
        "Command": function Command() {
          return (
            /* binding */
            _Command
          );
        },

        /* harmony export */
        "Compass": function Compass() {
          return (
            /* binding */
            _Compass
          );
        },

        /* harmony export */
        "Copy": function Copy() {
          return (
            /* binding */
            _Copy
          );
        },

        /* harmony export */
        "CornerDownLeft": function CornerDownLeft() {
          return (
            /* binding */
            _CornerDownLeft
          );
        },

        /* harmony export */
        "CornerDownRight": function CornerDownRight() {
          return (
            /* binding */
            _CornerDownRight
          );
        },

        /* harmony export */
        "CornerLeftDown": function CornerLeftDown() {
          return (
            /* binding */
            _CornerLeftDown
          );
        },

        /* harmony export */
        "CornerLeftUp": function CornerLeftUp() {
          return (
            /* binding */
            _CornerLeftUp
          );
        },

        /* harmony export */
        "CornerRightDown": function CornerRightDown() {
          return (
            /* binding */
            _CornerRightDown
          );
        },

        /* harmony export */
        "CornerRightUp": function CornerRightUp() {
          return (
            /* binding */
            _CornerRightUp
          );
        },

        /* harmony export */
        "CornerUpLeft": function CornerUpLeft() {
          return (
            /* binding */
            _CornerUpLeft
          );
        },

        /* harmony export */
        "CornerUpRight": function CornerUpRight() {
          return (
            /* binding */
            _CornerUpRight
          );
        },

        /* harmony export */
        "Cpu": function Cpu() {
          return (
            /* binding */
            _Cpu
          );
        },

        /* harmony export */
        "CreditCard": function CreditCard() {
          return (
            /* binding */
            _CreditCard
          );
        },

        /* harmony export */
        "Crop": function Crop() {
          return (
            /* binding */
            _Crop
          );
        },

        /* harmony export */
        "Crosshair": function Crosshair() {
          return (
            /* binding */
            _Crosshair
          );
        },

        /* harmony export */
        "Database": function Database() {
          return (
            /* binding */
            _Database
          );
        },

        /* harmony export */
        "Delete": function Delete() {
          return (
            /* binding */
            _Delete
          );
        },

        /* harmony export */
        "Disc": function Disc() {
          return (
            /* binding */
            _Disc
          );
        },

        /* harmony export */
        "DollarSign": function DollarSign() {
          return (
            /* binding */
            _DollarSign
          );
        },

        /* harmony export */
        "Download": function Download() {
          return (
            /* binding */
            _Download
          );
        },

        /* harmony export */
        "DownloadCloud": function DownloadCloud() {
          return (
            /* binding */
            _DownloadCloud
          );
        },

        /* harmony export */
        "Droplet": function Droplet() {
          return (
            /* binding */
            _Droplet
          );
        },

        /* harmony export */
        "Edit": function Edit() {
          return (
            /* binding */
            _Edit
          );
        },

        /* harmony export */
        "Edit2": function Edit2() {
          return (
            /* binding */
            _Edit2
          );
        },

        /* harmony export */
        "Edit3": function Edit3() {
          return (
            /* binding */
            _Edit3
          );
        },

        /* harmony export */
        "ExternalLink": function ExternalLink() {
          return (
            /* binding */
            _ExternalLink
          );
        },

        /* harmony export */
        "Eye": function Eye() {
          return (
            /* binding */
            _Eye
          );
        },

        /* harmony export */
        "EyeOff": function EyeOff() {
          return (
            /* binding */
            _EyeOff
          );
        },

        /* harmony export */
        "Facebook": function Facebook() {
          return (
            /* binding */
            _Facebook
          );
        },

        /* harmony export */
        "FastForward": function FastForward() {
          return (
            /* binding */
            _FastForward
          );
        },

        /* harmony export */
        "Feather": function Feather() {
          return (
            /* binding */
            _Feather
          );
        },

        /* harmony export */
        "Figma": function Figma() {
          return (
            /* binding */
            _Figma
          );
        },

        /* harmony export */
        "File": function File() {
          return (
            /* binding */
            _File
          );
        },

        /* harmony export */
        "FileMinus": function FileMinus() {
          return (
            /* binding */
            _FileMinus
          );
        },

        /* harmony export */
        "FilePlus": function FilePlus() {
          return (
            /* binding */
            _FilePlus
          );
        },

        /* harmony export */
        "FileText": function FileText() {
          return (
            /* binding */
            _FileText
          );
        },

        /* harmony export */
        "Film": function Film() {
          return (
            /* binding */
            _Film
          );
        },

        /* harmony export */
        "Filter": function Filter() {
          return (
            /* binding */
            _Filter
          );
        },

        /* harmony export */
        "Flag": function Flag() {
          return (
            /* binding */
            _Flag
          );
        },

        /* harmony export */
        "Folder": function Folder() {
          return (
            /* binding */
            _Folder
          );
        },

        /* harmony export */
        "FolderMinus": function FolderMinus() {
          return (
            /* binding */
            _FolderMinus
          );
        },

        /* harmony export */
        "FolderPlus": function FolderPlus() {
          return (
            /* binding */
            _FolderPlus
          );
        },

        /* harmony export */
        "Framer": function Framer() {
          return (
            /* binding */
            _Framer
          );
        },

        /* harmony export */
        "Frown": function Frown() {
          return (
            /* binding */
            _Frown
          );
        },

        /* harmony export */
        "Gift": function Gift() {
          return (
            /* binding */
            _Gift
          );
        },

        /* harmony export */
        "GitBranch": function GitBranch() {
          return (
            /* binding */
            _GitBranch
          );
        },

        /* harmony export */
        "GitCommit": function GitCommit() {
          return (
            /* binding */
            _GitCommit
          );
        },

        /* harmony export */
        "GitMerge": function GitMerge() {
          return (
            /* binding */
            _GitMerge
          );
        },

        /* harmony export */
        "GitPullRequest": function GitPullRequest() {
          return (
            /* binding */
            _GitPullRequest
          );
        },

        /* harmony export */
        "Github": function Github() {
          return (
            /* binding */
            _Github
          );
        },

        /* harmony export */
        "Gitlab": function Gitlab() {
          return (
            /* binding */
            _Gitlab
          );
        },

        /* harmony export */
        "Globe": function Globe() {
          return (
            /* binding */
            _Globe
          );
        },

        /* harmony export */
        "Grid": function Grid() {
          return (
            /* binding */
            _Grid
          );
        },

        /* harmony export */
        "HardDrive": function HardDrive() {
          return (
            /* binding */
            _HardDrive
          );
        },

        /* harmony export */
        "Hash": function Hash() {
          return (
            /* binding */
            _Hash
          );
        },

        /* harmony export */
        "Headphones": function Headphones() {
          return (
            /* binding */
            _Headphones
          );
        },

        /* harmony export */
        "Heart": function Heart() {
          return (
            /* binding */
            _Heart
          );
        },

        /* harmony export */
        "HelpCircle": function HelpCircle() {
          return (
            /* binding */
            _HelpCircle
          );
        },

        /* harmony export */
        "Hexagon": function Hexagon() {
          return (
            /* binding */
            _Hexagon
          );
        },

        /* harmony export */
        "Home": function Home() {
          return (
            /* binding */
            _Home
          );
        },

        /* harmony export */
        "Image": function Image() {
          return (
            /* binding */
            _Image
          );
        },

        /* harmony export */
        "Inbox": function Inbox() {
          return (
            /* binding */
            _Inbox
          );
        },

        /* harmony export */
        "Info": function Info() {
          return (
            /* binding */
            _Info
          );
        },

        /* harmony export */
        "Instagram": function Instagram() {
          return (
            /* binding */
            _Instagram
          );
        },

        /* harmony export */
        "Italic": function Italic() {
          return (
            /* binding */
            _Italic
          );
        },

        /* harmony export */
        "Key": function Key() {
          return (
            /* binding */
            _Key
          );
        },

        /* harmony export */
        "Layers": function Layers() {
          return (
            /* binding */
            _Layers
          );
        },

        /* harmony export */
        "Layout": function Layout() {
          return (
            /* binding */
            _Layout
          );
        },

        /* harmony export */
        "LifeBuoy": function LifeBuoy() {
          return (
            /* binding */
            _LifeBuoy
          );
        },

        /* harmony export */
        "Link": function Link() {
          return (
            /* binding */
            _Link
          );
        },

        /* harmony export */
        "Link2": function Link2() {
          return (
            /* binding */
            _Link2
          );
        },

        /* harmony export */
        "Linkedin": function Linkedin() {
          return (
            /* binding */
            _Linkedin
          );
        },

        /* harmony export */
        "List": function List() {
          return (
            /* binding */
            _List
          );
        },

        /* harmony export */
        "Loader": function Loader() {
          return (
            /* binding */
            _Loader
          );
        },

        /* harmony export */
        "Lock": function Lock() {
          return (
            /* binding */
            _Lock
          );
        },

        /* harmony export */
        "LogIn": function LogIn() {
          return (
            /* binding */
            _LogIn
          );
        },

        /* harmony export */
        "LogOut": function LogOut() {
          return (
            /* binding */
            _LogOut
          );
        },

        /* harmony export */
        "Mail": function Mail() {
          return (
            /* binding */
            _Mail
          );
        },

        /* harmony export */
        "Map": function (_Map) {
          function Map() {
            return _Map.apply(this, arguments);
          }

          Map.toString = function () {
            return _Map.toString();
          };

          return Map;
        }(function () {
          return (
            /* binding */
            Map
          );
        }),

        /* harmony export */
        "MapPin": function MapPin() {
          return (
            /* binding */
            _MapPin
          );
        },

        /* harmony export */
        "Maximize": function Maximize() {
          return (
            /* binding */
            _Maximize
          );
        },

        /* harmony export */
        "Maximize2": function Maximize2() {
          return (
            /* binding */
            _Maximize2
          );
        },

        /* harmony export */
        "Meh": function Meh() {
          return (
            /* binding */
            _Meh
          );
        },

        /* harmony export */
        "Menu": function Menu() {
          return (
            /* binding */
            _Menu
          );
        },

        /* harmony export */
        "MessageCircle": function MessageCircle() {
          return (
            /* binding */
            _MessageCircle
          );
        },

        /* harmony export */
        "MessageSquare": function MessageSquare() {
          return (
            /* binding */
            _MessageSquare
          );
        },

        /* harmony export */
        "Mic": function Mic() {
          return (
            /* binding */
            _Mic
          );
        },

        /* harmony export */
        "MicOff": function MicOff() {
          return (
            /* binding */
            _MicOff
          );
        },

        /* harmony export */
        "Minimize": function Minimize() {
          return (
            /* binding */
            _Minimize
          );
        },

        /* harmony export */
        "Minimize2": function Minimize2() {
          return (
            /* binding */
            _Minimize2
          );
        },

        /* harmony export */
        "Minus": function Minus() {
          return (
            /* binding */
            _Minus
          );
        },

        /* harmony export */
        "MinusCircle": function MinusCircle() {
          return (
            /* binding */
            _MinusCircle
          );
        },

        /* harmony export */
        "MinusSquare": function MinusSquare() {
          return (
            /* binding */
            _MinusSquare
          );
        },

        /* harmony export */
        "Monitor": function Monitor() {
          return (
            /* binding */
            _Monitor
          );
        },

        /* harmony export */
        "Moon": function Moon() {
          return (
            /* binding */
            _Moon
          );
        },

        /* harmony export */
        "MoreHorizontal": function MoreHorizontal() {
          return (
            /* binding */
            _MoreHorizontal
          );
        },

        /* harmony export */
        "MoreVertical": function MoreVertical() {
          return (
            /* binding */
            _MoreVertical
          );
        },

        /* harmony export */
        "MousePointer": function MousePointer() {
          return (
            /* binding */
            _MousePointer
          );
        },

        /* harmony export */
        "Move": function Move() {
          return (
            /* binding */
            _Move
          );
        },

        /* harmony export */
        "Music": function Music() {
          return (
            /* binding */
            _Music
          );
        },

        /* harmony export */
        "Navigation": function Navigation() {
          return (
            /* binding */
            _Navigation
          );
        },

        /* harmony export */
        "Navigation2": function Navigation2() {
          return (
            /* binding */
            _Navigation2
          );
        },

        /* harmony export */
        "Octagon": function Octagon() {
          return (
            /* binding */
            _Octagon
          );
        },

        /* harmony export */
        "Package": function Package() {
          return (
            /* binding */
            _Package
          );
        },

        /* harmony export */
        "Paperclip": function Paperclip() {
          return (
            /* binding */
            _Paperclip
          );
        },

        /* harmony export */
        "Pause": function Pause() {
          return (
            /* binding */
            _Pause
          );
        },

        /* harmony export */
        "PauseCircle": function PauseCircle() {
          return (
            /* binding */
            _PauseCircle
          );
        },

        /* harmony export */
        "PenTool": function PenTool() {
          return (
            /* binding */
            _PenTool
          );
        },

        /* harmony export */
        "Percent": function Percent() {
          return (
            /* binding */
            _Percent
          );
        },

        /* harmony export */
        "Phone": function Phone() {
          return (
            /* binding */
            _Phone
          );
        },

        /* harmony export */
        "PhoneCall": function PhoneCall() {
          return (
            /* binding */
            _PhoneCall
          );
        },

        /* harmony export */
        "PhoneForwarded": function PhoneForwarded() {
          return (
            /* binding */
            _PhoneForwarded
          );
        },

        /* harmony export */
        "PhoneIncoming": function PhoneIncoming() {
          return (
            /* binding */
            _PhoneIncoming
          );
        },

        /* harmony export */
        "PhoneMissed": function PhoneMissed() {
          return (
            /* binding */
            _PhoneMissed
          );
        },

        /* harmony export */
        "PhoneOff": function PhoneOff() {
          return (
            /* binding */
            _PhoneOff
          );
        },

        /* harmony export */
        "PhoneOutgoing": function PhoneOutgoing() {
          return (
            /* binding */
            _PhoneOutgoing
          );
        },

        /* harmony export */
        "PieChart": function PieChart() {
          return (
            /* binding */
            _PieChart
          );
        },

        /* harmony export */
        "Play": function Play() {
          return (
            /* binding */
            _Play
          );
        },

        /* harmony export */
        "PlayCircle": function PlayCircle() {
          return (
            /* binding */
            _PlayCircle
          );
        },

        /* harmony export */
        "Plus": function Plus() {
          return (
            /* binding */
            _Plus
          );
        },

        /* harmony export */
        "PlusCircle": function PlusCircle() {
          return (
            /* binding */
            _PlusCircle
          );
        },

        /* harmony export */
        "PlusSquare": function PlusSquare() {
          return (
            /* binding */
            _PlusSquare
          );
        },

        /* harmony export */
        "Pocket": function Pocket() {
          return (
            /* binding */
            _Pocket
          );
        },

        /* harmony export */
        "Power": function Power() {
          return (
            /* binding */
            _Power
          );
        },

        /* harmony export */
        "Printer": function Printer() {
          return (
            /* binding */
            _Printer
          );
        },

        /* harmony export */
        "Radio": function Radio() {
          return (
            /* binding */
            _Radio
          );
        },

        /* harmony export */
        "RefreshCcw": function RefreshCcw() {
          return (
            /* binding */
            _RefreshCcw
          );
        },

        /* harmony export */
        "RefreshCw": function RefreshCw() {
          return (
            /* binding */
            _RefreshCw
          );
        },

        /* harmony export */
        "Repeat": function Repeat() {
          return (
            /* binding */
            _Repeat
          );
        },

        /* harmony export */
        "Rewind": function Rewind() {
          return (
            /* binding */
            _Rewind
          );
        },

        /* harmony export */
        "RotateCcw": function RotateCcw() {
          return (
            /* binding */
            _RotateCcw
          );
        },

        /* harmony export */
        "RotateCw": function RotateCw() {
          return (
            /* binding */
            _RotateCw
          );
        },

        /* harmony export */
        "Rss": function Rss() {
          return (
            /* binding */
            _Rss
          );
        },

        /* harmony export */
        "Save": function Save() {
          return (
            /* binding */
            _Save
          );
        },

        /* harmony export */
        "Scissors": function Scissors() {
          return (
            /* binding */
            _Scissors
          );
        },

        /* harmony export */
        "Search": function Search() {
          return (
            /* binding */
            _Search
          );
        },

        /* harmony export */
        "Send": function Send() {
          return (
            /* binding */
            _Send
          );
        },

        /* harmony export */
        "Server": function Server() {
          return (
            /* binding */
            _Server
          );
        },

        /* harmony export */
        "Settings": function Settings() {
          return (
            /* binding */
            _Settings
          );
        },

        /* harmony export */
        "Share": function Share() {
          return (
            /* binding */
            _Share
          );
        },

        /* harmony export */
        "Share2": function Share2() {
          return (
            /* binding */
            _Share2
          );
        },

        /* harmony export */
        "Shield": function Shield() {
          return (
            /* binding */
            _Shield
          );
        },

        /* harmony export */
        "ShieldOff": function ShieldOff() {
          return (
            /* binding */
            _ShieldOff
          );
        },

        /* harmony export */
        "ShoppingBag": function ShoppingBag() {
          return (
            /* binding */
            _ShoppingBag
          );
        },

        /* harmony export */
        "ShoppingCart": function ShoppingCart() {
          return (
            /* binding */
            _ShoppingCart
          );
        },

        /* harmony export */
        "Shuffle": function Shuffle() {
          return (
            /* binding */
            _Shuffle
          );
        },

        /* harmony export */
        "Sidebar": function Sidebar() {
          return (
            /* binding */
            _Sidebar
          );
        },

        /* harmony export */
        "SkipBack": function SkipBack() {
          return (
            /* binding */
            _SkipBack
          );
        },

        /* harmony export */
        "SkipForward": function SkipForward() {
          return (
            /* binding */
            _SkipForward
          );
        },

        /* harmony export */
        "Slack": function Slack() {
          return (
            /* binding */
            _Slack
          );
        },

        /* harmony export */
        "Slash": function Slash() {
          return (
            /* binding */
            _Slash
          );
        },

        /* harmony export */
        "Sliders": function Sliders() {
          return (
            /* binding */
            _Sliders
          );
        },

        /* harmony export */
        "Smartphone": function Smartphone() {
          return (
            /* binding */
            _Smartphone
          );
        },

        /* harmony export */
        "Smile": function Smile() {
          return (
            /* binding */
            _Smile
          );
        },

        /* harmony export */
        "Speaker": function Speaker() {
          return (
            /* binding */
            _Speaker
          );
        },

        /* harmony export */
        "Square": function Square() {
          return (
            /* binding */
            _Square
          );
        },

        /* harmony export */
        "Star": function Star() {
          return (
            /* binding */
            _Star
          );
        },

        /* harmony export */
        "StopCircle": function StopCircle() {
          return (
            /* binding */
            _StopCircle
          );
        },

        /* harmony export */
        "Sun": function Sun() {
          return (
            /* binding */
            _Sun
          );
        },

        /* harmony export */
        "Sunrise": function Sunrise() {
          return (
            /* binding */
            _Sunrise
          );
        },

        /* harmony export */
        "Sunset": function Sunset() {
          return (
            /* binding */
            _Sunset
          );
        },

        /* harmony export */
        "Tablet": function Tablet() {
          return (
            /* binding */
            _Tablet
          );
        },

        /* harmony export */
        "Tag": function Tag() {
          return (
            /* binding */
            _Tag
          );
        },

        /* harmony export */
        "Target": function Target() {
          return (
            /* binding */
            _Target
          );
        },

        /* harmony export */
        "Terminal": function Terminal() {
          return (
            /* binding */
            _Terminal
          );
        },

        /* harmony export */
        "Thermometer": function Thermometer() {
          return (
            /* binding */
            _Thermometer
          );
        },

        /* harmony export */
        "ThumbsDown": function ThumbsDown() {
          return (
            /* binding */
            _ThumbsDown
          );
        },

        /* harmony export */
        "ThumbsUp": function ThumbsUp() {
          return (
            /* binding */
            _ThumbsUp
          );
        },

        /* harmony export */
        "ToggleLeft": function ToggleLeft() {
          return (
            /* binding */
            _ToggleLeft
          );
        },

        /* harmony export */
        "ToggleRight": function ToggleRight() {
          return (
            /* binding */
            _ToggleRight
          );
        },

        /* harmony export */
        "Tool": function Tool() {
          return (
            /* binding */
            _Tool
          );
        },

        /* harmony export */
        "Trash": function Trash() {
          return (
            /* binding */
            _Trash
          );
        },

        /* harmony export */
        "Trash2": function Trash2() {
          return (
            /* binding */
            _Trash2
          );
        },

        /* harmony export */
        "Trello": function Trello() {
          return (
            /* binding */
            _Trello
          );
        },

        /* harmony export */
        "TrendingDown": function TrendingDown() {
          return (
            /* binding */
            _TrendingDown
          );
        },

        /* harmony export */
        "TrendingUp": function TrendingUp() {
          return (
            /* binding */
            _TrendingUp
          );
        },

        /* harmony export */
        "Triangle": function Triangle() {
          return (
            /* binding */
            _Triangle
          );
        },

        /* harmony export */
        "Truck": function Truck() {
          return (
            /* binding */
            _Truck
          );
        },

        /* harmony export */
        "Tv": function Tv() {
          return (
            /* binding */
            _Tv
          );
        },

        /* harmony export */
        "Twitch": function Twitch() {
          return (
            /* binding */
            _Twitch
          );
        },

        /* harmony export */
        "Twitter": function Twitter() {
          return (
            /* binding */
            _Twitter
          );
        },

        /* harmony export */
        "Type": function Type() {
          return (
            /* binding */
            _Type
          );
        },

        /* harmony export */
        "Umbrella": function Umbrella() {
          return (
            /* binding */
            _Umbrella
          );
        },

        /* harmony export */
        "Underline": function Underline() {
          return (
            /* binding */
            _Underline
          );
        },

        /* harmony export */
        "Unlock": function Unlock() {
          return (
            /* binding */
            _Unlock
          );
        },

        /* harmony export */
        "Upload": function Upload() {
          return (
            /* binding */
            _Upload
          );
        },

        /* harmony export */
        "UploadCloud": function UploadCloud() {
          return (
            /* binding */
            _UploadCloud
          );
        },

        /* harmony export */
        "User": function User() {
          return (
            /* binding */
            _User
          );
        },

        /* harmony export */
        "UserCheck": function UserCheck() {
          return (
            /* binding */
            _UserCheck
          );
        },

        /* harmony export */
        "UserMinus": function UserMinus() {
          return (
            /* binding */
            _UserMinus
          );
        },

        /* harmony export */
        "UserPlus": function UserPlus() {
          return (
            /* binding */
            _UserPlus
          );
        },

        /* harmony export */
        "UserX": function UserX() {
          return (
            /* binding */
            _UserX
          );
        },

        /* harmony export */
        "Users": function Users() {
          return (
            /* binding */
            _Users
          );
        },

        /* harmony export */
        "Video": function Video() {
          return (
            /* binding */
            _Video
          );
        },

        /* harmony export */
        "VideoOff": function VideoOff() {
          return (
            /* binding */
            _VideoOff
          );
        },

        /* harmony export */
        "Voicemail": function Voicemail() {
          return (
            /* binding */
            _Voicemail
          );
        },

        /* harmony export */
        "Volume": function Volume() {
          return (
            /* binding */
            _Volume
          );
        },

        /* harmony export */
        "Volume1": function Volume1() {
          return (
            /* binding */
            _Volume2
          );
        },

        /* harmony export */
        "Volume2": function Volume2() {
          return (
            /* binding */
            _Volume3
          );
        },

        /* harmony export */
        "VolumeX": function VolumeX() {
          return (
            /* binding */
            _VolumeX
          );
        },

        /* harmony export */
        "Watch": function Watch() {
          return (
            /* binding */
            _Watch
          );
        },

        /* harmony export */
        "Wifi": function Wifi() {
          return (
            /* binding */
            _Wifi
          );
        },

        /* harmony export */
        "WifiOff": function WifiOff() {
          return (
            /* binding */
            _WifiOff
          );
        },

        /* harmony export */
        "Wind": function Wind() {
          return (
            /* binding */
            _Wind
          );
        },

        /* harmony export */
        "X": function X() {
          return (
            /* binding */
            _X2
          );
        },

        /* harmony export */
        "XCircle": function XCircle() {
          return (
            /* binding */
            _XCircle
          );
        },

        /* harmony export */
        "XOctagon": function XOctagon() {
          return (
            /* binding */
            _XOctagon
          );
        },

        /* harmony export */
        "XSquare": function XSquare() {
          return (
            /* binding */
            _XSquare
          );
        },

        /* harmony export */
        "Youtube": function Youtube() {
          return (
            /* binding */
            _Youtube
          );
        },

        /* harmony export */
        "Zap": function Zap() {
          return (
            /* binding */
            _Zap
          );
        },

        /* harmony export */
        "ZapOff": function ZapOff() {
          return (
            /* binding */
            _ZapOff
          );
        },

        /* harmony export */
        "ZoomIn": function ZoomIn() {
          return (
            /* binding */
            _ZoomIn
          );
        },

        /* harmony export */
        "ZoomOut": function ZoomOut() {
          return (
            /* binding */
            _ZoomOut
          );
        },

        /* harmony export */
        "allIcons": function allIcons() {
          return (
            /* binding */
            _allIcons
          );
        }
        /* harmony export */

      });

      var _Activity = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-activity\">\n    <polyline points=\"22 12 18 12 15 21 9 3 6 12 2 12\"></polyline>\n</svg>";
      var _Airplay = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-airplay\">\n    <path d=\"M5 17H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-1\"></path><polygon points=\"12 15 17 21 7 21 12 15\"></polygon>\n</svg>";
      var _AlertCircle = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-alert-circle\">\n    <circle cx=\"12\" cy=\"12\" r=\"10\"></circle><line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"12\"></line><line x1=\"12\" y1=\"16\" x2=\"12.01\" y2=\"16\"></line>\n</svg>";
      var _AlertOctagon = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-alert-octagon\">\n    <polygon points=\"7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2\"></polygon><line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"12\"></line><line x1=\"12\" y1=\"16\" x2=\"12.01\" y2=\"16\"></line>\n</svg>";
      var _AlertTriangle = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-alert-triangle\">\n    <path d=\"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"></path><line x1=\"12\" y1=\"9\" x2=\"12\" y2=\"13\"></line><line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"></line>\n</svg>";
      var _AlignCenter = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-align-center\">\n    <line x1=\"18\" y1=\"10\" x2=\"6\" y2=\"10\"></line><line x1=\"21\" y1=\"6\" x2=\"3\" y2=\"6\"></line><line x1=\"21\" y1=\"14\" x2=\"3\" y2=\"14\"></line><line x1=\"18\" y1=\"18\" x2=\"6\" y2=\"18\"></line>\n</svg>";
      var _AlignJustify = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-align-justify\">\n    <line x1=\"21\" y1=\"10\" x2=\"3\" y2=\"10\"></line><line x1=\"21\" y1=\"6\" x2=\"3\" y2=\"6\"></line><line x1=\"21\" y1=\"14\" x2=\"3\" y2=\"14\"></line><line x1=\"21\" y1=\"18\" x2=\"3\" y2=\"18\"></line>\n</svg>";
      var _AlignLeft = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-align-left\">\n    <line x1=\"17\" y1=\"10\" x2=\"3\" y2=\"10\"></line><line x1=\"21\" y1=\"6\" x2=\"3\" y2=\"6\"></line><line x1=\"21\" y1=\"14\" x2=\"3\" y2=\"14\"></line><line x1=\"17\" y1=\"18\" x2=\"3\" y2=\"18\"></line>\n</svg>";
      var _AlignRight = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-align-right\">\n    <line x1=\"21\" y1=\"10\" x2=\"7\" y2=\"10\"></line><line x1=\"21\" y1=\"6\" x2=\"3\" y2=\"6\"></line><line x1=\"21\" y1=\"14\" x2=\"3\" y2=\"14\"></line><line x1=\"21\" y1=\"18\" x2=\"7\" y2=\"18\"></line>\n</svg>";
      var _Anchor = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-anchor\">\n    <circle cx=\"12\" cy=\"5\" r=\"3\"></circle><line x1=\"12\" y1=\"22\" x2=\"12\" y2=\"8\"></line><path d=\"M5 12H2a10 10 0 0 0 20 0h-3\"></path>\n</svg>";
      var _Aperture = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-aperture\">\n    <circle cx=\"12\" cy=\"12\" r=\"10\"></circle><line x1=\"14.31\" y1=\"8\" x2=\"20.05\" y2=\"17.94\"></line><line x1=\"9.69\" y1=\"8\" x2=\"21.17\" y2=\"8\"></line><line x1=\"7.38\" y1=\"12\" x2=\"13.12\" y2=\"2.06\"></line><line x1=\"9.69\" y1=\"16\" x2=\"3.95\" y2=\"6.06\"></line><line x1=\"14.31\" y1=\"16\" x2=\"2.83\" y2=\"16\"></line><line x1=\"16.62\" y1=\"12\" x2=\"10.88\" y2=\"21.94\"></line>\n</svg>";
      var _Archive = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-archive\">\n    <polyline points=\"21 8 21 21 3 21 3 8\"></polyline><rect x=\"1\" y=\"3\" width=\"22\" height=\"5\"></rect><line x1=\"10\" y1=\"12\" x2=\"14\" y2=\"12\"></line>\n</svg>";
      var _ArrowDownCircle = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-arrow-down-circle\">\n    <circle cx=\"12\" cy=\"12\" r=\"10\"></circle><polyline points=\"8 12 12 16 16 12\"></polyline><line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"16\"></line>\n</svg>";
      var _ArrowDownLeft = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-arrow-down-left\">\n    <line x1=\"17\" y1=\"7\" x2=\"7\" y2=\"17\"></line><polyline points=\"17 17 7 17 7 7\"></polyline>\n</svg>";
      var _ArrowDownRight = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-arrow-down-right\">\n    <line x1=\"7\" y1=\"7\" x2=\"17\" y2=\"17\"></line><polyline points=\"17 7 17 17 7 17\"></polyline>\n</svg>";
      var _ArrowDown = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-arrow-down\">\n    <line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\"></line><polyline points=\"19 12 12 19 5 12\"></polyline>\n</svg>";
      var _ArrowLeftCircle = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-arrow-left-circle\">\n    <circle cx=\"12\" cy=\"12\" r=\"10\"></circle><polyline points=\"12 8 8 12 12 16\"></polyline><line x1=\"16\" y1=\"12\" x2=\"8\" y2=\"12\"></line>\n</svg>";
      var _ArrowLeft = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-arrow-left\">\n    <line x1=\"19\" y1=\"12\" x2=\"5\" y2=\"12\"></line><polyline points=\"12 19 5 12 12 5\"></polyline>\n</svg>";
      var _ArrowRightCircle = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-arrow-right-circle\">\n    <circle cx=\"12\" cy=\"12\" r=\"10\"></circle><polyline points=\"12 16 16 12 12 8\"></polyline><line x1=\"8\" y1=\"12\" x2=\"16\" y2=\"12\"></line>\n</svg>";
      var _ArrowRight = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-arrow-right\">\n    <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"></line><polyline points=\"12 5 19 12 12 19\"></polyline>\n</svg>";
      var _ArrowUpCircle = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-arrow-up-circle\">\n    <circle cx=\"12\" cy=\"12\" r=\"10\"></circle><polyline points=\"16 12 12 8 8 12\"></polyline><line x1=\"12\" y1=\"16\" x2=\"12\" y2=\"8\"></line>\n</svg>";
      var _ArrowUpLeft = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-arrow-up-left\">\n    <line x1=\"17\" y1=\"17\" x2=\"7\" y2=\"7\"></line><polyline points=\"7 17 7 7 17 7\"></polyline>\n</svg>";
      var _ArrowUpRight = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-arrow-up-right\">\n    <line x1=\"7\" y1=\"17\" x2=\"17\" y2=\"7\"></line><polyline points=\"7 7 17 7 17 17\"></polyline>\n</svg>";
      var _ArrowUp = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-arrow-up\">\n    <line x1=\"12\" y1=\"19\" x2=\"12\" y2=\"5\"></line><polyline points=\"5 12 12 5 19 12\"></polyline>\n</svg>";
      var _AtSign = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-at-sign\">\n    <circle cx=\"12\" cy=\"12\" r=\"4\"></circle><path d=\"M16 8v5a3 3 0 0 0 6 0v-1a10 10 0 1 0-3.92 7.94\"></path>\n</svg>";
      var _Award = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-award\">\n    <circle cx=\"12\" cy=\"8\" r=\"7\"></circle><polyline points=\"8.21 13.89 7 23 12 20 17 23 15.79 13.88\"></polyline>\n</svg>";
      var _BarChart2 = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-bar-chart-2\">\n    <line x1=\"18\" y1=\"20\" x2=\"18\" y2=\"10\"></line><line x1=\"12\" y1=\"20\" x2=\"12\" y2=\"4\"></line><line x1=\"6\" y1=\"20\" x2=\"6\" y2=\"14\"></line>\n</svg>";
      var _BarChart = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-bar-chart\">\n    <line x1=\"12\" y1=\"20\" x2=\"12\" y2=\"10\"></line><line x1=\"18\" y1=\"20\" x2=\"18\" y2=\"4\"></line><line x1=\"6\" y1=\"20\" x2=\"6\" y2=\"16\"></line>\n</svg>";
      var _BatteryCharging = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-battery-charging\">\n    <path d=\"M5 18H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3.19M15 6h2a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-3.19\"></path><line x1=\"23\" y1=\"13\" x2=\"23\" y2=\"11\"></line><polyline points=\"11 6 7 12 13 12 9 18\"></polyline>\n</svg>";
      var _Battery = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-battery\">\n    <rect x=\"1\" y=\"6\" width=\"18\" height=\"12\" rx=\"2\" ry=\"2\"></rect><line x1=\"23\" y1=\"13\" x2=\"23\" y2=\"11\"></line>\n</svg>";
      var _BellOff = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-bell-off\">\n    <path d=\"M13.73 21a2 2 0 0 1-3.46 0\"></path><path d=\"M18.63 13A17.89 17.89 0 0 1 18 8\"></path><path d=\"M6.26 6.26A5.86 5.86 0 0 0 6 8c0 7-3 9-3 9h14\"></path><path d=\"M18 8a6 6 0 0 0-9.33-5\"></path><line x1=\"1\" y1=\"1\" x2=\"23\" y2=\"23\"></line>\n</svg>";
      var _Bell = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-bell\">\n    <path d=\"M18 8A6 6 0 0 0 6 8c0 7-3 9-3 9h18s-3-2-3-9\"></path><path d=\"M13.73 21a2 2 0 0 1-3.46 0\"></path>\n</svg>";
      var _Bluetooth = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-bluetooth\">\n    <polyline points=\"6.5 6.5 17.5 17.5 12 23 12 1 17.5 6.5 6.5 17.5\"></polyline>\n</svg>";
      var _Bold = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-bold\">\n    <path d=\"M6 4h8a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z\"></path><path d=\"M6 12h9a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z\"></path>\n</svg>";
      var _BookOpen = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-book-open\">\n    <path d=\"M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z\"></path><path d=\"M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z\"></path>\n</svg>";
      var _Book = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-book\">\n    <path d=\"M4 19.5A2.5 2.5 0 0 1 6.5 17H20\"></path><path d=\"M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z\"></path>\n</svg>";
      var _Bookmark = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-bookmark\">\n    <path d=\"M19 21l-7-5-7 5V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z\"></path>\n</svg>";
      var _Box = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-box\">\n    <path d=\"M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z\"></path><polyline points=\"3.27 6.96 12 12.01 20.73 6.96\"></polyline><line x1=\"12\" y1=\"22.08\" x2=\"12\" y2=\"12\"></line>\n</svg>";
      var _Briefcase = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-briefcase\">\n    <rect x=\"2\" y=\"7\" width=\"20\" height=\"14\" rx=\"2\" ry=\"2\"></rect><path d=\"M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16\"></path>\n</svg>";
      var _Calendar = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-calendar\">\n    <rect x=\"3\" y=\"4\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect><line x1=\"16\" y1=\"2\" x2=\"16\" y2=\"6\"></line><line x1=\"8\" y1=\"2\" x2=\"8\" y2=\"6\"></line><line x1=\"3\" y1=\"10\" x2=\"21\" y2=\"10\"></line>\n</svg>";
      var _CameraOff = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-camera-off\">\n    <line x1=\"1\" y1=\"1\" x2=\"23\" y2=\"23\"></line><path d=\"M21 21H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3m3-3h6l2 3h4a2 2 0 0 1 2 2v9.34m-7.72-2.06a4 4 0 1 1-5.56-5.56\"></path>\n</svg>";
      var _Camera = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-camera\">\n    <path d=\"M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z\"></path><circle cx=\"12\" cy=\"13\" r=\"4\"></circle>\n</svg>";
      var _Cast = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-cast\">\n    <path d=\"M2 16.1A5 5 0 0 1 5.9 20M2 12.05A9 9 0 0 1 9.95 20M2 8V6a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2h-6\"></path><line x1=\"2\" y1=\"20\" x2=\"2.01\" y2=\"20\"></line>\n</svg>";
      var _CheckCircle = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-check-circle\">\n    <path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\"></path><polyline points=\"22 4 12 14.01 9 11.01\"></polyline>\n</svg>";
      var _CheckSquare = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-check-square\">\n    <polyline points=\"9 11 12 14 22 4\"></polyline><path d=\"M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11\"></path>\n</svg>";
      var _Check = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-check\">\n    <polyline points=\"20 6 9 17 4 12\"></polyline>\n</svg>";
      var _ChevronDown = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-chevron-down\">\n    <polyline points=\"6 9 12 15 18 9\"></polyline>\n</svg>";
      var _ChevronLeft = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-chevron-left\">\n    <polyline points=\"15 18 9 12 15 6\"></polyline>\n</svg>";
      var _ChevronRight = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-chevron-right\">\n    <polyline points=\"9 18 15 12 9 6\"></polyline>\n</svg>";
      var _ChevronUp = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-chevron-up\">\n    <polyline points=\"18 15 12 9 6 15\"></polyline>\n</svg>";
      var _ChevronsDown = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-chevrons-down\">\n    <polyline points=\"7 13 12 18 17 13\"></polyline><polyline points=\"7 6 12 11 17 6\"></polyline>\n</svg>";
      var _ChevronsLeft = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-chevrons-left\">\n    <polyline points=\"11 17 6 12 11 7\"></polyline><polyline points=\"18 17 13 12 18 7\"></polyline>\n</svg>";
      var _ChevronsRight = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-chevrons-right\">\n    <polyline points=\"13 17 18 12 13 7\"></polyline><polyline points=\"6 17 11 12 6 7\"></polyline>\n</svg>";
      var _ChevronsUp = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-chevrons-up\">\n    <polyline points=\"17 11 12 6 7 11\"></polyline><polyline points=\"17 18 12 13 7 18\"></polyline>\n</svg>";
      var _Chrome = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-chrome\">\n    <circle cx=\"12\" cy=\"12\" r=\"10\"></circle><circle cx=\"12\" cy=\"12\" r=\"4\"></circle><line x1=\"21.17\" y1=\"8\" x2=\"12\" y2=\"8\"></line><line x1=\"3.95\" y1=\"6.06\" x2=\"8.54\" y2=\"14\"></line><line x1=\"10.88\" y1=\"21.94\" x2=\"15.46\" y2=\"14\"></line>\n</svg>";
      var _Circle = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-circle\">\n    <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n</svg>";
      var _Clipboard = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-clipboard\">\n    <path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\"></path><rect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\"></rect>\n</svg>";
      var _Clock = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-clock\">\n    <circle cx=\"12\" cy=\"12\" r=\"10\"></circle><polyline points=\"12 6 12 12 16 14\"></polyline>\n</svg>";
      var _CloudDrizzle = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-cloud-drizzle\">\n    <line x1=\"8\" y1=\"19\" x2=\"8\" y2=\"21\"></line><line x1=\"8\" y1=\"13\" x2=\"8\" y2=\"15\"></line><line x1=\"16\" y1=\"19\" x2=\"16\" y2=\"21\"></line><line x1=\"16\" y1=\"13\" x2=\"16\" y2=\"15\"></line><line x1=\"12\" y1=\"21\" x2=\"12\" y2=\"23\"></line><line x1=\"12\" y1=\"15\" x2=\"12\" y2=\"17\"></line><path d=\"M20 16.58A5 5 0 0 0 18 7h-1.26A8 8 0 1 0 4 15.25\"></path>\n</svg>";
      var _CloudLightning = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-cloud-lightning\">\n    <path d=\"M19 16.9A5 5 0 0 0 18 7h-1.26a8 8 0 1 0-11.62 9\"></path><polyline points=\"13 11 9 17 15 17 11 23\"></polyline>\n</svg>";
      var _CloudOff = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-cloud-off\">\n    <path d=\"M22.61 16.95A5 5 0 0 0 18 10h-1.26a8 8 0 0 0-7.05-6M5 5a8 8 0 0 0 4 15h9a5 5 0 0 0 1.7-.3\"></path><line x1=\"1\" y1=\"1\" x2=\"23\" y2=\"23\"></line>\n</svg>";
      var _CloudRain = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-cloud-rain\">\n    <line x1=\"16\" y1=\"13\" x2=\"16\" y2=\"21\"></line><line x1=\"8\" y1=\"13\" x2=\"8\" y2=\"21\"></line><line x1=\"12\" y1=\"15\" x2=\"12\" y2=\"23\"></line><path d=\"M20 16.58A5 5 0 0 0 18 7h-1.26A8 8 0 1 0 4 15.25\"></path>\n</svg>";
      var _CloudSnow = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-cloud-snow\">\n    <path d=\"M20 17.58A5 5 0 0 0 18 8h-1.26A8 8 0 1 0 4 16.25\"></path><line x1=\"8\" y1=\"16\" x2=\"8.01\" y2=\"16\"></line><line x1=\"8\" y1=\"20\" x2=\"8.01\" y2=\"20\"></line><line x1=\"12\" y1=\"18\" x2=\"12.01\" y2=\"18\"></line><line x1=\"12\" y1=\"22\" x2=\"12.01\" y2=\"22\"></line><line x1=\"16\" y1=\"16\" x2=\"16.01\" y2=\"16\"></line><line x1=\"16\" y1=\"20\" x2=\"16.01\" y2=\"20\"></line>\n</svg>";
      var _Cloud = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-cloud\">\n    <path d=\"M18 10h-1.26A8 8 0 1 0 9 20h9a5 5 0 0 0 0-10z\"></path>\n</svg>";
      var _Code = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-code\">\n    <polyline points=\"16 18 22 12 16 6\"></polyline><polyline points=\"8 6 2 12 8 18\"></polyline>\n</svg>";
      var _Codepen = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-codepen\">\n    <polygon points=\"12 2 22 8.5 22 15.5 12 22 2 15.5 2 8.5 12 2\"></polygon><line x1=\"12\" y1=\"22\" x2=\"12\" y2=\"15.5\"></line><polyline points=\"22 8.5 12 15.5 2 8.5\"></polyline><polyline points=\"2 15.5 12 8.5 22 15.5\"></polyline><line x1=\"12\" y1=\"2\" x2=\"12\" y2=\"8.5\"></line>\n</svg>";
      var _Codesandbox = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-codesandbox\">\n    <path d=\"M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z\"></path><polyline points=\"7.5 4.21 12 6.81 16.5 4.21\"></polyline><polyline points=\"7.5 19.79 7.5 14.6 3 12\"></polyline><polyline points=\"21 12 16.5 14.6 16.5 19.79\"></polyline><polyline points=\"3.27 6.96 12 12.01 20.73 6.96\"></polyline><line x1=\"12\" y1=\"22.08\" x2=\"12\" y2=\"12\"></line>\n</svg>";
      var _Coffee = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-coffee\">\n    <path d=\"M18 8h1a4 4 0 0 1 0 8h-1\"></path><path d=\"M2 8h16v9a4 4 0 0 1-4 4H6a4 4 0 0 1-4-4V8z\"></path><line x1=\"6\" y1=\"1\" x2=\"6\" y2=\"4\"></line><line x1=\"10\" y1=\"1\" x2=\"10\" y2=\"4\"></line><line x1=\"14\" y1=\"1\" x2=\"14\" y2=\"4\"></line>\n</svg>";
      var _Columns = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-columns\">\n    <path d=\"M12 3h7a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-7m0-18H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h7m0-18v18\"></path>\n</svg>";
      var _Command = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-command\">\n    <path d=\"M18 3a3 3 0 0 0-3 3v12a3 3 0 0 0 3 3 3 3 0 0 0 3-3 3 3 0 0 0-3-3H6a3 3 0 0 0-3 3 3 3 0 0 0 3 3 3 3 0 0 0 3-3V6a3 3 0 0 0-3-3 3 3 0 0 0-3 3 3 3 0 0 0 3 3h12a3 3 0 0 0 3-3 3 3 0 0 0-3-3z\"></path>\n</svg>";
      var _Compass = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-compass\">\n    <circle cx=\"12\" cy=\"12\" r=\"10\"></circle><polygon points=\"16.24 7.76 14.12 14.12 7.76 16.24 9.88 9.88 16.24 7.76\"></polygon>\n</svg>";
      var _Copy = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-copy\">\n    <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect><path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n</svg>";
      var _CornerDownLeft = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-corner-down-left\">\n    <polyline points=\"9 10 4 15 9 20\"></polyline><path d=\"M20 4v7a4 4 0 0 1-4 4H4\"></path>\n</svg>";
      var _CornerDownRight = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-corner-down-right\">\n    <polyline points=\"15 10 20 15 15 20\"></polyline><path d=\"M4 4v7a4 4 0 0 0 4 4h12\"></path>\n</svg>";
      var _CornerLeftDown = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-corner-left-down\">\n    <polyline points=\"14 15 9 20 4 15\"></polyline><path d=\"M20 4h-7a4 4 0 0 0-4 4v12\"></path>\n</svg>";
      var _CornerLeftUp = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-corner-left-up\">\n    <polyline points=\"14 9 9 4 4 9\"></polyline><path d=\"M20 20h-7a4 4 0 0 1-4-4V4\"></path>\n</svg>";
      var _CornerRightDown = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-corner-right-down\">\n    <polyline points=\"10 15 15 20 20 15\"></polyline><path d=\"M4 4h7a4 4 0 0 1 4 4v12\"></path>\n</svg>";
      var _CornerRightUp = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-corner-right-up\">\n    <polyline points=\"10 9 15 4 20 9\"></polyline><path d=\"M4 20h7a4 4 0 0 0 4-4V4\"></path>\n</svg>";
      var _CornerUpLeft = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-corner-up-left\">\n    <polyline points=\"9 14 4 9 9 4\"></polyline><path d=\"M20 20v-7a4 4 0 0 0-4-4H4\"></path>\n</svg>";
      var _CornerUpRight = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-corner-up-right\">\n    <polyline points=\"15 14 20 9 15 4\"></polyline><path d=\"M4 20v-7a4 4 0 0 1 4-4h12\"></path>\n</svg>";
      var _Cpu = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-cpu\">\n    <rect x=\"4\" y=\"4\" width=\"16\" height=\"16\" rx=\"2\" ry=\"2\"></rect><rect x=\"9\" y=\"9\" width=\"6\" height=\"6\"></rect><line x1=\"9\" y1=\"1\" x2=\"9\" y2=\"4\"></line><line x1=\"15\" y1=\"1\" x2=\"15\" y2=\"4\"></line><line x1=\"9\" y1=\"20\" x2=\"9\" y2=\"23\"></line><line x1=\"15\" y1=\"20\" x2=\"15\" y2=\"23\"></line><line x1=\"20\" y1=\"9\" x2=\"23\" y2=\"9\"></line><line x1=\"20\" y1=\"14\" x2=\"23\" y2=\"14\"></line><line x1=\"1\" y1=\"9\" x2=\"4\" y2=\"9\"></line><line x1=\"1\" y1=\"14\" x2=\"4\" y2=\"14\"></line>\n</svg>";
      var _CreditCard = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-credit-card\">\n    <rect x=\"1\" y=\"4\" width=\"22\" height=\"16\" rx=\"2\" ry=\"2\"></rect><line x1=\"1\" y1=\"10\" x2=\"23\" y2=\"10\"></line>\n</svg>";
      var _Crop = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-crop\">\n    <path d=\"M6.13 1L6 16a2 2 0 0 0 2 2h15\"></path><path d=\"M1 6.13L16 6a2 2 0 0 1 2 2v15\"></path>\n</svg>";
      var _Crosshair = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-crosshair\">\n    <circle cx=\"12\" cy=\"12\" r=\"10\"></circle><line x1=\"22\" y1=\"12\" x2=\"18\" y2=\"12\"></line><line x1=\"6\" y1=\"12\" x2=\"2\" y2=\"12\"></line><line x1=\"12\" y1=\"6\" x2=\"12\" y2=\"2\"></line><line x1=\"12\" y1=\"22\" x2=\"12\" y2=\"18\"></line>\n</svg>";
      var _Database = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-database\">\n    <ellipse cx=\"12\" cy=\"5\" rx=\"9\" ry=\"3\"></ellipse><path d=\"M21 12c0 1.66-4 3-9 3s-9-1.34-9-3\"></path><path d=\"M3 5v14c0 1.66 4 3 9 3s9-1.34 9-3V5\"></path>\n</svg>";
      var _Delete = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-delete\">\n    <path d=\"M21 4H8l-7 8 7 8h13a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2z\"></path><line x1=\"18\" y1=\"9\" x2=\"12\" y2=\"15\"></line><line x1=\"12\" y1=\"9\" x2=\"18\" y2=\"15\"></line>\n</svg>";
      var _Disc = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-disc\">\n    <circle cx=\"12\" cy=\"12\" r=\"10\"></circle><circle cx=\"12\" cy=\"12\" r=\"3\"></circle>\n</svg>";
      var _DollarSign = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-dollar-sign\">\n    <line x1=\"12\" y1=\"1\" x2=\"12\" y2=\"23\"></line><path d=\"M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6\"></path>\n</svg>";
      var _DownloadCloud = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-download-cloud\">\n    <polyline points=\"8 17 12 21 16 17\"></polyline><line x1=\"12\" y1=\"12\" x2=\"12\" y2=\"21\"></line><path d=\"M20.88 18.09A5 5 0 0 0 18 9h-1.26A8 8 0 1 0 3 16.29\"></path>\n</svg>";
      var _Download = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-download\">\n    <path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\"></path><polyline points=\"7 10 12 15 17 10\"></polyline><line x1=\"12\" y1=\"15\" x2=\"12\" y2=\"3\"></line>\n</svg>";
      var _Droplet = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-droplet\">\n    <path d=\"M12 2.69l5.66 5.66a8 8 0 1 1-11.31 0z\"></path>\n</svg>";
      var _Edit2 = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-edit-2\">\n    <path d=\"M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z\"></path>\n</svg>";
      var _Edit3 = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-edit-3\">\n    <path d=\"M12 20h9\"></path><path d=\"M16.5 3.5a2.121 2.121 0 0 1 3 3L7 19l-4 1 1-4L16.5 3.5z\"></path>\n</svg>";
      var _Edit = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-edit\">\n    <path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\"></path><path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\"></path>\n</svg>";
      var _ExternalLink = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-external-link\">\n    <path d=\"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6\"></path><polyline points=\"15 3 21 3 21 9\"></polyline><line x1=\"10\" y1=\"14\" x2=\"21\" y2=\"3\"></line>\n</svg>";
      var _EyeOff = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-eye-off\">\n    <path d=\"M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24\"></path><line x1=\"1\" y1=\"1\" x2=\"23\" y2=\"23\"></line>\n</svg>";
      var _Eye = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-eye\">\n    <path d=\"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z\"></path><circle cx=\"12\" cy=\"12\" r=\"3\"></circle>\n</svg>";
      var _Facebook = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-facebook\">\n    <path d=\"M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z\"></path>\n</svg>";
      var _FastForward = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-fast-forward\">\n    <polygon points=\"13 19 22 12 13 5 13 19\"></polygon><polygon points=\"2 19 11 12 2 5 2 19\"></polygon>\n</svg>";
      var _Feather = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-feather\">\n    <path d=\"M20.24 12.24a6 6 0 0 0-8.49-8.49L5 10.5V19h8.5z\"></path><line x1=\"16\" y1=\"8\" x2=\"2\" y2=\"22\"></line><line x1=\"17.5\" y1=\"15\" x2=\"9\" y2=\"15\"></line>\n</svg>";
      var _Figma = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-figma\">\n    <path d=\"M5 5.5A3.5 3.5 0 0 1 8.5 2H12v7H8.5A3.5 3.5 0 0 1 5 5.5z\"></path><path d=\"M12 2h3.5a3.5 3.5 0 1 1 0 7H12V2z\"></path><path d=\"M12 12.5a3.5 3.5 0 1 1 7 0 3.5 3.5 0 1 1-7 0z\"></path><path d=\"M5 19.5A3.5 3.5 0 0 1 8.5 16H12v3.5a3.5 3.5 0 1 1-7 0z\"></path><path d=\"M5 12.5A3.5 3.5 0 0 1 8.5 9H12v7H8.5A3.5 3.5 0 0 1 5 12.5z\"></path>\n</svg>";
      var _FileMinus = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-file-minus\">\n    <path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"></path><polyline points=\"14 2 14 8 20 8\"></polyline><line x1=\"9\" y1=\"15\" x2=\"15\" y2=\"15\"></line>\n</svg>";
      var _FilePlus = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-file-plus\">\n    <path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"></path><polyline points=\"14 2 14 8 20 8\"></polyline><line x1=\"12\" y1=\"18\" x2=\"12\" y2=\"12\"></line><line x1=\"9\" y1=\"15\" x2=\"15\" y2=\"15\"></line>\n</svg>";
      var _FileText = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-file-text\">\n    <path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"></path><polyline points=\"14 2 14 8 20 8\"></polyline><line x1=\"16\" y1=\"13\" x2=\"8\" y2=\"13\"></line><line x1=\"16\" y1=\"17\" x2=\"8\" y2=\"17\"></line><polyline points=\"10 9 9 9 8 9\"></polyline>\n</svg>";
      var _File = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-file\">\n    <path d=\"M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z\"></path><polyline points=\"13 2 13 9 20 9\"></polyline>\n</svg>";
      var _Film = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-film\">\n    <rect x=\"2\" y=\"2\" width=\"20\" height=\"20\" rx=\"2.18\" ry=\"2.18\"></rect><line x1=\"7\" y1=\"2\" x2=\"7\" y2=\"22\"></line><line x1=\"17\" y1=\"2\" x2=\"17\" y2=\"22\"></line><line x1=\"2\" y1=\"12\" x2=\"22\" y2=\"12\"></line><line x1=\"2\" y1=\"7\" x2=\"7\" y2=\"7\"></line><line x1=\"2\" y1=\"17\" x2=\"7\" y2=\"17\"></line><line x1=\"17\" y1=\"17\" x2=\"22\" y2=\"17\"></line><line x1=\"17\" y1=\"7\" x2=\"22\" y2=\"7\"></line>\n</svg>";
      var _Filter = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-filter\">\n    <polygon points=\"22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3\"></polygon>\n</svg>";
      var _Flag = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-flag\">\n    <path d=\"M4 15s1-1 4-1 5 2 8 2 4-1 4-1V3s-1 1-4 1-5-2-8-2-4 1-4 1z\"></path><line x1=\"4\" y1=\"22\" x2=\"4\" y2=\"15\"></line>\n</svg>";
      var _FolderMinus = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-folder-minus\">\n    <path d=\"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z\"></path><line x1=\"9\" y1=\"14\" x2=\"15\" y2=\"14\"></line>\n</svg>";
      var _FolderPlus = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-folder-plus\">\n    <path d=\"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z\"></path><line x1=\"12\" y1=\"11\" x2=\"12\" y2=\"17\"></line><line x1=\"9\" y1=\"14\" x2=\"15\" y2=\"14\"></line>\n</svg>";
      var _Folder = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-folder\">\n    <path d=\"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z\"></path>\n</svg>";
      var _Framer = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-framer\">\n    <path d=\"M5 16V9h14V2H5l14 14h-7m-7 0l7 7v-7m-7 0h7\"></path>\n</svg>";
      var _Frown = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-frown\">\n    <circle cx=\"12\" cy=\"12\" r=\"10\"></circle><path d=\"M16 16s-1.5-2-4-2-4 2-4 2\"></path><line x1=\"9\" y1=\"9\" x2=\"9.01\" y2=\"9\"></line><line x1=\"15\" y1=\"9\" x2=\"15.01\" y2=\"9\"></line>\n</svg>";
      var _Gift = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-gift\">\n    <polyline points=\"20 12 20 22 4 22 4 12\"></polyline><rect x=\"2\" y=\"7\" width=\"20\" height=\"5\"></rect><line x1=\"12\" y1=\"22\" x2=\"12\" y2=\"7\"></line><path d=\"M12 7H7.5a2.5 2.5 0 0 1 0-5C11 2 12 7 12 7z\"></path><path d=\"M12 7h4.5a2.5 2.5 0 0 0 0-5C13 2 12 7 12 7z\"></path>\n</svg>";
      var _GitBranch = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-git-branch\">\n    <line x1=\"6\" y1=\"3\" x2=\"6\" y2=\"15\"></line><circle cx=\"18\" cy=\"6\" r=\"3\"></circle><circle cx=\"6\" cy=\"18\" r=\"3\"></circle><path d=\"M18 9a9 9 0 0 1-9 9\"></path>\n</svg>";
      var _GitCommit = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-git-commit\">\n    <circle cx=\"12\" cy=\"12\" r=\"4\"></circle><line x1=\"1.05\" y1=\"12\" x2=\"7\" y2=\"12\"></line><line x1=\"17.01\" y1=\"12\" x2=\"22.96\" y2=\"12\"></line>\n</svg>";
      var _GitMerge = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-git-merge\">\n    <circle cx=\"18\" cy=\"18\" r=\"3\"></circle><circle cx=\"6\" cy=\"6\" r=\"3\"></circle><path d=\"M6 21V9a9 9 0 0 0 9 9\"></path>\n</svg>";
      var _GitPullRequest = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-git-pull-request\">\n    <circle cx=\"18\" cy=\"18\" r=\"3\"></circle><circle cx=\"6\" cy=\"6\" r=\"3\"></circle><path d=\"M13 6h3a2 2 0 0 1 2 2v7\"></path><line x1=\"6\" y1=\"9\" x2=\"6\" y2=\"21\"></line>\n</svg>";
      var _Github = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-github\">\n    <path d=\"M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22\"></path>\n</svg>";
      var _Gitlab = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-gitlab\">\n    <path d=\"M22.65 14.39L12 22.13 1.35 14.39a.84.84 0 0 1-.3-.94l1.22-3.78 2.44-7.51A.42.42 0 0 1 4.82 2a.43.43 0 0 1 .58 0 .42.42 0 0 1 .11.18l2.44 7.49h8.1l2.44-7.51A.42.42 0 0 1 18.6 2a.43.43 0 0 1 .58 0 .42.42 0 0 1 .11.18l2.44 7.51L23 13.45a.84.84 0 0 1-.35.94z\"></path>\n</svg>";
      var _Globe = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-globe\">\n    <circle cx=\"12\" cy=\"12\" r=\"10\"></circle><line x1=\"2\" y1=\"12\" x2=\"22\" y2=\"12\"></line><path d=\"M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z\"></path>\n</svg>";
      var _Grid = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-grid\">\n    <rect x=\"3\" y=\"3\" width=\"7\" height=\"7\"></rect><rect x=\"14\" y=\"3\" width=\"7\" height=\"7\"></rect><rect x=\"14\" y=\"14\" width=\"7\" height=\"7\"></rect><rect x=\"3\" y=\"14\" width=\"7\" height=\"7\"></rect>\n</svg>";
      var _HardDrive = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-hard-drive\">\n    <line x1=\"22\" y1=\"12\" x2=\"2\" y2=\"12\"></line><path d=\"M5.45 5.11L2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z\"></path><line x1=\"6\" y1=\"16\" x2=\"6.01\" y2=\"16\"></line><line x1=\"10\" y1=\"16\" x2=\"10.01\" y2=\"16\"></line>\n</svg>";
      var _Hash = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-hash\">\n    <line x1=\"4\" y1=\"9\" x2=\"20\" y2=\"9\"></line><line x1=\"4\" y1=\"15\" x2=\"20\" y2=\"15\"></line><line x1=\"10\" y1=\"3\" x2=\"8\" y2=\"21\"></line><line x1=\"16\" y1=\"3\" x2=\"14\" y2=\"21\"></line>\n</svg>";
      var _Headphones = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-headphones\">\n    <path d=\"M3 18v-6a9 9 0 0 1 18 0v6\"></path><path d=\"M21 19a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3zM3 19a2 2 0 0 0 2 2h1a2 2 0 0 0 2-2v-3a2 2 0 0 0-2-2H3z\"></path>\n</svg>";
      var _Heart = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-heart\">\n    <path d=\"M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z\"></path>\n</svg>";
      var _HelpCircle = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-help-circle\">\n    <circle cx=\"12\" cy=\"12\" r=\"10\"></circle><path d=\"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3\"></path><line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"></line>\n</svg>";
      var _Hexagon = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-hexagon\">\n    <path d=\"M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z\"></path>\n</svg>";
      var _Home = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-home\">\n    <path d=\"M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z\"></path><polyline points=\"9 22 9 12 15 12 15 22\"></polyline>\n</svg>";
      var _Image = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-image\">\n    <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect><circle cx=\"8.5\" cy=\"8.5\" r=\"1.5\"></circle><polyline points=\"21 15 16 10 5 21\"></polyline>\n</svg>";
      var _Inbox = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-inbox\">\n    <polyline points=\"22 12 16 12 14 15 10 15 8 12 2 12\"></polyline><path d=\"M5.45 5.11L2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z\"></path>\n</svg>";
      var _Info = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-info\">\n    <circle cx=\"12\" cy=\"12\" r=\"10\"></circle><line x1=\"12\" y1=\"16\" x2=\"12\" y2=\"12\"></line><line x1=\"12\" y1=\"8\" x2=\"12.01\" y2=\"8\"></line>\n</svg>";
      var _Instagram = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-instagram\">\n    <rect x=\"2\" y=\"2\" width=\"20\" height=\"20\" rx=\"5\" ry=\"5\"></rect><path d=\"M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z\"></path><line x1=\"17.5\" y1=\"6.5\" x2=\"17.51\" y2=\"6.5\"></line>\n</svg>";
      var _Italic = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-italic\">\n    <line x1=\"19\" y1=\"4\" x2=\"10\" y2=\"4\"></line><line x1=\"14\" y1=\"20\" x2=\"5\" y2=\"20\"></line><line x1=\"15\" y1=\"4\" x2=\"9\" y2=\"20\"></line>\n</svg>";
      var _Key = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-key\">\n    <path d=\"M21 2l-2 2m-7.61 7.61a5.5 5.5 0 1 1-7.778 7.778 5.5 5.5 0 0 1 7.777-7.777zm0 0L15.5 7.5m0 0l3 3L22 7l-3-3m-3.5 3.5L19 4\"></path>\n</svg>";
      var _Layers = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-layers\">\n    <polygon points=\"12 2 2 7 12 12 22 7 12 2\"></polygon><polyline points=\"2 17 12 22 22 17\"></polyline><polyline points=\"2 12 12 17 22 12\"></polyline>\n</svg>";
      var _Layout = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-layout\">\n    <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect><line x1=\"3\" y1=\"9\" x2=\"21\" y2=\"9\"></line><line x1=\"9\" y1=\"21\" x2=\"9\" y2=\"9\"></line>\n</svg>";
      var _LifeBuoy = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-life-buoy\">\n    <circle cx=\"12\" cy=\"12\" r=\"10\"></circle><circle cx=\"12\" cy=\"12\" r=\"4\"></circle><line x1=\"4.93\" y1=\"4.93\" x2=\"9.17\" y2=\"9.17\"></line><line x1=\"14.83\" y1=\"14.83\" x2=\"19.07\" y2=\"19.07\"></line><line x1=\"14.83\" y1=\"9.17\" x2=\"19.07\" y2=\"4.93\"></line><line x1=\"14.83\" y1=\"9.17\" x2=\"18.36\" y2=\"5.64\"></line><line x1=\"4.93\" y1=\"19.07\" x2=\"9.17\" y2=\"14.83\"></line>\n</svg>";
      var _Link2 = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-link-2\">\n    <path d=\"M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3\"></path><line x1=\"8\" y1=\"12\" x2=\"16\" y2=\"12\"></line>\n</svg>";
      var _Link = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-link\">\n    <path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path>\n</svg>";
      var _Linkedin = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-linkedin\">\n    <path d=\"M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z\"></path><rect x=\"2\" y=\"9\" width=\"4\" height=\"12\"></rect><circle cx=\"4\" cy=\"4\" r=\"2\"></circle>\n</svg>";
      var _List = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-list\">\n    <line x1=\"8\" y1=\"6\" x2=\"21\" y2=\"6\"></line><line x1=\"8\" y1=\"12\" x2=\"21\" y2=\"12\"></line><line x1=\"8\" y1=\"18\" x2=\"21\" y2=\"18\"></line><line x1=\"3\" y1=\"6\" x2=\"3.01\" y2=\"6\"></line><line x1=\"3\" y1=\"12\" x2=\"3.01\" y2=\"12\"></line><line x1=\"3\" y1=\"18\" x2=\"3.01\" y2=\"18\"></line>\n</svg>";
      var _Loader = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-loader\">\n    <line x1=\"12\" y1=\"2\" x2=\"12\" y2=\"6\"></line><line x1=\"12\" y1=\"18\" x2=\"12\" y2=\"22\"></line><line x1=\"4.93\" y1=\"4.93\" x2=\"7.76\" y2=\"7.76\"></line><line x1=\"16.24\" y1=\"16.24\" x2=\"19.07\" y2=\"19.07\"></line><line x1=\"2\" y1=\"12\" x2=\"6\" y2=\"12\"></line><line x1=\"18\" y1=\"12\" x2=\"22\" y2=\"12\"></line><line x1=\"4.93\" y1=\"19.07\" x2=\"7.76\" y2=\"16.24\"></line><line x1=\"16.24\" y1=\"7.76\" x2=\"19.07\" y2=\"4.93\"></line>\n</svg>";
      var _Lock = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-lock\">\n    <rect x=\"3\" y=\"11\" width=\"18\" height=\"11\" rx=\"2\" ry=\"2\"></rect><path d=\"M7 11V7a5 5 0 0 1 10 0v4\"></path>\n</svg>";
      var _LogIn = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-log-in\">\n    <path d=\"M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4\"></path><polyline points=\"10 17 15 12 10 7\"></polyline><line x1=\"15\" y1=\"12\" x2=\"3\" y2=\"12\"></line>\n</svg>";
      var _LogOut = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-log-out\">\n    <path d=\"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4\"></path><polyline points=\"16 17 21 12 16 7\"></polyline><line x1=\"21\" y1=\"12\" x2=\"9\" y2=\"12\"></line>\n</svg>";
      var _Mail = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-mail\">\n    <path d=\"M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z\"></path><polyline points=\"22,6 12,13 2,6\"></polyline>\n</svg>";
      var _MapPin = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-map-pin\">\n    <path d=\"M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z\"></path><circle cx=\"12\" cy=\"10\" r=\"3\"></circle>\n</svg>";
      var Map = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-map\">\n    <polygon points=\"1 6 1 22 8 18 16 22 23 18 23 2 16 6 8 2 1 6\"></polygon><line x1=\"8\" y1=\"2\" x2=\"8\" y2=\"18\"></line><line x1=\"16\" y1=\"6\" x2=\"16\" y2=\"22\"></line>\n</svg>";
      var _Maximize2 = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-maximize-2\">\n    <polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" y1=\"3\" x2=\"14\" y2=\"10\"></line><line x1=\"3\" y1=\"21\" x2=\"10\" y2=\"14\"></line>\n</svg>";
      var _Maximize = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-maximize\">\n    <path d=\"M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3\"></path>\n</svg>";
      var _Meh = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-meh\">\n    <circle cx=\"12\" cy=\"12\" r=\"10\"></circle><line x1=\"8\" y1=\"15\" x2=\"16\" y2=\"15\"></line><line x1=\"9\" y1=\"9\" x2=\"9.01\" y2=\"9\"></line><line x1=\"15\" y1=\"9\" x2=\"15.01\" y2=\"9\"></line>\n</svg>";
      var _Menu = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-menu\">\n    <line x1=\"3\" y1=\"12\" x2=\"21\" y2=\"12\"></line><line x1=\"3\" y1=\"6\" x2=\"21\" y2=\"6\"></line><line x1=\"3\" y1=\"18\" x2=\"21\" y2=\"18\"></line>\n</svg>";
      var _MessageCircle = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-message-circle\">\n    <path d=\"M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z\"></path>\n</svg>";
      var _MessageSquare = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-message-square\">\n    <path d=\"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z\"></path>\n</svg>";
      var _MicOff = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-mic-off\">\n    <line x1=\"1\" y1=\"1\" x2=\"23\" y2=\"23\"></line><path d=\"M9 9v3a3 3 0 0 0 5.12 2.12M15 9.34V4a3 3 0 0 0-5.94-.6\"></path><path d=\"M17 16.95A7 7 0 0 1 5 12v-2m14 0v2a7 7 0 0 1-.11 1.23\"></path><line x1=\"12\" y1=\"19\" x2=\"12\" y2=\"23\"></line><line x1=\"8\" y1=\"23\" x2=\"16\" y2=\"23\"></line>\n</svg>";
      var _Mic = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-mic\">\n    <path d=\"M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z\"></path><path d=\"M19 10v2a7 7 0 0 1-14 0v-2\"></path><line x1=\"12\" y1=\"19\" x2=\"12\" y2=\"23\"></line><line x1=\"8\" y1=\"23\" x2=\"16\" y2=\"23\"></line>\n</svg>";
      var _Minimize2 = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-minimize-2\">\n    <polyline points=\"4 14 10 14 10 20\"></polyline><polyline points=\"20 10 14 10 14 4\"></polyline><line x1=\"14\" y1=\"10\" x2=\"21\" y2=\"3\"></line><line x1=\"3\" y1=\"21\" x2=\"10\" y2=\"14\"></line>\n</svg>";
      var _Minimize = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-minimize\">\n    <path d=\"M8 3v3a2 2 0 0 1-2 2H3m18 0h-3a2 2 0 0 1-2-2V3m0 18v-3a2 2 0 0 1 2-2h3M3 16h3a2 2 0 0 1 2 2v3\"></path>\n</svg>";
      var _MinusCircle = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-minus-circle\">\n    <circle cx=\"12\" cy=\"12\" r=\"10\"></circle><line x1=\"8\" y1=\"12\" x2=\"16\" y2=\"12\"></line>\n</svg>";
      var _MinusSquare = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-minus-square\">\n    <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect><line x1=\"8\" y1=\"12\" x2=\"16\" y2=\"12\"></line>\n</svg>";
      var _Minus = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-minus\">\n    <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"></line>\n</svg>";
      var _Monitor = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-monitor\">\n    <rect x=\"2\" y=\"3\" width=\"20\" height=\"14\" rx=\"2\" ry=\"2\"></rect><line x1=\"8\" y1=\"21\" x2=\"16\" y2=\"21\"></line><line x1=\"12\" y1=\"17\" x2=\"12\" y2=\"21\"></line>\n</svg>";
      var _Moon = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-moon\">\n    <path d=\"M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z\"></path>\n</svg>";
      var _MoreHorizontal = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-more-horizontal\">\n    <circle cx=\"12\" cy=\"12\" r=\"1\"></circle><circle cx=\"19\" cy=\"12\" r=\"1\"></circle><circle cx=\"5\" cy=\"12\" r=\"1\"></circle>\n</svg>";
      var _MoreVertical = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-more-vertical\">\n    <circle cx=\"12\" cy=\"12\" r=\"1\"></circle><circle cx=\"12\" cy=\"5\" r=\"1\"></circle><circle cx=\"12\" cy=\"19\" r=\"1\"></circle>\n</svg>";
      var _MousePointer = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-mouse-pointer\">\n    <path d=\"M3 3l7.07 16.97 2.51-7.39 7.39-2.51L3 3z\"></path><path d=\"M13 13l6 6\"></path>\n</svg>";
      var _Move = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-move\">\n    <polyline points=\"5 9 2 12 5 15\"></polyline><polyline points=\"9 5 12 2 15 5\"></polyline><polyline points=\"15 19 12 22 9 19\"></polyline><polyline points=\"19 9 22 12 19 15\"></polyline><line x1=\"2\" y1=\"12\" x2=\"22\" y2=\"12\"></line><line x1=\"12\" y1=\"2\" x2=\"12\" y2=\"22\"></line>\n</svg>";
      var _Music = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-music\">\n    <path d=\"M9 18V5l12-2v13\"></path><circle cx=\"6\" cy=\"18\" r=\"3\"></circle><circle cx=\"18\" cy=\"16\" r=\"3\"></circle>\n</svg>";
      var _Navigation2 = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-navigation-2\">\n    <polygon points=\"12 2 19 21 12 17 5 21 12 2\"></polygon>\n</svg>";
      var _Navigation = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-navigation\">\n    <polygon points=\"3 11 22 2 13 21 11 13 3 11\"></polygon>\n</svg>";
      var _Octagon = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-octagon\">\n    <polygon points=\"7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2\"></polygon>\n</svg>";
      var _Package = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-package\">\n    <line x1=\"16.5\" y1=\"9.4\" x2=\"7.5\" y2=\"4.21\"></line><path d=\"M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z\"></path><polyline points=\"3.27 6.96 12 12.01 20.73 6.96\"></polyline><line x1=\"12\" y1=\"22.08\" x2=\"12\" y2=\"12\"></line>\n</svg>";
      var _Paperclip = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-paperclip\">\n    <path d=\"M21.44 11.05l-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66l-9.2 9.19a2 2 0 0 1-2.83-2.83l8.49-8.48\"></path>\n</svg>";
      var _PauseCircle = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-pause-circle\">\n    <circle cx=\"12\" cy=\"12\" r=\"10\"></circle><line x1=\"10\" y1=\"15\" x2=\"10\" y2=\"9\"></line><line x1=\"14\" y1=\"15\" x2=\"14\" y2=\"9\"></line>\n</svg>";
      var _Pause = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-pause\">\n    <rect x=\"6\" y=\"4\" width=\"4\" height=\"16\"></rect><rect x=\"14\" y=\"4\" width=\"4\" height=\"16\"></rect>\n</svg>";
      var _PenTool = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-pen-tool\">\n    <path d=\"M12 19l7-7 3 3-7 7-3-3z\"></path><path d=\"M18 13l-1.5-7.5L2 2l3.5 14.5L13 18l5-5z\"></path><path d=\"M2 2l7.586 7.586\"></path><circle cx=\"11\" cy=\"11\" r=\"2\"></circle>\n</svg>";
      var _Percent = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-percent\">\n    <line x1=\"19\" y1=\"5\" x2=\"5\" y2=\"19\"></line><circle cx=\"6.5\" cy=\"6.5\" r=\"2.5\"></circle><circle cx=\"17.5\" cy=\"17.5\" r=\"2.5\"></circle>\n</svg>";
      var _PhoneCall = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-phone-call\">\n    <path d=\"M15.05 5A5 5 0 0 1 19 8.95M15.05 1A9 9 0 0 1 23 8.94m-1 7.98v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z\"></path>\n</svg>";
      var _PhoneForwarded = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-phone-forwarded\">\n    <polyline points=\"19 1 23 5 19 9\"></polyline><line x1=\"15\" y1=\"5\" x2=\"23\" y2=\"5\"></line><path d=\"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z\"></path>\n</svg>";
      var _PhoneIncoming = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-phone-incoming\">\n    <polyline points=\"16 2 16 8 22 8\"></polyline><line x1=\"23\" y1=\"1\" x2=\"16\" y2=\"8\"></line><path d=\"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z\"></path>\n</svg>";
      var _PhoneMissed = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-phone-missed\">\n    <line x1=\"23\" y1=\"1\" x2=\"17\" y2=\"7\"></line><line x1=\"17\" y1=\"1\" x2=\"23\" y2=\"7\"></line><path d=\"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z\"></path>\n</svg>";
      var _PhoneOff = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-phone-off\">\n    <path d=\"M10.68 13.31a16 16 0 0 0 3.41 2.6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7 2 2 0 0 1 1.72 2v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.42 19.42 0 0 1-3.33-2.67m-2.67-3.34a19.79 19.79 0 0 1-3.07-8.63A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91\"></path><line x1=\"23\" y1=\"1\" x2=\"1\" y2=\"23\"></line>\n</svg>";
      var _PhoneOutgoing = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-phone-outgoing\">\n    <polyline points=\"23 7 23 1 17 1\"></polyline><line x1=\"16\" y1=\"8\" x2=\"23\" y2=\"1\"></line><path d=\"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z\"></path>\n</svg>";
      var _Phone = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-phone\">\n    <path d=\"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z\"></path>\n</svg>";
      var _PieChart = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-pie-chart\">\n    <path d=\"M21.21 15.89A10 10 0 1 1 8 2.83\"></path><path d=\"M22 12A10 10 0 0 0 12 2v10z\"></path>\n</svg>";
      var _PlayCircle = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-play-circle\">\n    <circle cx=\"12\" cy=\"12\" r=\"10\"></circle><polygon points=\"10 8 16 12 10 16 10 8\"></polygon>\n</svg>";
      var _Play = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-play\">\n    <polygon points=\"5 3 19 12 5 21 5 3\"></polygon>\n</svg>";
      var _PlusCircle = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-plus-circle\">\n    <circle cx=\"12\" cy=\"12\" r=\"10\"></circle><line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"16\"></line><line x1=\"8\" y1=\"12\" x2=\"16\" y2=\"12\"></line>\n</svg>";
      var _PlusSquare = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-plus-square\">\n    <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect><line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"16\"></line><line x1=\"8\" y1=\"12\" x2=\"16\" y2=\"12\"></line>\n</svg>";
      var _Plus = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-plus\">\n    <line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\"></line><line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"></line>\n</svg>";
      var _Pocket = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-pocket\">\n    <path d=\"M4 3h16a2 2 0 0 1 2 2v6a10 10 0 0 1-10 10A10 10 0 0 1 2 11V5a2 2 0 0 1 2-2z\"></path><polyline points=\"8 10 12 14 16 10\"></polyline>\n</svg>";
      var _Power = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-power\">\n    <path d=\"M18.36 6.64a9 9 0 1 1-12.73 0\"></path><line x1=\"12\" y1=\"2\" x2=\"12\" y2=\"12\"></line>\n</svg>";
      var _Printer = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-printer\">\n    <polyline points=\"6 9 6 2 18 2 18 9\"></polyline><path d=\"M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2\"></path><rect x=\"6\" y=\"14\" width=\"12\" height=\"8\"></rect>\n</svg>";
      var _Radio = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-radio\">\n    <circle cx=\"12\" cy=\"12\" r=\"2\"></circle><path d=\"M16.24 7.76a6 6 0 0 1 0 8.49m-8.48-.01a6 6 0 0 1 0-8.49m11.31-2.82a10 10 0 0 1 0 14.14m-14.14 0a10 10 0 0 1 0-14.14\"></path>\n</svg>";
      var _RefreshCcw = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-refresh-ccw\">\n    <polyline points=\"1 4 1 10 7 10\"></polyline><polyline points=\"23 20 23 14 17 14\"></polyline><path d=\"M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15\"></path>\n</svg>";
      var _RefreshCw = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-refresh-cw\">\n    <polyline points=\"23 4 23 10 17 10\"></polyline><polyline points=\"1 20 1 14 7 14\"></polyline><path d=\"M3.51 9a9 9 0 0 1 14.85-3.36L23 10M1 14l4.64 4.36A9 9 0 0 0 20.49 15\"></path>\n</svg>";
      var _Repeat = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-repeat\">\n    <polyline points=\"17 1 21 5 17 9\"></polyline><path d=\"M3 11V9a4 4 0 0 1 4-4h14\"></path><polyline points=\"7 23 3 19 7 15\"></polyline><path d=\"M21 13v2a4 4 0 0 1-4 4H3\"></path>\n</svg>";
      var _Rewind = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-rewind\">\n    <polygon points=\"11 19 2 12 11 5 11 19\"></polygon><polygon points=\"22 19 13 12 22 5 22 19\"></polygon>\n</svg>";
      var _RotateCcw = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-rotate-ccw\">\n    <polyline points=\"1 4 1 10 7 10\"></polyline><path d=\"M3.51 15a9 9 0 1 0 2.13-9.36L1 10\"></path>\n</svg>";
      var _RotateCw = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-rotate-cw\">\n    <polyline points=\"23 4 23 10 17 10\"></polyline><path d=\"M20.49 15a9 9 0 1 1-2.12-9.36L23 10\"></path>\n</svg>";
      var _Rss = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-rss\">\n    <path d=\"M4 11a9 9 0 0 1 9 9\"></path><path d=\"M4 4a16 16 0 0 1 16 16\"></path><circle cx=\"5\" cy=\"19\" r=\"1\"></circle>\n</svg>";
      var _Save = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-save\">\n    <path d=\"M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z\"></path><polyline points=\"17 21 17 13 7 13 7 21\"></polyline><polyline points=\"7 3 7 8 15 8\"></polyline>\n</svg>";
      var _Scissors = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-scissors\">\n    <circle cx=\"6\" cy=\"6\" r=\"3\"></circle><circle cx=\"6\" cy=\"18\" r=\"3\"></circle><line x1=\"20\" y1=\"4\" x2=\"8.12\" y2=\"15.88\"></line><line x1=\"14.47\" y1=\"14.48\" x2=\"20\" y2=\"20\"></line><line x1=\"8.12\" y1=\"8.12\" x2=\"12\" y2=\"12\"></line>\n</svg>";
      var _Search = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-search\">\n    <circle cx=\"11\" cy=\"11\" r=\"8\"></circle><line x1=\"21\" y1=\"21\" x2=\"16.65\" y2=\"16.65\"></line>\n</svg>";
      var _Send = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-send\">\n    <line x1=\"22\" y1=\"2\" x2=\"11\" y2=\"13\"></line><polygon points=\"22 2 15 22 11 13 2 9 22 2\"></polygon>\n</svg>";
      var _Server = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-server\">\n    <rect x=\"2\" y=\"2\" width=\"20\" height=\"8\" rx=\"2\" ry=\"2\"></rect><rect x=\"2\" y=\"14\" width=\"20\" height=\"8\" rx=\"2\" ry=\"2\"></rect><line x1=\"6\" y1=\"6\" x2=\"6.01\" y2=\"6\"></line><line x1=\"6\" y1=\"18\" x2=\"6.01\" y2=\"18\"></line>\n</svg>";
      var _Settings = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-settings\">\n    <circle cx=\"12\" cy=\"12\" r=\"3\"></circle><path d=\"M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z\"></path>\n</svg>";
      var _Share2 = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-share-2\">\n    <circle cx=\"18\" cy=\"5\" r=\"3\"></circle><circle cx=\"6\" cy=\"12\" r=\"3\"></circle><circle cx=\"18\" cy=\"19\" r=\"3\"></circle><line x1=\"8.59\" y1=\"13.51\" x2=\"15.42\" y2=\"17.49\"></line><line x1=\"15.41\" y1=\"6.51\" x2=\"8.59\" y2=\"10.49\"></line>\n</svg>";
      var _Share = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-share\">\n    <path d=\"M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8\"></path><polyline points=\"16 6 12 2 8 6\"></polyline><line x1=\"12\" y1=\"2\" x2=\"12\" y2=\"15\"></line>\n</svg>";
      var _ShieldOff = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-shield-off\">\n    <path d=\"M19.69 14a6.9 6.9 0 0 0 .31-2V5l-8-3-3.16 1.18\"></path><path d=\"M4.73 4.73L4 5v7c0 6 8 10 8 10a20.29 20.29 0 0 0 5.62-4.38\"></path><line x1=\"1\" y1=\"1\" x2=\"23\" y2=\"23\"></line>\n</svg>";
      var _Shield = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-shield\">\n    <path d=\"M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z\"></path>\n</svg>";
      var _ShoppingBag = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-shopping-bag\">\n    <path d=\"M6 2L3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4z\"></path><line x1=\"3\" y1=\"6\" x2=\"21\" y2=\"6\"></line><path d=\"M16 10a4 4 0 0 1-8 0\"></path>\n</svg>";
      var _ShoppingCart = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-shopping-cart\">\n    <circle cx=\"9\" cy=\"21\" r=\"1\"></circle><circle cx=\"20\" cy=\"21\" r=\"1\"></circle><path d=\"M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6\"></path>\n</svg>";
      var _Shuffle = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-shuffle\">\n    <polyline points=\"16 3 21 3 21 8\"></polyline><line x1=\"4\" y1=\"20\" x2=\"21\" y2=\"3\"></line><polyline points=\"21 16 21 21 16 21\"></polyline><line x1=\"15\" y1=\"15\" x2=\"21\" y2=\"21\"></line><line x1=\"4\" y1=\"4\" x2=\"9\" y2=\"9\"></line>\n</svg>";
      var _Sidebar = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-sidebar\">\n    <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect><line x1=\"9\" y1=\"3\" x2=\"9\" y2=\"21\"></line>\n</svg>";
      var _SkipBack = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-skip-back\">\n    <polygon points=\"19 20 9 12 19 4 19 20\"></polygon><line x1=\"5\" y1=\"19\" x2=\"5\" y2=\"5\"></line>\n</svg>";
      var _SkipForward = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-skip-forward\">\n    <polygon points=\"5 4 15 12 5 20 5 4\"></polygon><line x1=\"19\" y1=\"5\" x2=\"19\" y2=\"19\"></line>\n</svg>";
      var _Slack = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-slack\">\n    <path d=\"M14.5 10c-.83 0-1.5-.67-1.5-1.5v-5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5v5c0 .83-.67 1.5-1.5 1.5z\"></path><path d=\"M20.5 10H19V8.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5-.67 1.5-1.5 1.5z\"></path><path d=\"M9.5 14c.83 0 1.5.67 1.5 1.5v5c0 .83-.67 1.5-1.5 1.5S8 21.33 8 20.5v-5c0-.83.67-1.5 1.5-1.5z\"></path><path d=\"M3.5 14H5v1.5c0 .83-.67 1.5-1.5 1.5S2 16.33 2 15.5 2.67 14 3.5 14z\"></path><path d=\"M14 14.5c0-.83.67-1.5 1.5-1.5h5c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5h-5c-.83 0-1.5-.67-1.5-1.5z\"></path><path d=\"M15.5 19H14v1.5c0 .83.67 1.5 1.5 1.5s1.5-.67 1.5-1.5-.67-1.5-1.5-1.5z\"></path><path d=\"M10 9.5C10 8.67 9.33 8 8.5 8h-5C2.67 8 2 8.67 2 9.5S2.67 11 3.5 11h5c.83 0 1.5-.67 1.5-1.5z\"></path><path d=\"M8.5 5H10V3.5C10 2.67 9.33 2 8.5 2S7 2.67 7 3.5 7.67 5 8.5 5z\"></path>\n</svg>";
      var _Slash = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-slash\">\n    <circle cx=\"12\" cy=\"12\" r=\"10\"></circle><line x1=\"4.93\" y1=\"4.93\" x2=\"19.07\" y2=\"19.07\"></line>\n</svg>";
      var _Sliders = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-sliders\">\n    <line x1=\"4\" y1=\"21\" x2=\"4\" y2=\"14\"></line><line x1=\"4\" y1=\"10\" x2=\"4\" y2=\"3\"></line><line x1=\"12\" y1=\"21\" x2=\"12\" y2=\"12\"></line><line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"3\"></line><line x1=\"20\" y1=\"21\" x2=\"20\" y2=\"16\"></line><line x1=\"20\" y1=\"12\" x2=\"20\" y2=\"3\"></line><line x1=\"1\" y1=\"14\" x2=\"7\" y2=\"14\"></line><line x1=\"9\" y1=\"8\" x2=\"15\" y2=\"8\"></line><line x1=\"17\" y1=\"16\" x2=\"23\" y2=\"16\"></line>\n</svg>";
      var _Smartphone = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-smartphone\">\n    <rect x=\"5\" y=\"2\" width=\"14\" height=\"20\" rx=\"2\" ry=\"2\"></rect><line x1=\"12\" y1=\"18\" x2=\"12.01\" y2=\"18\"></line>\n</svg>";
      var _Smile = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-smile\">\n    <circle cx=\"12\" cy=\"12\" r=\"10\"></circle><path d=\"M8 14s1.5 2 4 2 4-2 4-2\"></path><line x1=\"9\" y1=\"9\" x2=\"9.01\" y2=\"9\"></line><line x1=\"15\" y1=\"9\" x2=\"15.01\" y2=\"9\"></line>\n</svg>";
      var _Speaker = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-speaker\">\n    <rect x=\"4\" y=\"2\" width=\"16\" height=\"20\" rx=\"2\" ry=\"2\"></rect><circle cx=\"12\" cy=\"14\" r=\"4\"></circle><line x1=\"12\" y1=\"6\" x2=\"12.01\" y2=\"6\"></line>\n</svg>";
      var _Square = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-square\">\n    <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect>\n</svg>";
      var _Star = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-star\">\n    <polygon points=\"12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2\"></polygon>\n</svg>";
      var _StopCircle = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-stop-circle\">\n    <circle cx=\"12\" cy=\"12\" r=\"10\"></circle><rect x=\"9\" y=\"9\" width=\"6\" height=\"6\"></rect>\n</svg>";
      var _Sun = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-sun\">\n    <circle cx=\"12\" cy=\"12\" r=\"5\"></circle><line x1=\"12\" y1=\"1\" x2=\"12\" y2=\"3\"></line><line x1=\"12\" y1=\"21\" x2=\"12\" y2=\"23\"></line><line x1=\"4.22\" y1=\"4.22\" x2=\"5.64\" y2=\"5.64\"></line><line x1=\"18.36\" y1=\"18.36\" x2=\"19.78\" y2=\"19.78\"></line><line x1=\"1\" y1=\"12\" x2=\"3\" y2=\"12\"></line><line x1=\"21\" y1=\"12\" x2=\"23\" y2=\"12\"></line><line x1=\"4.22\" y1=\"19.78\" x2=\"5.64\" y2=\"18.36\"></line><line x1=\"18.36\" y1=\"5.64\" x2=\"19.78\" y2=\"4.22\"></line>\n</svg>";
      var _Sunrise = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-sunrise\">\n    <path d=\"M17 18a5 5 0 0 0-10 0\"></path><line x1=\"12\" y1=\"2\" x2=\"12\" y2=\"9\"></line><line x1=\"4.22\" y1=\"10.22\" x2=\"5.64\" y2=\"11.64\"></line><line x1=\"1\" y1=\"18\" x2=\"3\" y2=\"18\"></line><line x1=\"21\" y1=\"18\" x2=\"23\" y2=\"18\"></line><line x1=\"18.36\" y1=\"11.64\" x2=\"19.78\" y2=\"10.22\"></line><line x1=\"23\" y1=\"22\" x2=\"1\" y2=\"22\"></line><polyline points=\"8 6 12 2 16 6\"></polyline>\n</svg>";
      var _Sunset = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-sunset\">\n    <path d=\"M17 18a5 5 0 0 0-10 0\"></path><line x1=\"12\" y1=\"9\" x2=\"12\" y2=\"2\"></line><line x1=\"4.22\" y1=\"10.22\" x2=\"5.64\" y2=\"11.64\"></line><line x1=\"1\" y1=\"18\" x2=\"3\" y2=\"18\"></line><line x1=\"21\" y1=\"18\" x2=\"23\" y2=\"18\"></line><line x1=\"18.36\" y1=\"11.64\" x2=\"19.78\" y2=\"10.22\"></line><line x1=\"23\" y1=\"22\" x2=\"1\" y2=\"22\"></line><polyline points=\"16 5 12 9 8 5\"></polyline>\n</svg>";
      var _Tablet = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-tablet\">\n    <rect x=\"4\" y=\"2\" width=\"16\" height=\"20\" rx=\"2\" ry=\"2\"></rect><line x1=\"12\" y1=\"18\" x2=\"12.01\" y2=\"18\"></line>\n</svg>";
      var _Tag = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-tag\">\n    <path d=\"M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z\"></path><line x1=\"7\" y1=\"7\" x2=\"7.01\" y2=\"7\"></line>\n</svg>";
      var _Target = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-target\">\n    <circle cx=\"12\" cy=\"12\" r=\"10\"></circle><circle cx=\"12\" cy=\"12\" r=\"6\"></circle><circle cx=\"12\" cy=\"12\" r=\"2\"></circle>\n</svg>";
      var _Terminal = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-terminal\">\n    <polyline points=\"4 17 10 11 4 5\"></polyline><line x1=\"12\" y1=\"19\" x2=\"20\" y2=\"19\"></line>\n</svg>";
      var _Thermometer = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-thermometer\">\n    <path d=\"M14 14.76V3.5a2.5 2.5 0 0 0-5 0v11.26a4.5 4.5 0 1 0 5 0z\"></path>\n</svg>";
      var _ThumbsDown = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-thumbs-down\">\n    <path d=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"></path>\n</svg>";
      var _ThumbsUp = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-thumbs-up\">\n    <path d=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"></path>\n</svg>";
      var _ToggleLeft = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-toggle-left\">\n    <rect x=\"1\" y=\"5\" width=\"22\" height=\"14\" rx=\"7\" ry=\"7\"></rect><circle cx=\"8\" cy=\"12\" r=\"3\"></circle>\n</svg>";
      var _ToggleRight = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-toggle-right\">\n    <rect x=\"1\" y=\"5\" width=\"22\" height=\"14\" rx=\"7\" ry=\"7\"></rect><circle cx=\"16\" cy=\"12\" r=\"3\"></circle>\n</svg>";
      var _Tool = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-tool\">\n    <path d=\"M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z\"></path>\n</svg>";
      var _Trash2 = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-trash-2\">\n    <polyline points=\"3 6 5 6 21 6\"></polyline><path d=\"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2\"></path><line x1=\"10\" y1=\"11\" x2=\"10\" y2=\"17\"></line><line x1=\"14\" y1=\"11\" x2=\"14\" y2=\"17\"></line>\n</svg>";
      var _Trash = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-trash\">\n    <polyline points=\"3 6 5 6 21 6\"></polyline><path d=\"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2\"></path>\n</svg>";
      var _Trello = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-trello\">\n    <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect><rect x=\"7\" y=\"7\" width=\"3\" height=\"9\"></rect><rect x=\"14\" y=\"7\" width=\"3\" height=\"5\"></rect>\n</svg>";
      var _TrendingDown = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-trending-down\">\n    <polyline points=\"23 18 13.5 8.5 8.5 13.5 1 6\"></polyline><polyline points=\"17 18 23 18 23 12\"></polyline>\n</svg>";
      var _TrendingUp = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-trending-up\">\n    <polyline points=\"23 6 13.5 15.5 8.5 10.5 1 18\"></polyline><polyline points=\"17 6 23 6 23 12\"></polyline>\n</svg>";
      var _Triangle = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-triangle\">\n    <path d=\"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"></path>\n</svg>";
      var _Truck = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-truck\">\n    <rect x=\"1\" y=\"3\" width=\"15\" height=\"13\"></rect><polygon points=\"16 8 20 8 23 11 23 16 16 16 16 8\"></polygon><circle cx=\"5.5\" cy=\"18.5\" r=\"2.5\"></circle><circle cx=\"18.5\" cy=\"18.5\" r=\"2.5\"></circle>\n</svg>";
      var _Tv = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-tv\">\n    <rect x=\"2\" y=\"7\" width=\"20\" height=\"15\" rx=\"2\" ry=\"2\"></rect><polyline points=\"17 2 12 7 7 2\"></polyline>\n</svg>";
      var _Twitch = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-twitch\">\n    <path d=\"M21 2H3v16h5v4l4-4h5l4-4V2zm-10 9V7m5 4V7\"></path>\n</svg>";
      var _Twitter = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-twitter\">\n    <path d=\"M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z\"></path>\n</svg>";
      var _Type = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-type\">\n    <polyline points=\"4 7 4 4 20 4 20 7\"></polyline><line x1=\"9\" y1=\"20\" x2=\"15\" y2=\"20\"></line><line x1=\"12\" y1=\"4\" x2=\"12\" y2=\"20\"></line>\n</svg>";
      var _Umbrella = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-umbrella\">\n    <path d=\"M23 12a11.05 11.05 0 0 0-22 0zm-5 7a3 3 0 0 1-6 0v-7\"></path>\n</svg>";
      var _Underline = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-underline\">\n    <path d=\"M6 3v7a6 6 0 0 0 6 6 6 6 0 0 0 6-6V3\"></path><line x1=\"4\" y1=\"21\" x2=\"20\" y2=\"21\"></line>\n</svg>";
      var _Unlock = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-unlock\">\n    <rect x=\"3\" y=\"11\" width=\"18\" height=\"11\" rx=\"2\" ry=\"2\"></rect><path d=\"M7 11V7a5 5 0 0 1 9.9-1\"></path>\n</svg>";
      var _UploadCloud = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-upload-cloud\">\n    <polyline points=\"16 16 12 12 8 16\"></polyline><line x1=\"12\" y1=\"12\" x2=\"12\" y2=\"21\"></line><path d=\"M20.39 18.39A5 5 0 0 0 18 9h-1.26A8 8 0 1 0 3 16.3\"></path><polyline points=\"16 16 12 12 8 16\"></polyline>\n</svg>";
      var _Upload = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-upload\">\n    <path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\"></path><polyline points=\"17 8 12 3 7 8\"></polyline><line x1=\"12\" y1=\"3\" x2=\"12\" y2=\"15\"></line>\n</svg>";
      var _UserCheck = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-user-check\">\n    <path d=\"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2\"></path><circle cx=\"8.5\" cy=\"7\" r=\"4\"></circle><polyline points=\"17 11 19 13 23 9\"></polyline>\n</svg>";
      var _UserMinus = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-user-minus\">\n    <path d=\"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2\"></path><circle cx=\"8.5\" cy=\"7\" r=\"4\"></circle><line x1=\"23\" y1=\"11\" x2=\"17\" y2=\"11\"></line>\n</svg>";
      var _UserPlus = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-user-plus\">\n    <path d=\"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2\"></path><circle cx=\"8.5\" cy=\"7\" r=\"4\"></circle><line x1=\"20\" y1=\"8\" x2=\"20\" y2=\"14\"></line><line x1=\"23\" y1=\"11\" x2=\"17\" y2=\"11\"></line>\n</svg>";
      var _UserX = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-user-x\">\n    <path d=\"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2\"></path><circle cx=\"8.5\" cy=\"7\" r=\"4\"></circle><line x1=\"18\" y1=\"8\" x2=\"23\" y2=\"13\"></line><line x1=\"23\" y1=\"8\" x2=\"18\" y2=\"13\"></line>\n</svg>";
      var _User = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-user\">\n    <path d=\"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2\"></path><circle cx=\"12\" cy=\"7\" r=\"4\"></circle>\n</svg>";
      var _Users = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-users\">\n    <path d=\"M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2\"></path><circle cx=\"9\" cy=\"7\" r=\"4\"></circle><path d=\"M23 21v-2a4 4 0 0 0-3-3.87\"></path><path d=\"M16 3.13a4 4 0 0 1 0 7.75\"></path>\n</svg>";
      var _VideoOff = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-video-off\">\n    <path d=\"M16 16v1a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h2m5.66 0H14a2 2 0 0 1 2 2v3.34l1 1L23 7v10\"></path><line x1=\"1\" y1=\"1\" x2=\"23\" y2=\"23\"></line>\n</svg>";
      var _Video = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-video\">\n    <polygon points=\"23 7 16 12 23 17 23 7\"></polygon><rect x=\"1\" y=\"5\" width=\"15\" height=\"14\" rx=\"2\" ry=\"2\"></rect>\n</svg>";
      var _Voicemail = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-voicemail\">\n    <circle cx=\"5.5\" cy=\"11.5\" r=\"4.5\"></circle><circle cx=\"18.5\" cy=\"11.5\" r=\"4.5\"></circle><line x1=\"5.5\" y1=\"16\" x2=\"18.5\" y2=\"16\"></line>\n</svg>";
      var _Volume2 = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-volume-1\">\n    <polygon points=\"11 5 6 9 2 9 2 15 6 15 11 19 11 5\"></polygon><path d=\"M15.54 8.46a5 5 0 0 1 0 7.07\"></path>\n</svg>";
      var _Volume3 = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-volume-2\">\n    <polygon points=\"11 5 6 9 2 9 2 15 6 15 11 19 11 5\"></polygon><path d=\"M19.07 4.93a10 10 0 0 1 0 14.14M15.54 8.46a5 5 0 0 1 0 7.07\"></path>\n</svg>";
      var _VolumeX = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-volume-x\">\n    <polygon points=\"11 5 6 9 2 9 2 15 6 15 11 19 11 5\"></polygon><line x1=\"23\" y1=\"9\" x2=\"17\" y2=\"15\"></line><line x1=\"17\" y1=\"9\" x2=\"23\" y2=\"15\"></line>\n</svg>";
      var _Volume = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-volume\">\n    <polygon points=\"11 5 6 9 2 9 2 15 6 15 11 19 11 5\"></polygon>\n</svg>";
      var _Watch = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-watch\">\n    <circle cx=\"12\" cy=\"12\" r=\"7\"></circle><polyline points=\"12 9 12 12 13.5 13.5\"></polyline><path d=\"M16.51 17.35l-.35 3.83a2 2 0 0 1-2 1.82H9.83a2 2 0 0 1-2-1.82l-.35-3.83m.01-10.7l.35-3.83A2 2 0 0 1 9.83 1h4.35a2 2 0 0 1 2 1.82l.35 3.83\"></path>\n</svg>";
      var _WifiOff = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-wifi-off\">\n    <line x1=\"1\" y1=\"1\" x2=\"23\" y2=\"23\"></line><path d=\"M16.72 11.06A10.94 10.94 0 0 1 19 12.55\"></path><path d=\"M5 12.55a10.94 10.94 0 0 1 5.17-2.39\"></path><path d=\"M10.71 5.05A16 16 0 0 1 22.58 9\"></path><path d=\"M1.42 9a15.91 15.91 0 0 1 4.7-2.88\"></path><path d=\"M8.53 16.11a6 6 0 0 1 6.95 0\"></path><line x1=\"12\" y1=\"20\" x2=\"12.01\" y2=\"20\"></line>\n</svg>";
      var _Wifi = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-wifi\">\n    <path d=\"M5 12.55a11 11 0 0 1 14.08 0\"></path><path d=\"M1.42 9a16 16 0 0 1 21.16 0\"></path><path d=\"M8.53 16.11a6 6 0 0 1 6.95 0\"></path><line x1=\"12\" y1=\"20\" x2=\"12.01\" y2=\"20\"></line>\n</svg>";
      var _Wind = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-wind\">\n    <path d=\"M9.59 4.59A2 2 0 1 1 11 8H2m10.59 11.41A2 2 0 1 0 14 16H2m15.73-8.27A2.5 2.5 0 1 1 19.5 12H2\"></path>\n</svg>";
      var _XCircle = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-x-circle\">\n    <circle cx=\"12\" cy=\"12\" r=\"10\"></circle><line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\"></line><line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\"></line>\n</svg>";
      var _XOctagon = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-x-octagon\">\n    <polygon points=\"7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2\"></polygon><line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\"></line><line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\"></line>\n</svg>";
      var _XSquare = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-x-square\">\n    <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect><line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\"></line><line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\"></line>\n</svg>";
      var _X2 = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-x\">\n    <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line><line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\n</svg>";
      var _Youtube = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-youtube\">\n    <path d=\"M22.54 6.42a2.78 2.78 0 0 0-1.94-2C18.88 4 12 4 12 4s-6.88 0-8.6.46a2.78 2.78 0 0 0-1.94 2A29 29 0 0 0 1 11.75a29 29 0 0 0 .46 5.33A2.78 2.78 0 0 0 3.4 19c1.72.46 8.6.46 8.6.46s6.88 0 8.6-.46a2.78 2.78 0 0 0 1.94-2 29 29 0 0 0 .46-5.25 29 29 0 0 0-.46-5.33z\"></path><polygon points=\"9.75 15.02 15.5 11.75 9.75 8.48 9.75 15.02\"></polygon>\n</svg>";
      var _ZapOff = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-zap-off\">\n    <polyline points=\"12.41 6.75 13 2 10.57 4.92\"></polyline><polyline points=\"18.57 12.91 21 10 15.66 10\"></polyline><polyline points=\"8 8 3 14 12 14 11 22 16 16\"></polyline><line x1=\"1\" y1=\"1\" x2=\"23\" y2=\"23\"></line>\n</svg>";
      var _Zap = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-zap\">\n    <polygon points=\"13 2 3 14 12 14 11 22 21 10 12 10 13 2\"></polygon>\n</svg>";
      var _ZoomIn = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-zoom-in\">\n    <circle cx=\"11\" cy=\"11\" r=\"8\"></circle><line x1=\"21\" y1=\"21\" x2=\"16.65\" y2=\"16.65\"></line><line x1=\"11\" y1=\"8\" x2=\"11\" y2=\"14\"></line><line x1=\"8\" y1=\"11\" x2=\"14\" y2=\"11\"></line>\n</svg>";
      var _ZoomOut = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"feather feather-zoom-out\">\n    <circle cx=\"11\" cy=\"11\" r=\"8\"></circle><line x1=\"21\" y1=\"21\" x2=\"16.65\" y2=\"16.65\"></line><line x1=\"8\" y1=\"11\" x2=\"14\" y2=\"11\"></line>\n</svg>";
      var _allIcons = {
        Activity: _Activity,
        Airplay: _Airplay,
        AlertCircle: _AlertCircle,
        AlertOctagon: _AlertOctagon,
        AlertTriangle: _AlertTriangle,
        AlignCenter: _AlignCenter,
        AlignJustify: _AlignJustify,
        AlignLeft: _AlignLeft,
        AlignRight: _AlignRight,
        Anchor: _Anchor,
        Aperture: _Aperture,
        Archive: _Archive,
        ArrowDownCircle: _ArrowDownCircle,
        ArrowDownLeft: _ArrowDownLeft,
        ArrowDownRight: _ArrowDownRight,
        ArrowDown: _ArrowDown,
        ArrowLeftCircle: _ArrowLeftCircle,
        ArrowLeft: _ArrowLeft,
        ArrowRightCircle: _ArrowRightCircle,
        ArrowRight: _ArrowRight,
        ArrowUpCircle: _ArrowUpCircle,
        ArrowUpLeft: _ArrowUpLeft,
        ArrowUpRight: _ArrowUpRight,
        ArrowUp: _ArrowUp,
        AtSign: _AtSign,
        Award: _Award,
        BarChart2: _BarChart2,
        BarChart: _BarChart,
        BatteryCharging: _BatteryCharging,
        Battery: _Battery,
        BellOff: _BellOff,
        Bell: _Bell,
        Bluetooth: _Bluetooth,
        Bold: _Bold,
        BookOpen: _BookOpen,
        Book: _Book,
        Bookmark: _Bookmark,
        Box: _Box,
        Briefcase: _Briefcase,
        Calendar: _Calendar,
        CameraOff: _CameraOff,
        Camera: _Camera,
        Cast: _Cast,
        CheckCircle: _CheckCircle,
        CheckSquare: _CheckSquare,
        Check: _Check,
        ChevronDown: _ChevronDown,
        ChevronLeft: _ChevronLeft,
        ChevronRight: _ChevronRight,
        ChevronUp: _ChevronUp,
        ChevronsDown: _ChevronsDown,
        ChevronsLeft: _ChevronsLeft,
        ChevronsRight: _ChevronsRight,
        ChevronsUp: _ChevronsUp,
        Chrome: _Chrome,
        Circle: _Circle,
        Clipboard: _Clipboard,
        Clock: _Clock,
        CloudDrizzle: _CloudDrizzle,
        CloudLightning: _CloudLightning,
        CloudOff: _CloudOff,
        CloudRain: _CloudRain,
        CloudSnow: _CloudSnow,
        Cloud: _Cloud,
        Code: _Code,
        Codepen: _Codepen,
        Codesandbox: _Codesandbox,
        Coffee: _Coffee,
        Columns: _Columns,
        Command: _Command,
        Compass: _Compass,
        Copy: _Copy,
        CornerDownLeft: _CornerDownLeft,
        CornerDownRight: _CornerDownRight,
        CornerLeftDown: _CornerLeftDown,
        CornerLeftUp: _CornerLeftUp,
        CornerRightDown: _CornerRightDown,
        CornerRightUp: _CornerRightUp,
        CornerUpLeft: _CornerUpLeft,
        CornerUpRight: _CornerUpRight,
        Cpu: _Cpu,
        CreditCard: _CreditCard,
        Crop: _Crop,
        Crosshair: _Crosshair,
        Database: _Database,
        Delete: _Delete,
        Disc: _Disc,
        DollarSign: _DollarSign,
        DownloadCloud: _DownloadCloud,
        Download: _Download,
        Droplet: _Droplet,
        Edit2: _Edit2,
        Edit3: _Edit3,
        Edit: _Edit,
        ExternalLink: _ExternalLink,
        EyeOff: _EyeOff,
        Eye: _Eye,
        Facebook: _Facebook,
        FastForward: _FastForward,
        Feather: _Feather,
        Figma: _Figma,
        FileMinus: _FileMinus,
        FilePlus: _FilePlus,
        FileText: _FileText,
        File: _File,
        Film: _Film,
        Filter: _Filter,
        Flag: _Flag,
        FolderMinus: _FolderMinus,
        FolderPlus: _FolderPlus,
        Folder: _Folder,
        Framer: _Framer,
        Frown: _Frown,
        Gift: _Gift,
        GitBranch: _GitBranch,
        GitCommit: _GitCommit,
        GitMerge: _GitMerge,
        GitPullRequest: _GitPullRequest,
        Github: _Github,
        Gitlab: _Gitlab,
        Globe: _Globe,
        Grid: _Grid,
        HardDrive: _HardDrive,
        Hash: _Hash,
        Headphones: _Headphones,
        Heart: _Heart,
        HelpCircle: _HelpCircle,
        Hexagon: _Hexagon,
        Home: _Home,
        Image: _Image,
        Inbox: _Inbox,
        Info: _Info,
        Instagram: _Instagram,
        Italic: _Italic,
        Key: _Key,
        Layers: _Layers,
        Layout: _Layout,
        LifeBuoy: _LifeBuoy,
        Link2: _Link2,
        Link: _Link,
        Linkedin: _Linkedin,
        List: _List,
        Loader: _Loader,
        Lock: _Lock,
        LogIn: _LogIn,
        LogOut: _LogOut,
        Mail: _Mail,
        MapPin: _MapPin,
        Map: Map,
        Maximize2: _Maximize2,
        Maximize: _Maximize,
        Meh: _Meh,
        Menu: _Menu,
        MessageCircle: _MessageCircle,
        MessageSquare: _MessageSquare,
        MicOff: _MicOff,
        Mic: _Mic,
        Minimize2: _Minimize2,
        Minimize: _Minimize,
        MinusCircle: _MinusCircle,
        MinusSquare: _MinusSquare,
        Minus: _Minus,
        Monitor: _Monitor,
        Moon: _Moon,
        MoreHorizontal: _MoreHorizontal,
        MoreVertical: _MoreVertical,
        MousePointer: _MousePointer,
        Move: _Move,
        Music: _Music,
        Navigation2: _Navigation2,
        Navigation: _Navigation,
        Octagon: _Octagon,
        Package: _Package,
        Paperclip: _Paperclip,
        PauseCircle: _PauseCircle,
        Pause: _Pause,
        PenTool: _PenTool,
        Percent: _Percent,
        PhoneCall: _PhoneCall,
        PhoneForwarded: _PhoneForwarded,
        PhoneIncoming: _PhoneIncoming,
        PhoneMissed: _PhoneMissed,
        PhoneOff: _PhoneOff,
        PhoneOutgoing: _PhoneOutgoing,
        Phone: _Phone,
        PieChart: _PieChart,
        PlayCircle: _PlayCircle,
        Play: _Play,
        PlusCircle: _PlusCircle,
        PlusSquare: _PlusSquare,
        Plus: _Plus,
        Pocket: _Pocket,
        Power: _Power,
        Printer: _Printer,
        Radio: _Radio,
        RefreshCcw: _RefreshCcw,
        RefreshCw: _RefreshCw,
        Repeat: _Repeat,
        Rewind: _Rewind,
        RotateCcw: _RotateCcw,
        RotateCw: _RotateCw,
        Rss: _Rss,
        Save: _Save,
        Scissors: _Scissors,
        Search: _Search,
        Send: _Send,
        Server: _Server,
        Settings: _Settings,
        Share2: _Share2,
        Share: _Share,
        ShieldOff: _ShieldOff,
        Shield: _Shield,
        ShoppingBag: _ShoppingBag,
        ShoppingCart: _ShoppingCart,
        Shuffle: _Shuffle,
        Sidebar: _Sidebar,
        SkipBack: _SkipBack,
        SkipForward: _SkipForward,
        Slack: _Slack,
        Slash: _Slash,
        Sliders: _Sliders,
        Smartphone: _Smartphone,
        Smile: _Smile,
        Speaker: _Speaker,
        Square: _Square,
        Star: _Star,
        StopCircle: _StopCircle,
        Sun: _Sun,
        Sunrise: _Sunrise,
        Sunset: _Sunset,
        Tablet: _Tablet,
        Tag: _Tag,
        Target: _Target,
        Terminal: _Terminal,
        Thermometer: _Thermometer,
        ThumbsDown: _ThumbsDown,
        ThumbsUp: _ThumbsUp,
        ToggleLeft: _ToggleLeft,
        ToggleRight: _ToggleRight,
        Tool: _Tool,
        Trash2: _Trash2,
        Trash: _Trash,
        Trello: _Trello,
        TrendingDown: _TrendingDown,
        TrendingUp: _TrendingUp,
        Triangle: _Triangle,
        Truck: _Truck,
        Tv: _Tv,
        Twitch: _Twitch,
        Twitter: _Twitter,
        Type: _Type,
        Umbrella: _Umbrella,
        Underline: _Underline,
        Unlock: _Unlock,
        UploadCloud: _UploadCloud,
        Upload: _Upload,
        UserCheck: _UserCheck,
        UserMinus: _UserMinus,
        UserPlus: _UserPlus,
        UserX: _UserX,
        User: _User,
        Users: _Users,
        VideoOff: _VideoOff,
        Video: _Video,
        Voicemail: _Voicemail,
        Volume1: _Volume2,
        Volume2: _Volume3,
        VolumeX: _VolumeX,
        Volume: _Volume,
        Watch: _Watch,
        WifiOff: _WifiOff,
        Wifi: _Wifi,
        Wind: _Wind,
        XCircle: _XCircle,
        XOctagon: _XOctagon,
        XSquare: _XSquare,
        X: _X2,
        Youtube: _Youtube,
        ZapOff: _ZapOff,
        Zap: _Zap,
        ZoomIn: _ZoomIn,
        ZoomOut: _ZoomOut
      };
      /**
       * Generated bundle index. Do not edit.
       */

      /***/
    },

    /***/
    54536:
    /*!*******************************************************************************!*\
      !*** ./node_modules/angular-feather/__ivy_ngcc__/fesm2015/angular-feather.js ***!
      \*******************************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "FeatherComponent": function FeatherComponent() {
          return (
            /* binding */
            _FeatherComponent
          );
        },

        /* harmony export */
        "FeatherModule": function FeatherModule() {
          return (
            /* binding */
            _FeatherModule
          );
        },

        /* harmony export */
        "ɵa": function ɵa() {
          return (
            /* binding */
            Icons
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      2316);

      var _c0 = ["*"];

      var Icons = function Icons(icons) {
        _classCallCheck(this, Icons);

        this.icons = icons;
      };

      function uppercamelcase(str) {
        return str.toLowerCase().replace(/(?:^\w|[A-Z]|\b\w)/g, function (firstLetter) {
          return firstLetter.toUpperCase();
        }).replace(/[-_]/g, '');
      }

      var _FeatherComponent = /*#__PURE__*/function () {
        function _FeatherComponent(elem, changeDetector, icons) {
          _classCallCheck(this, _FeatherComponent);

          this.elem = elem;
          this.changeDetector = changeDetector;
          this.icons = icons;
        }

        _createClass(_FeatherComponent, [{
          key: "ngOnChanges",
          value: function ngOnChanges(changes) {
            // icons are provided as an array of objects because of "multi: true"
            var icons = Object.assign.apply(Object, [{}].concat(_toConsumableArray(this.icons)));
            var svg = icons[uppercamelcase(changes.name.currentValue)] || '';

            if (!svg) {
              console.warn("Icon not found: ".concat(changes.name.currentValue, "\n") + "Refer to documentation on https://github.com/michaelbazos/angular-feather");
            }

            this.elem.nativeElement.innerHTML = svg;
            this.changeDetector.markForCheck();
          }
        }]);

        return _FeatherComponent;
      }();

      _FeatherComponent.ɵfac = function FeatherComponent_Factory(t) {
        return new (t || _FeatherComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](Icons));
      };

      _FeatherComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: _FeatherComponent,
        selectors: [["i-feather"], ["feather-icon"]],
        inputs: {
          name: "name"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]],
        ngContentSelectors: _c0,
        decls: 1,
        vars: 0,
        template: function FeatherComponent_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](0);
          }
        },
        styles: ["[_nghost-%COMP%]{display:inline-block;fill:none;height:24px;stroke:currentColor;stroke-linecap:round;stroke-linejoin:round;stroke-width:2px;width:24px}"]
      });

      _FeatherComponent.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
            args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef]
          }]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
            args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef]
          }]
        }, {
          type: Icons,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
            args: [Icons]
          }]
        }];
      };

      _FeatherComponent.propDecorators = {
        name: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_FeatherComponent, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
          args: [{
            // tslint:disable-next-line:component-selector
            selector: 'i-feather, feather-icon',
            template: "<ng-content></ng-content>\n",
            styles: [":host{display:inline-block;fill:none;height:24px;stroke:currentColor;stroke-linecap:round;stroke-linejoin:round;stroke-width:2px;width:24px}"]
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
              args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef]
            }]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
              args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef]
            }]
          }, {
            type: Icons,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
              args: [Icons]
            }]
          }];
        }, {
          name: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }]
        });
      })();

      var _FeatherModule = /*#__PURE__*/function () {
        function _FeatherModule(icons) {
          _classCallCheck(this, _FeatherModule);

          this.icons = icons;

          if (!this.icons) {
            throw new Error("No icon provided. Make sure to use 'FeatherModule.pick({ ... })' when importing the module\n" + "Refer to documentation on https://github.com/michaelbazos/angular-feather");
          }
        }

        _createClass(_FeatherModule, null, [{
          key: "pick",
          value: function pick(icons) {
            return {
              ngModule: _FeatherModule,
              providers: [{
                provide: Icons,
                multi: true,
                useValue: icons
              }]
            };
          }
        }]);

        return _FeatherModule;
      }();

      _FeatherModule.ɵfac = function FeatherModule_Factory(t) {
        return new (t || _FeatherModule)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](Icons, 8));
      };

      _FeatherModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: _FeatherModule
      });
      _FeatherModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({});

      _FeatherModule.ctorParameters = function () {
        return [{
          type: Icons,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_FeatherModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
          args: [{
            declarations: [_FeatherComponent],
            exports: [_FeatherComponent]
          }]
        }], function () {
          return [{
            type: Icons,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
            }]
          }];
        }, null);
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](_FeatherModule, {
          declarations: [_FeatherComponent],
          exports: [_FeatherComponent]
        });
      })();
      /*
       * Public API Surface of angular-feather
       */

      /**
       * Generated bundle index. Do not edit.
       */

      /***/

    },

    /***/
    82516:
    /*!*********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/observable/fromEvent.js ***!
      \*********************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "fromEvent": function fromEvent() {
          return (
            /* binding */
            _fromEvent
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ../Observable */
      25160);
      /* harmony import */


      var _util_isArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../util/isArray */
      49861);
      /* harmony import */


      var _util_isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../util/isFunction */
      80018);
      /* harmony import */


      var _operators_map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../operators/map */
      33927);

      var toString = function () {
        return Object.prototype.toString;
      }();

      function _fromEvent(target, eventName, options, resultSelector) {
        if ((0, _util_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(options)) {
          resultSelector = options;
          options = undefined;
        }

        if (resultSelector) {
          return _fromEvent(target, eventName, options).pipe((0, _operators_map__WEBPACK_IMPORTED_MODULE_1__.map)(function (args) {
            return (0, _util_isArray__WEBPACK_IMPORTED_MODULE_2__.isArray)(args) ? resultSelector.apply(void 0, _toConsumableArray(args)) : resultSelector(args);
          }));
        }

        return new _Observable__WEBPACK_IMPORTED_MODULE_3__.Observable(function (subscriber) {
          function handler(e) {
            if (arguments.length > 1) {
              subscriber.next(Array.prototype.slice.call(arguments));
            } else {
              subscriber.next(e);
            }
          }

          setupSubscription(target, eventName, handler, subscriber, options);
        });
      }

      function setupSubscription(sourceObj, eventName, handler, subscriber, options) {
        var unsubscribe;

        if (isEventTarget(sourceObj)) {
          var source = sourceObj;
          sourceObj.addEventListener(eventName, handler, options);

          unsubscribe = function unsubscribe() {
            return source.removeEventListener(eventName, handler, options);
          };
        } else if (isJQueryStyleEventEmitter(sourceObj)) {
          var _source = sourceObj;
          sourceObj.on(eventName, handler);

          unsubscribe = function unsubscribe() {
            return _source.off(eventName, handler);
          };
        } else if (isNodeStyleEventEmitter(sourceObj)) {
          var _source2 = sourceObj;
          sourceObj.addListener(eventName, handler);

          unsubscribe = function unsubscribe() {
            return _source2.removeListener(eventName, handler);
          };
        } else if (sourceObj && sourceObj.length) {
          for (var i = 0, len = sourceObj.length; i < len; i++) {
            setupSubscription(sourceObj[i], eventName, handler, subscriber, options);
          }
        } else {
          throw new TypeError('Invalid event target');
        }

        subscriber.add(unsubscribe);
      }

      function isNodeStyleEventEmitter(sourceObj) {
        return sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';
      }

      function isJQueryStyleEventEmitter(sourceObj) {
        return sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';
      }

      function isEventTarget(sourceObj) {
        return sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';
      }
      /***/

    },

    /***/
    12702:
    /*!*****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/observable/timer.js ***!
      \*****************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "timer": function timer() {
          return (
            /* binding */
            _timer
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ../Observable */
      25160);
      /* harmony import */


      var _scheduler_async__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../scheduler/async */
      32606);
      /* harmony import */


      var _util_isNumeric__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../util/isNumeric */
      82867);
      /* harmony import */


      var _util_isScheduler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../util/isScheduler */
      86770);

      function _timer() {
        var dueTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var periodOrScheduler = arguments.length > 1 ? arguments[1] : undefined;
        var scheduler = arguments.length > 2 ? arguments[2] : undefined;
        var period = -1;

        if ((0, _util_isNumeric__WEBPACK_IMPORTED_MODULE_0__.isNumeric)(periodOrScheduler)) {
          period = Number(periodOrScheduler) < 1 && 1 || Number(periodOrScheduler);
        } else if ((0, _util_isScheduler__WEBPACK_IMPORTED_MODULE_1__.isScheduler)(periodOrScheduler)) {
          scheduler = periodOrScheduler;
        }

        if (!(0, _util_isScheduler__WEBPACK_IMPORTED_MODULE_1__.isScheduler)(scheduler)) {
          scheduler = _scheduler_async__WEBPACK_IMPORTED_MODULE_2__.async;
        }

        return new _Observable__WEBPACK_IMPORTED_MODULE_3__.Observable(function (subscriber) {
          var due = (0, _util_isNumeric__WEBPACK_IMPORTED_MODULE_0__.isNumeric)(dueTime) ? dueTime : +dueTime - scheduler.now();
          return scheduler.schedule(dispatch, due, {
            index: 0,
            period: period,
            subscriber: subscriber
          });
        });
      }

      function dispatch(state) {
        var index = state.index,
            period = state.period,
            subscriber = state.subscriber;
        subscriber.next(index);

        if (subscriber.closed) {
          return;
        } else if (period === -1) {
          return subscriber.complete();
        }

        state.index = index + 1;
        this.schedule(state, period);
      }
      /***/

    },

    /***/
    527:
    /*!****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/audit.js ***!
      \****************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "audit": function audit() {
          return (
            /* binding */
            _audit
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../OuterSubscriber */
      88237);
      /* harmony import */


      var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../util/subscribeToResult */
      26648);

      function _audit(durationSelector) {
        return function auditOperatorFunction(source) {
          return source.lift(new AuditOperator(durationSelector));
        };
      }

      var AuditOperator = /*#__PURE__*/function () {
        function AuditOperator(durationSelector) {
          _classCallCheck(this, AuditOperator);

          this.durationSelector = durationSelector;
        }

        _createClass(AuditOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));
          }
        }]);

        return AuditOperator;
      }();

      var AuditSubscriber = /*#__PURE__*/function (_OuterSubscriber__WEB) {
        _inherits(AuditSubscriber, _OuterSubscriber__WEB);

        var _super29 = _createSuper(AuditSubscriber);

        function AuditSubscriber(destination, durationSelector) {
          var _this96;

          _classCallCheck(this, AuditSubscriber);

          _this96 = _super29.call(this, destination);
          _this96.durationSelector = durationSelector;
          _this96.hasValue = false;
          return _this96;
        }

        _createClass(AuditSubscriber, [{
          key: "_next",
          value: function _next(value) {
            this.value = value;
            this.hasValue = true;

            if (!this.throttled) {
              var duration;

              try {
                var durationSelector = this.durationSelector;
                duration = durationSelector(value);
              } catch (err) {
                return this.destination.error(err);
              }

              var innerSubscription = (0, _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__.subscribeToResult)(this, duration);

              if (!innerSubscription || innerSubscription.closed) {
                this.clearThrottle();
              } else {
                this.add(this.throttled = innerSubscription);
              }
            }
          }
        }, {
          key: "clearThrottle",
          value: function clearThrottle() {
            var value = this.value,
                hasValue = this.hasValue,
                throttled = this.throttled;

            if (throttled) {
              this.remove(throttled);
              this.throttled = null;
              throttled.unsubscribe();
            }

            if (hasValue) {
              this.value = null;
              this.hasValue = false;
              this.destination.next(value);
            }
          }
        }, {
          key: "notifyNext",
          value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex) {
            this.clearThrottle();
          }
        }, {
          key: "notifyComplete",
          value: function notifyComplete() {
            this.clearThrottle();
          }
        }]);

        return AuditSubscriber;
      }(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__.OuterSubscriber);
      /***/

    },

    /***/
    7494:
    /*!********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/auditTime.js ***!
      \********************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "auditTime": function auditTime() {
          return (
            /* binding */
            _auditTime
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _scheduler_async__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../scheduler/async */
      32606);
      /* harmony import */


      var _audit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./audit */
      527);
      /* harmony import */


      var _observable_timer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../observable/timer */
      12702);

      function _auditTime(duration) {
        var scheduler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _scheduler_async__WEBPACK_IMPORTED_MODULE_0__.async;
        return (0, _audit__WEBPACK_IMPORTED_MODULE_1__.audit)(function () {
          return (0, _observable_timer__WEBPACK_IMPORTED_MODULE_2__.timer)(duration, scheduler);
        });
      }
      /***/

    },

    /***/
    80639:
    /*!***********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/debounceTime.js ***!
      \***********************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "debounceTime": function debounceTime() {
          return (
            /* binding */
            _debounceTime
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../Subscriber */
      71003);
      /* harmony import */


      var _scheduler_async__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../scheduler/async */
      32606);

      function _debounceTime(dueTime) {
        var scheduler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _scheduler_async__WEBPACK_IMPORTED_MODULE_0__.async;
        return function (source) {
          return source.lift(new DebounceTimeOperator(dueTime, scheduler));
        };
      }

      var DebounceTimeOperator = /*#__PURE__*/function () {
        function DebounceTimeOperator(dueTime, scheduler) {
          _classCallCheck(this, DebounceTimeOperator);

          this.dueTime = dueTime;
          this.scheduler = scheduler;
        }

        _createClass(DebounceTimeOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));
          }
        }]);

        return DebounceTimeOperator;
      }();

      var DebounceTimeSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_) {
        _inherits(DebounceTimeSubscriber, _Subscriber__WEBPACK_);

        var _super30 = _createSuper(DebounceTimeSubscriber);

        function DebounceTimeSubscriber(destination, dueTime, scheduler) {
          var _this97;

          _classCallCheck(this, DebounceTimeSubscriber);

          _this97 = _super30.call(this, destination);
          _this97.dueTime = dueTime;
          _this97.scheduler = scheduler;
          _this97.debouncedSubscription = null;
          _this97.lastValue = null;
          _this97.hasValue = false;
          return _this97;
        }

        _createClass(DebounceTimeSubscriber, [{
          key: "_next",
          value: function _next(value) {
            this.clearDebounce();
            this.lastValue = value;
            this.hasValue = true;
            this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));
          }
        }, {
          key: "_complete",
          value: function _complete() {
            this.debouncedNext();
            this.destination.complete();
          }
        }, {
          key: "debouncedNext",
          value: function debouncedNext() {
            this.clearDebounce();

            if (this.hasValue) {
              var lastValue = this.lastValue;
              this.lastValue = null;
              this.hasValue = false;
              this.destination.next(lastValue);
            }
          }
        }, {
          key: "clearDebounce",
          value: function clearDebounce() {
            var debouncedSubscription = this.debouncedSubscription;

            if (debouncedSubscription !== null) {
              this.remove(debouncedSubscription);
              debouncedSubscription.unsubscribe();
              this.debouncedSubscription = null;
            }
          }
        }]);

        return DebounceTimeSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_1__.Subscriber);

      function dispatchNext(subscriber) {
        subscriber.debouncedNext();
      }
      /***/

    },

    /***/
    83720:
    /*!*******************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/distinctUntilChanged.js ***!
      \*******************************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "distinctUntilChanged": function distinctUntilChanged() {
          return (
            /* binding */
            _distinctUntilChanged
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      71003);

      function _distinctUntilChanged(compare, keySelector) {
        return function (source) {
          return source.lift(new DistinctUntilChangedOperator(compare, keySelector));
        };
      }

      var DistinctUntilChangedOperator = /*#__PURE__*/function () {
        function DistinctUntilChangedOperator(compare, keySelector) {
          _classCallCheck(this, DistinctUntilChangedOperator);

          this.compare = compare;
          this.keySelector = keySelector;
        }

        _createClass(DistinctUntilChangedOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));
          }
        }]);

        return DistinctUntilChangedOperator;
      }();

      var DistinctUntilChangedSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_2) {
        _inherits(DistinctUntilChangedSubscriber, _Subscriber__WEBPACK_2);

        var _super31 = _createSuper(DistinctUntilChangedSubscriber);

        function DistinctUntilChangedSubscriber(destination, compare, keySelector) {
          var _this98;

          _classCallCheck(this, DistinctUntilChangedSubscriber);

          _this98 = _super31.call(this, destination);
          _this98.keySelector = keySelector;
          _this98.hasKey = false;

          if (typeof compare === 'function') {
            _this98.compare = compare;
          }

          return _this98;
        }

        _createClass(DistinctUntilChangedSubscriber, [{
          key: "compare",
          value: function compare(x, y) {
            return x === y;
          }
        }, {
          key: "_next",
          value: function _next(value) {
            var key;

            try {
              var keySelector = this.keySelector;
              key = keySelector ? keySelector(value) : value;
            } catch (err) {
              return this.destination.error(err);
            }

            var result = false;

            if (this.hasKey) {
              try {
                var compare = this.compare;
                result = compare(this.key, key);
              } catch (err) {
                return this.destination.error(err);
              }
            } else {
              this.hasKey = true;
            }

            if (!result) {
              this.key = key;
              this.destination.next(value);
            }
          }
        }]);

        return DistinctUntilChangedSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__.Subscriber);
      /***/

    },

    /***/
    15347:
    /*!*******************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/pairwise.js ***!
      \*******************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "pairwise": function pairwise() {
          return (
            /* binding */
            _pairwise
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      71003);

      function _pairwise() {
        return function (source) {
          return source.lift(new PairwiseOperator());
        };
      }

      var PairwiseOperator = /*#__PURE__*/function () {
        function PairwiseOperator() {
          _classCallCheck(this, PairwiseOperator);
        }

        _createClass(PairwiseOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new PairwiseSubscriber(subscriber));
          }
        }]);

        return PairwiseOperator;
      }();

      var PairwiseSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_3) {
        _inherits(PairwiseSubscriber, _Subscriber__WEBPACK_3);

        var _super32 = _createSuper(PairwiseSubscriber);

        function PairwiseSubscriber(destination) {
          var _this99;

          _classCallCheck(this, PairwiseSubscriber);

          _this99 = _super32.call(this, destination);
          _this99.hasPrev = false;
          return _this99;
        }

        _createClass(PairwiseSubscriber, [{
          key: "_next",
          value: function _next(value) {
            var pair;

            if (this.hasPrev) {
              pair = [this.prev, value];
            } else {
              this.hasPrev = true;
            }

            this.prev = value;

            if (pair) {
              this.destination.next(pair);
            }
          }
        }]);

        return PairwiseSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__.Subscriber);
      /***/

    },

    /***/
    84515:
    /*!***************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/skip.js ***!
      \***************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "skip": function skip() {
          return (
            /* binding */
            _skip
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      71003);

      function _skip(count) {
        return function (source) {
          return source.lift(new SkipOperator(count));
        };
      }

      var SkipOperator = /*#__PURE__*/function () {
        function SkipOperator(total) {
          _classCallCheck(this, SkipOperator);

          this.total = total;
        }

        _createClass(SkipOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new SkipSubscriber(subscriber, this.total));
          }
        }]);

        return SkipOperator;
      }();

      var SkipSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_4) {
        _inherits(SkipSubscriber, _Subscriber__WEBPACK_4);

        var _super33 = _createSuper(SkipSubscriber);

        function SkipSubscriber(destination, total) {
          var _this100;

          _classCallCheck(this, SkipSubscriber);

          _this100 = _super33.call(this, destination);
          _this100.total = total;
          _this100.count = 0;
          return _this100;
        }

        _createClass(SkipSubscriber, [{
          key: "_next",
          value: function _next(x) {
            if (++this.count > this.total) {
              this.destination.next(x);
            }
          }
        }]);

        return SkipSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__.Subscriber);
      /***/

    },

    /***/
    22663:
    /*!********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/takeUntil.js ***!
      \********************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "takeUntil": function takeUntil() {
          return (
            /* binding */
            _takeUntil
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../OuterSubscriber */
      88237);
      /* harmony import */


      var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../util/subscribeToResult */
      26648);

      function _takeUntil(notifier) {
        return function (source) {
          return source.lift(new TakeUntilOperator(notifier));
        };
      }

      var TakeUntilOperator = /*#__PURE__*/function () {
        function TakeUntilOperator(notifier) {
          _classCallCheck(this, TakeUntilOperator);

          this.notifier = notifier;
        }

        _createClass(TakeUntilOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            var takeUntilSubscriber = new TakeUntilSubscriber(subscriber);
            var notifierSubscription = (0, _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_0__.subscribeToResult)(takeUntilSubscriber, this.notifier);

            if (notifierSubscription && !takeUntilSubscriber.seenValue) {
              takeUntilSubscriber.add(notifierSubscription);
              return source.subscribe(takeUntilSubscriber);
            }

            return takeUntilSubscriber;
          }
        }]);

        return TakeUntilOperator;
      }();

      var TakeUntilSubscriber = /*#__PURE__*/function (_OuterSubscriber__WEB2) {
        _inherits(TakeUntilSubscriber, _OuterSubscriber__WEB2);

        var _super34 = _createSuper(TakeUntilSubscriber);

        function TakeUntilSubscriber(destination) {
          var _this101;

          _classCallCheck(this, TakeUntilSubscriber);

          _this101 = _super34.call(this, destination);
          _this101.seenValue = false;
          return _this101;
        }

        _createClass(TakeUntilSubscriber, [{
          key: "notifyNext",
          value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.seenValue = true;
            this.complete();
          }
        }, {
          key: "notifyComplete",
          value: function notifyComplete() {}
        }]);

        return TakeUntilSubscriber;
      }(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_1__.OuterSubscriber);
      /***/

    },

    /***/
    9862:
    /*!*******************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/scheduler/AnimationFrameAction.js ***!
      \*******************************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "AnimationFrameAction": function AnimationFrameAction() {
          return (
            /* binding */
            _AnimationFrameAction
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _AsyncAction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./AsyncAction */
      23115);

      var _AnimationFrameAction = /*#__PURE__*/function (_AsyncAction__WEBPACK) {
        _inherits(_AnimationFrameAction, _AsyncAction__WEBPACK);

        var _super35 = _createSuper(_AnimationFrameAction);

        function _AnimationFrameAction(scheduler, work) {
          var _this102;

          _classCallCheck(this, _AnimationFrameAction);

          _this102 = _super35.call(this, scheduler, work);
          _this102.scheduler = scheduler;
          _this102.work = work;
          return _this102;
        }

        _createClass(_AnimationFrameAction, [{
          key: "requestAsyncId",
          value: function requestAsyncId(scheduler, id) {
            var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

            if (delay !== null && delay > 0) {
              return _get(_getPrototypeOf(_AnimationFrameAction.prototype), "requestAsyncId", this).call(this, scheduler, id, delay);
            }

            scheduler.actions.push(this);
            return scheduler.scheduled || (scheduler.scheduled = requestAnimationFrame(function () {
              return scheduler.flush(null);
            }));
          }
        }, {
          key: "recycleAsyncId",
          value: function recycleAsyncId(scheduler, id) {
            var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

            if (delay !== null && delay > 0 || delay === null && this.delay > 0) {
              return _get(_getPrototypeOf(_AnimationFrameAction.prototype), "recycleAsyncId", this).call(this, scheduler, id, delay);
            }

            if (scheduler.actions.length === 0) {
              cancelAnimationFrame(id);
              scheduler.scheduled = undefined;
            }

            return undefined;
          }
        }]);

        return _AnimationFrameAction;
      }(_AsyncAction__WEBPACK_IMPORTED_MODULE_0__.AsyncAction);
      /***/

    },

    /***/
    98028:
    /*!**********************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/scheduler/AnimationFrameScheduler.js ***!
      \**********************************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "AnimationFrameScheduler": function AnimationFrameScheduler() {
          return (
            /* binding */
            _AnimationFrameScheduler
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _AsyncScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./AsyncScheduler */
      16367);

      var _AnimationFrameScheduler = /*#__PURE__*/function (_AsyncScheduler__WEBP) {
        _inherits(_AnimationFrameScheduler, _AsyncScheduler__WEBP);

        var _super36 = _createSuper(_AnimationFrameScheduler);

        function _AnimationFrameScheduler() {
          _classCallCheck(this, _AnimationFrameScheduler);

          return _super36.apply(this, arguments);
        }

        _createClass(_AnimationFrameScheduler, [{
          key: "flush",
          value: function flush(action) {
            this.active = true;
            this.scheduled = undefined;
            var actions = this.actions;
            var error;
            var index = -1;
            var count = actions.length;
            action = action || actions.shift();

            do {
              if (error = action.execute(action.state, action.delay)) {
                break;
              }
            } while (++index < count && (action = actions.shift()));

            this.active = false;

            if (error) {
              while (++index < count && (action = actions.shift())) {
                action.unsubscribe();
              }

              throw error;
            }
          }
        }]);

        return _AnimationFrameScheduler;
      }(_AsyncScheduler__WEBPACK_IMPORTED_MODULE_0__.AsyncScheduler);
      /***/

    },

    /***/
    20959:
    /*!*********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/scheduler/AsapAction.js ***!
      \*********************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "AsapAction": function AsapAction() {
          return (
            /* binding */
            _AsapAction
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _util_Immediate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../util/Immediate */
      45429);
      /* harmony import */


      var _AsyncAction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./AsyncAction */
      23115);

      var _AsapAction = /*#__PURE__*/function (_AsyncAction__WEBPACK2) {
        _inherits(_AsapAction, _AsyncAction__WEBPACK2);

        var _super37 = _createSuper(_AsapAction);

        function _AsapAction(scheduler, work) {
          var _this103;

          _classCallCheck(this, _AsapAction);

          _this103 = _super37.call(this, scheduler, work);
          _this103.scheduler = scheduler;
          _this103.work = work;
          return _this103;
        }

        _createClass(_AsapAction, [{
          key: "requestAsyncId",
          value: function requestAsyncId(scheduler, id) {
            var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

            if (delay !== null && delay > 0) {
              return _get(_getPrototypeOf(_AsapAction.prototype), "requestAsyncId", this).call(this, scheduler, id, delay);
            }

            scheduler.actions.push(this);
            return scheduler.scheduled || (scheduler.scheduled = _util_Immediate__WEBPACK_IMPORTED_MODULE_1__.Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));
          }
        }, {
          key: "recycleAsyncId",
          value: function recycleAsyncId(scheduler, id) {
            var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

            if (delay !== null && delay > 0 || delay === null && this.delay > 0) {
              return _get(_getPrototypeOf(_AsapAction.prototype), "recycleAsyncId", this).call(this, scheduler, id, delay);
            }

            if (scheduler.actions.length === 0) {
              _util_Immediate__WEBPACK_IMPORTED_MODULE_1__.Immediate.clearImmediate(id);

              scheduler.scheduled = undefined;
            }

            return undefined;
          }
        }]);

        return _AsapAction;
      }(_AsyncAction__WEBPACK_IMPORTED_MODULE_0__.AsyncAction);
      /***/

    },

    /***/
    6346:
    /*!************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/scheduler/AsapScheduler.js ***!
      \************************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "AsapScheduler": function AsapScheduler() {
          return (
            /* binding */
            _AsapScheduler
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _AsyncScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./AsyncScheduler */
      16367);

      var _AsapScheduler = /*#__PURE__*/function (_AsyncScheduler__WEBP2) {
        _inherits(_AsapScheduler, _AsyncScheduler__WEBP2);

        var _super38 = _createSuper(_AsapScheduler);

        function _AsapScheduler() {
          _classCallCheck(this, _AsapScheduler);

          return _super38.apply(this, arguments);
        }

        _createClass(_AsapScheduler, [{
          key: "flush",
          value: function flush(action) {
            this.active = true;
            this.scheduled = undefined;
            var actions = this.actions;
            var error;
            var index = -1;
            var count = actions.length;
            action = action || actions.shift();

            do {
              if (error = action.execute(action.state, action.delay)) {
                break;
              }
            } while (++index < count && (action = actions.shift()));

            this.active = false;

            if (error) {
              while (++index < count && (action = actions.shift())) {
                action.unsubscribe();
              }

              throw error;
            }
          }
        }]);

        return _AsapScheduler;
      }(_AsyncScheduler__WEBPACK_IMPORTED_MODULE_0__.AsyncScheduler);
      /***/

    },

    /***/
    90970:
    /*!*************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/scheduler/animationFrame.js ***!
      \*************************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "animationFrame": function animationFrame() {
          return (
            /* binding */
            _animationFrame
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _AnimationFrameAction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./AnimationFrameAction */
      9862);
      /* harmony import */


      var _AnimationFrameScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./AnimationFrameScheduler */
      98028);

      var _animationFrame = new _AnimationFrameScheduler__WEBPACK_IMPORTED_MODULE_0__.AnimationFrameScheduler(_AnimationFrameAction__WEBPACK_IMPORTED_MODULE_1__.AnimationFrameAction);
      /***/

    },

    /***/
    36317:
    /*!***************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/scheduler/asap.js ***!
      \***************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "asap": function asap() {
          return (
            /* binding */
            _asap
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _AsapAction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./AsapAction */
      20959);
      /* harmony import */


      var _AsapScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./AsapScheduler */
      6346);

      var _asap = new _AsapScheduler__WEBPACK_IMPORTED_MODULE_0__.AsapScheduler(_AsapAction__WEBPACK_IMPORTED_MODULE_1__.AsapAction);
      /***/

    },

    /***/
    32606:
    /*!****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/scheduler/async.js ***!
      \****************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "async": function async() {
          return (
            /* binding */
            _async
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _AsyncAction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./AsyncAction */
      23115);
      /* harmony import */


      var _AsyncScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./AsyncScheduler */
      16367);

      var _async = new _AsyncScheduler__WEBPACK_IMPORTED_MODULE_0__.AsyncScheduler(_AsyncAction__WEBPACK_IMPORTED_MODULE_1__.AsyncAction);
      /***/

    },

    /***/
    45429:
    /*!***************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/Immediate.js ***!
      \***************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "Immediate": function Immediate() {
          return (
            /* binding */
            _Immediate
          );
        },

        /* harmony export */
        "TestTools": function TestTools() {
          return (
            /* binding */
            _TestTools
          );
        }
        /* harmony export */

      });

      var nextHandle = 1;

      var RESOLVED = function () {
        return Promise.resolve();
      }();

      var activeHandles = {};

      function findAndClearHandle(handle) {
        if (handle in activeHandles) {
          delete activeHandles[handle];
          return true;
        }

        return false;
      }

      var _Immediate = {
        setImmediate: function setImmediate(cb) {
          var handle = nextHandle++;
          activeHandles[handle] = true;
          RESOLVED.then(function () {
            return findAndClearHandle(handle) && cb();
          });
          return handle;
        },
        clearImmediate: function clearImmediate(handle) {
          findAndClearHandle(handle);
        }
      };
      var _TestTools = {
        pending: function pending() {
          return Object.keys(activeHandles).length;
        }
      };
      /***/
    },

    /***/
    82867:
    /*!***************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/isNumeric.js ***!
      \***************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "isNumeric": function isNumeric() {
          return (
            /* binding */
            _isNumeric
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _isArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./isArray */
      49861);

      function _isNumeric(val) {
        return !(0, _isArray__WEBPACK_IMPORTED_MODULE_0__.isArray)(val) && val - parseFloat(val) + 1 >= 0;
      }
      /***/

    },

    /***/
    13918:
    /*!************************************!*\
      !*** ./node_modules/uuid/index.js ***!
      \************************************/

    /***/
    function _(module, __unused_webpack_exports, __webpack_require__) {
      var v1 = __webpack_require__(
      /*! ./v1 */
      93748);

      var v4 = __webpack_require__(
      /*! ./v4 */
      77709);

      var uuid = v4;
      uuid.v1 = v1;
      uuid.v4 = v4;
      module.exports = uuid;
      /***/
    },

    /***/
    44868:
    /*!**********************************************!*\
      !*** ./node_modules/uuid/lib/bytesToUuid.js ***!
      \**********************************************/

    /***/
    function _(module) {
      /**
       * Convert array of 16 byte values to UUID string format of the form:
       * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
       */
      var byteToHex = [];

      for (var i = 0; i < 256; ++i) {
        byteToHex[i] = (i + 0x100).toString(16).substr(1);
      }

      function bytesToUuid(buf, offset) {
        var i = offset || 0;
        var bth = byteToHex; // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4

        return [bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]]].join('');
      }

      module.exports = bytesToUuid;
      /***/
    },

    /***/
    88133:
    /*!**********************************************!*\
      !*** ./node_modules/uuid/lib/rng-browser.js ***!
      \**********************************************/

    /***/
    function _(module) {
      // Unique ID creation requires a high quality random # generator.  In the
      // browser this is a little complicated due to unknown quality of Math.random()
      // and inconsistent support for the `crypto` API.  We do the best we can via
      // feature-detection
      // getRandomValues needs to be invoked in a context where "this" is a Crypto
      // implementation. Also, find the complete implementation of crypto on IE11.
      var getRandomValues = typeof crypto != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto);

      if (getRandomValues) {
        // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
        var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef

        module.exports = function whatwgRNG() {
          getRandomValues(rnds8);
          return rnds8;
        };
      } else {
        // Math.random()-based (RNG)
        //
        // If all else fails, use Math.random().  It's fast, but is of unspecified
        // quality.
        var rnds = new Array(16);

        module.exports = function mathRNG() {
          for (var i = 0, r; i < 16; i++) {
            if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
            rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
          }

          return rnds;
        };
      }
      /***/

    },

    /***/
    93748:
    /*!*********************************!*\
      !*** ./node_modules/uuid/v1.js ***!
      \*********************************/

    /***/
    function _(module, __unused_webpack_exports, __webpack_require__) {
      var rng = __webpack_require__(
      /*! ./lib/rng */
      88133);

      var bytesToUuid = __webpack_require__(
      /*! ./lib/bytesToUuid */
      44868); // **`v1()` - Generate time-based UUID**
      //
      // Inspired by https://github.com/LiosK/UUID.js
      // and http://docs.python.org/library/uuid.html


      var _nodeId;

      var _clockseq; // Previous uuid creation time


      var _lastMSecs = 0;
      var _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

      function v1(options, buf, offset) {
        var i = buf && offset || 0;
        var b = buf || [];
        options = options || {};
        var node = options.node || _nodeId;
        var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
        // specified.  We do this lazily to minimize issues related to insufficient
        // system entropy.  See #189

        if (node == null || clockseq == null) {
          var seedBytes = rng();

          if (node == null) {
            // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
            node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
          }

          if (clockseq == null) {
            // Per 4.2.2, randomize (14 bit) clockseq
            clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
          }
        } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
        // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
        // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
        // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


        var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime(); // Per 4.2.1.2, use count of uuid's generated during the current clock
        // cycle to simulate higher resolution clock

        var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

        var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

        if (dt < 0 && options.clockseq === undefined) {
          clockseq = clockseq + 1 & 0x3fff;
        } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
        // time interval


        if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
          nsecs = 0;
        } // Per 4.2.1.2 Throw error if too many uuids are requested


        if (nsecs >= 10000) {
          throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
        }

        _lastMSecs = msecs;
        _lastNSecs = nsecs;
        _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

        msecs += 12219292800000; // `time_low`

        var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
        b[i++] = tl >>> 24 & 0xff;
        b[i++] = tl >>> 16 & 0xff;
        b[i++] = tl >>> 8 & 0xff;
        b[i++] = tl & 0xff; // `time_mid`

        var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
        b[i++] = tmh >>> 8 & 0xff;
        b[i++] = tmh & 0xff; // `time_high_and_version`

        b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

        b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

        b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

        b[i++] = clockseq & 0xff; // `node`

        for (var n = 0; n < 6; ++n) {
          b[i + n] = node[n];
        }

        return buf ? buf : bytesToUuid(b);
      }

      module.exports = v1;
      /***/
    },

    /***/
    77709:
    /*!*********************************!*\
      !*** ./node_modules/uuid/v4.js ***!
      \*********************************/

    /***/
    function _(module, __unused_webpack_exports, __webpack_require__) {
      var rng = __webpack_require__(
      /*! ./lib/rng */
      88133);

      var bytesToUuid = __webpack_require__(
      /*! ./lib/bytesToUuid */
      44868);

      function v4(options, buf, offset) {
        var i = buf && offset || 0;

        if (typeof options == 'string') {
          buf = options === 'binary' ? new Array(16) : null;
          options = null;
        }

        options = options || {};
        var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

        rnds[6] = rnds[6] & 0x0f | 0x40;
        rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

        if (buf) {
          for (var ii = 0; ii < 16; ++ii) {
            buf[i + ii] = rnds[ii];
          }
        }

        return buf || bytesToUuid(rnds);
      }

      module.exports = v4;
      /***/
    },

    /***/
    14355:
    /*!********************************************************************!*\
      !*** ./src/app/features/main-layout/main-layout-routing.module.ts ***!
      \********************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "MainLayoutRoutingModule": function MainLayoutRoutingModule() {
          return (
            /* binding */
            _MainLayoutRoutingModule
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/router */
      71258);
      /* harmony import */


      var _main_layout_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./main-layout.component */
      33687);
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      2316);

      var routes = [{
        path: '',
        component: _main_layout_component__WEBPACK_IMPORTED_MODULE_0__.MainLayoutComponent,
        children: [{
          path: '',
          loadChildren: function loadChildren() {
            return __webpack_require__.e(
            /*! import() */
            "src_app_features_dashboard_dashboard_module_ts").then(__webpack_require__.bind(__webpack_require__,
            /*! @features/dashboard/dashboard.module */
            51104)).then(function (m) {
              return m.DashboardModule;
            });
          }
        }, {
          path: 'dashboard',
          loadChildren: function loadChildren() {
            return __webpack_require__.e(
            /*! import() */
            "src_app_features_dashboard_dashboard_module_ts").then(__webpack_require__.bind(__webpack_require__,
            /*! @features/dashboard/dashboard.module */
            51104)).then(function (m) {
              return m.DashboardModule;
            });
          }
        }, {
          path: 'invoice-create-edit',
          loadChildren: function loadChildren() {
            return Promise.all(
            /*! import() */
            [__webpack_require__.e("default-node_modules_angular_material___ivy_ngcc___fesm2015_input_js"), __webpack_require__.e("default-node_modules_angular_material___ivy_ngcc___fesm2015_dialog_js"), __webpack_require__.e("common"), __webpack_require__.e("src_app_features_invoice-create-edit_invoice-create-edit_module_ts")]).then(__webpack_require__.bind(__webpack_require__,
            /*! @features/invoice-create-edit/invoice-create-edit.module */
            87020)).then(function (m) {
              return m.InvoiceCreateEditModule;
            });
          }
        }, {
          path: 'search',
          loadChildren: function loadChildren() {
            return Promise.all(
            /*! import() */
            [__webpack_require__.e("default-node_modules_angular_material___ivy_ngcc___fesm2015_input_js"), __webpack_require__.e("default-node_modules_angular_material___ivy_ngcc___fesm2015_select_js"), __webpack_require__.e("common"), __webpack_require__.e("src_app_features_invoices_invoices_module_ts")]).then(__webpack_require__.bind(__webpack_require__,
            /*! @features/invoices/invoices.module */
            24429)).then(function (m) {
              return m.InvoicesModule;
            });
          }
        }, {
          path: 'settings',
          loadChildren: function loadChildren() {
            return __webpack_require__.e(
            /*! import() */
            "src_app_features_settings_settings-layout_module_ts").then(__webpack_require__.bind(__webpack_require__,
            /*! @features/settings/settings-layout.module */
            95407)).then(function (m) {
              return m.SettingsLayoutModule;
            });
          }
        }, {
          path: 'app-settings',
          loadChildren: function loadChildren() {
            return Promise.all(
            /*! import() */
            [__webpack_require__.e("default-node_modules_angular_material___ivy_ngcc___fesm2015_input_js"), __webpack_require__.e("default-node_modules_angular_material___ivy_ngcc___fesm2015_select_js"), __webpack_require__.e("default-src_app_shared_components_form_form_module_ts"), __webpack_require__.e("src_app_features_settings_app-settings_app-settings_module_ts")]).then(__webpack_require__.bind(__webpack_require__,
            /*! @features/settings/app-settings/app-settings.module */
            90157)).then(function (m) {
              return m.AppSettingsModule;
            });
          }
        }]
      }];

      var _MainLayoutRoutingModule = function _MainLayoutRoutingModule() {
        _classCallCheck(this, _MainLayoutRoutingModule);
      };

      _MainLayoutRoutingModule.ɵfac = function MainLayoutRoutingModule_Factory(t) {
        return new (t || _MainLayoutRoutingModule)();
      };

      _MainLayoutRoutingModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
        type: _MainLayoutRoutingModule
      });
      _MainLayoutRoutingModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
        imports: [[_angular_router__WEBPACK_IMPORTED_MODULE_2__.RouterModule.forChild(routes)], _angular_router__WEBPACK_IMPORTED_MODULE_2__.RouterModule]
      });

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵsetNgModuleScope"](_MainLayoutRoutingModule, {
          imports: [_angular_router__WEBPACK_IMPORTED_MODULE_2__.RouterModule],
          exports: [_angular_router__WEBPACK_IMPORTED_MODULE_2__.RouterModule]
        });
      })();
      /***/

    },

    /***/
    33687:
    /*!***************************************************************!*\
      !*** ./src/app/features/main-layout/main-layout.component.ts ***!
      \***************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "MainLayoutComponent": function MainLayoutComponent() {
          return (
            /* binding */
            _MainLayoutComponent
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var src_app_shared_services_subscription_manager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! src/app/shared/services/subscription.manager */
      34463);
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/core */
      2316);
      /* harmony import */


      var _shared_components_sidebar_sidebar_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../../shared/components/sidebar/sidebar.component */
      6664);
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/router */
      71258);

      var _MainLayoutComponent = /*#__PURE__*/function () {
        function _MainLayoutComponent() {
          _classCallCheck(this, _MainLayoutComponent);

          this.subs = new src_app_shared_services_subscription_manager__WEBPACK_IMPORTED_MODULE_0__.SubscriptionManager();
        }

        _createClass(_MainLayoutComponent, [{
          key: "ngOnInit",
          value: function ngOnInit() {}
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.subs.unsubscribe();
          }
        }]);

        return _MainLayoutComponent;
      }();

      _MainLayoutComponent.ɵfac = function MainLayoutComponent_Factory(t) {
        return new (t || _MainLayoutComponent)();
      };

      _MainLayoutComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineComponent"]({
        type: _MainLayoutComponent,
        selectors: [["app-main-layout"]],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵProvidersFeature"]([])],
        decls: 5,
        vars: 0,
        consts: [[1, "main-app-container"], [1, "sidebar"], [1, "content"]],
        template: function MainLayoutComponent_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](0, "div", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](1, "div", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelement"](2, "app-sidebar");

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](3, "div", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelement"](4, "router-outlet");

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
          }
        },
        directives: [_shared_components_sidebar_sidebar_component__WEBPACK_IMPORTED_MODULE_1__.SidebarComponent, _angular_router__WEBPACK_IMPORTED_MODULE_3__.RouterOutlet],
        styles: [".main-app-container[_ngcontent-%COMP%] {\n  height: 100%;\n  width: 100%;\n  display: flex;\n}\n.main-app-container[_ngcontent-%COMP%]   .content[_ngcontent-%COMP%] {\n  width: 100%;\n  height: 100%;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4tbGF5b3V0LmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsWUFBQTtFQUNBLFdBQUE7RUFDQSxhQUFBO0FBQ0Y7QUFJRTtFQUNFLFdBQUE7RUFDQSxZQUFBO0FBRkoiLCJmaWxlIjoibWFpbi1sYXlvdXQuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIubWFpbi1hcHAtY29udGFpbmVyIHtcclxuICBoZWlnaHQ6IDEwMCU7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgZGlzcGxheTogZmxleDtcclxuXHJcbiAgLnNpZGViYXIge1xyXG4gIH1cclxuXHJcbiAgLmNvbnRlbnQge1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgfVxyXG59XHJcbiJdfQ== */"]
      });
      /***/
    },

    /***/
    18863:
    /*!************************************************************!*\
      !*** ./src/app/features/main-layout/main-layout.module.ts ***!
      \************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "MainLayoutModule": function MainLayoutModule() {
          return (
            /* binding */
            _MainLayoutModule
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! @angular/common */
      54364);
      /* harmony import */


      var _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @angular/material/snack-bar */
      68456);
      /* harmony import */


      var src_app_shared_components_me_basic_alert_me_basic_alert_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! src/app/shared/components/me-basic-alert/me-basic-alert.module */
      21284);
      /* harmony import */


      var src_app_shared_components_sidebar_sidebar_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! src/app/shared/components/sidebar/sidebar.module */
      57189);
      /* harmony import */


      var src_app_shared_services_global_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! src/app/shared/services/global.service */
      78794);
      /* harmony import */


      var _main_layout_routing_module__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ./main-layout-routing.module */
      14355);
      /* harmony import */


      var _main_layout_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ./main-layout.component */
      33687);
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/core */
      2316);

      var _MainLayoutModule = function _MainLayoutModule() {
        _classCallCheck(this, _MainLayoutModule);
      };

      _MainLayoutModule.ɵfac = function MainLayoutModule_Factory(t) {
        return new (t || _MainLayoutModule)();
      };

      _MainLayoutModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵdefineNgModule"]({
        type: _MainLayoutModule
      });
      _MainLayoutModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵdefineInjector"]({
        providers: [src_app_shared_services_global_service__WEBPACK_IMPORTED_MODULE_2__.GlobalService, _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_6__.MatSnackBar, _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_6__.MatSnackBarConfig],
        imports: [[_angular_common__WEBPACK_IMPORTED_MODULE_7__.CommonModule, _main_layout_routing_module__WEBPACK_IMPORTED_MODULE_3__.MainLayoutRoutingModule, src_app_shared_components_sidebar_sidebar_module__WEBPACK_IMPORTED_MODULE_1__.SidebarModule, src_app_shared_components_me_basic_alert_me_basic_alert_module__WEBPACK_IMPORTED_MODULE_0__.MeBasicAlertModule]]
      });

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵsetNgModuleScope"](_MainLayoutModule, {
          declarations: [_main_layout_component__WEBPACK_IMPORTED_MODULE_4__.MainLayoutComponent],
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_7__.CommonModule, _main_layout_routing_module__WEBPACK_IMPORTED_MODULE_3__.MainLayoutRoutingModule, src_app_shared_components_sidebar_sidebar_module__WEBPACK_IMPORTED_MODULE_1__.SidebarModule, src_app_shared_components_me_basic_alert_me_basic_alert_module__WEBPACK_IMPORTED_MODULE_0__.MeBasicAlertModule]
        });
      })();
      /***/

    },

    /***/
    90042:
    /*!**************************************************************!*\
      !*** ./src/app/shared/components/button/button.component.ts ***!
      \**************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "ButtonComponent": function ButtonComponent() {
          return (
            /* binding */
            _ButtonComponent
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/core */
      2316);
      /* harmony import */


      var src_app_shared_services_subscription_manager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! src/app/shared/services/subscription.manager */
      34463);
      /* harmony import */


      var src_app_shared_services_app_settings_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! src/app/shared/services/app-settings.service */
      93561);
      /* harmony import */


      var _angular_material_button__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/material/button */
      70781);
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/common */
      54364);
      /* harmony import */


      var angular_feather__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! angular-feather */
      54536);

      function ButtonComponent_i_feather_1_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelement"](0, "i-feather", 3);
        }

        if (rf & 2) {
          var ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("name", ctx_r0.iconName);
        }
      }

      function ButtonComponent_ng_container_3_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementContainerStart"](0);

          _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementContainerEnd"]();
        }

        if (rf & 2) {
          var ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtextInterpolate"](ctx_r1.text);
        }
      }

      function ButtonComponent_ng_content_4_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵprojection"](0, 0, ["*ngIf", "!text"]);
        }
      }

      var _c0 = ["*"];

      var _ButtonComponent = /*#__PURE__*/function () {
        function _ButtonComponent(constantsService) {
          _classCallCheck(this, _ButtonComponent);

          this.constantsService = constantsService;
          this.subs = new src_app_shared_services_subscription_manager__WEBPACK_IMPORTED_MODULE_0__.SubscriptionManager();
          this.text = '';
          this.iconPosition = 'left';
          this.buttonSize = 'big';
          this.fontSize = 16;
          this.isSquare = false;
          this.disabled = false;
          this.isTransparentMode = false; // this is not the same as disabled, this is 1 of 2 styling theme modes

          this.fullWidth = false; // Case when button have to take full width of me-button container

          this.fullHeight = false; // Case when button have to take full height of me-button container

          this.color = 'primary';
          this.clickEvent = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
        }

        _createClass(_ButtonComponent, [{
          key: "ngOnInit",
          value: function ngOnInit() {
            var _this104 = this;

            var fontSize = true;
            var buttonSize = true;

            if (this.fontSize) {
              fontSize = false;
            }

            if (this.buttonSize) {
              buttonSize = false;
            }

            if (fontSize || buttonSize) {
              if (fontSize) {
                this.subs.sink.fontSize = this.constantsService.settings.subscribe(function (settings) {
                  _this104.fontSize = settings.applicationDesign.fontSize;
                });
              }

              if (buttonSize) {
                this.subs.sink.buttonSize = this.constantsService.settings.subscribe(function (settings) {
                  _this104.buttonSize = settings.applicationDesign.buttonSize;
                });
              }
            }
          }
        }, {
          key: "onClick",
          value: function onClick(e) {
            e.preventDefault();
            this.clickEvent.emit(e);
          }
        }]);

        return _ButtonComponent;
      }();

      _ButtonComponent.ɵfac = function ButtonComponent_Factory(t) {
        return new (t || _ButtonComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](src_app_shared_services_app_settings_service__WEBPACK_IMPORTED_MODULE_1__.AppSettingsService));
      };

      _ButtonComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineComponent"]({
        type: _ButtonComponent,
        selectors: [["app-button"]],
        inputs: {
          text: "text",
          iconName: "iconName",
          iconPosition: "iconPosition",
          buttonSize: "buttonSize",
          fontSize: "fontSize",
          isSquare: "isSquare",
          disabled: "disabled",
          isTransparentMode: "isTransparentMode",
          fullWidth: "fullWidth",
          fullHeight: "fullHeight",
          color: "color"
        },
        outputs: {
          clickEvent: "clickEvent"
        },
        ngContentSelectors: _c0,
        decls: 5,
        vars: 21,
        consts: [["mat-flat-button", "", 3, "ngClass", "disabled", "click"], [3, "name", 4, "ngIf"], [4, "ngIf"], [3, "name"]],
        template: function ButtonComponent_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵprojectionDef"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](0, "button", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵlistener"]("click", function ButtonComponent_Template_button_click_0_listener($event) {
              return ctx.onClick($event);
            });

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtemplate"](1, ButtonComponent_i_feather_1_Template, 1, 1, "i-feather", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](2, "div");

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtemplate"](3, ButtonComponent_ng_container_3_Template, 2, 1, "ng-container", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtemplate"](4, ButtonComponent_ng_content_4_Template, 1, 0, "ng-content", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵclassMap"](ctx.buttonSize);

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵclassProp"]("transparent-theme", ctx.isTransparentMode)("me-icon-right", ctx.iconPosition === "right")("icon-only", !ctx.text)("full-width", ctx.fullWidth)("full-height", ctx.fullHeight)("is-square", ctx.isSquare);

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("ngClass", ctx.color)("disabled", ctx.disabled);

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("ngIf", ctx.iconName);

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵclassProp"]("text-with-icon", !!ctx.iconName);

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("ngIf", ctx.text);

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("ngIf", !ctx.text);
          }
        },
        directives: [_angular_material_button__WEBPACK_IMPORTED_MODULE_3__.MatButton, _angular_common__WEBPACK_IMPORTED_MODULE_4__.NgClass, _angular_common__WEBPACK_IMPORTED_MODULE_4__.NgIf, angular_feather__WEBPACK_IMPORTED_MODULE_5__.FeatherComponent],
        styles: ["button[_ngcontent-%COMP%] {\n  min-width: unset;\n  color: #ffffff;\n  color: var(--color-white, #ffffff);\n  transition: 0.3s ease-in-out;\n}\nbutton.full-width[_ngcontent-%COMP%] {\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\nbutton.full-height[_ngcontent-%COMP%] {\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\nbutton.primary[_ngcontent-%COMP%] {\n  background: #5849e0;\n  background: var(--color-primary, #5849e0);\n}\nbutton.primary[_ngcontent-%COMP%]:hover {\n  background: #796de6;\n  background: var(--color-primary-hover, #796de6);\n}\nbutton.secondary[_ngcontent-%COMP%] {\n  border: 1px solid #e2e5ec;\n  border: 1px solid var(--color-input-border, #e2e5ec);\n  background: transparent;\n  color: #747474;\n  color: var(--color-main, #747474);\n}\nbutton.secondary[_ngcontent-%COMP%]:hover {\n  border: 1px solid #f7f6fe;\n  border: 1px solid var(--color-secondary-hover, #f7f6fe);\n  background: #f7f6fe;\n  background: var(--color-secondary-hover, #f7f6fe);\n}\nbutton.success[_ngcontent-%COMP%] {\n  background: #43ad48;\n  background: var(--color-success, #43ad48);\n}\nbutton.success[_ngcontent-%COMP%]:hover {\n  background: #0cc415;\n  background: var(--color-success-hover, #0cc415);\n}\nbutton.danger[_ngcontent-%COMP%] {\n  background: #e70020;\n  background: var(--color-danger, #e70020);\n}\nbutton.danger[_ngcontent-%COMP%]:hover {\n  background: #ec334d;\n  background: var(--color-danger-hover, #ec334d);\n}\nbutton[disabled=true][_ngcontent-%COMP%] {\n  background: #cfcfcf !important;\n  background: var(--color-disabled, #cfcfcf) !important;\n  color: #747474 !important;\n  color: var(--color-main, #747474) !important;\n}\nbutton[disabled=true][_ngcontent-%COMP%]:hover {\n  pointer-events: none !important;\n}\nbutton.transparent-theme.primary[_ngcontent-%COMP%] {\n  background: #eeedfc;\n  background: var(--color-transparent-primary-background, #eeedfc);\n  color: #5849e0;\n  color: var(--color-primary, #5849e0);\n}\nbutton.transparent-theme.primary[_ngcontent-%COMP%]:hover {\n  background: #f7f6fe;\n  background: var(--color-transparent-primary-hover, #f7f6fe);\n}\nbutton.transparent-theme.secondary[_ngcontent-%COMP%] {\n  border: 1px solid transparent;\n  background: transparent;\n}\nbutton.transparent-theme.secondary[_ngcontent-%COMP%]:hover {\n  border: 1px solid transparent;\n  background: transparent;\n}\nbutton.transparent-theme.success[_ngcontent-%COMP%] {\n  color: #43ad48;\n  color: var(--color-success, #43ad48);\n  background: #ecf7ed;\n  background: var(--color-transparent-success-background, #ecf7ed);\n}\nbutton.transparent-theme.success[_ngcontent-%COMP%]:hover {\n  background: #f6fbf6;\n  background: var(--color-transparent-success-hover, #f6fbf6);\n}\nbutton.transparent-theme.danger[_ngcontent-%COMP%] {\n  color: #e70020;\n  color: var(--color-danger, #e70020);\n  background: #fde6e9;\n  background: var(--color-transparent-danger-background, #fde6e9);\n}\nbutton.transparent-theme.danger[_ngcontent-%COMP%]:hover {\n  background: #fef2f4;\n  background: var(--color-transparent-danger-hover, #fef2f4);\n}\nbutton.transparent-theme.link[_ngcontent-%COMP%] {\n  background: transparent;\n  color: #747474;\n  color: var(--color-main, #747474);\n}\nbutton.transparent-theme.link[_ngcontent-%COMP%]:hover {\n  color: #4f75f5;\n  color: var(--color-link-hover, #4f75f5);\n}\nbutton.icon-only[_ngcontent-%COMP%] {\n  padding: 0 10px;\n}\nbutton[_ngcontent-%COMP%]   .icon[_ngcontent-%COMP%] {\n  height: 24px;\n  height: var(--icon-size, 24px);\n  width: 24px;\n  width: var(--icon-size, 24px);\n}\nbutton[_ngcontent-%COMP%]   .text-with-icon[_ngcontent-%COMP%]:not(:empty) {\n  margin: 0 10px;\n}\n.big[_ngcontent-%COMP%] {\n  min-height: 100px;\n  padding: 10 20px;\n  font-size: 32px;\n  border-radius: 10px;\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n}\n.middle[_ngcontent-%COMP%] {\n  min-height: 70px;\n  padding: 5 20px;\n  font-size: 22px;\n  border-radius: 8px;\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n}\n.small[_ngcontent-%COMP%] {\n  min-height: 40px;\n  padding: 0 20px;\n  font-size: 12px;\n  border-radius: 6px;\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n}\n.is-square.big[_ngcontent-%COMP%] {\n  height: 100px;\n  width: 100px;\n}\n.is-square.middle[_ngcontent-%COMP%] {\n  height: 70px;\n  width: 70px;\n}\n.is-square.small[_ngcontent-%COMP%] {\n  height: 40px;\n  width: 40px;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ1dHRvbi5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGdCQUFBO0VBQ0EsY0FBQTtFQUFBLGtDQUFBO0VBQ0EsNEJBQUE7QUFDRjtBQUVFO0VBQ0UsV0FBQTtFQUNBLGFBQUE7RUFDQSx1QkFBQTtFQUNBLG1CQUFBO0FBQUo7QUFHRTtFQUNFLFlBQUE7RUFDQSxhQUFBO0VBQ0EsdUJBQUE7RUFDQSxtQkFBQTtBQURKO0FBS0U7RUFDRSxtQkFBQTtFQUFBLHlDQUFBO0FBSEo7QUFLSTtFQUNFLG1CQUFBO0VBQUEsK0NBQUE7QUFITjtBQU9FO0VBQ0UseUJBQUE7RUFBQSxvREFBQTtFQUNBLHVCQUFBO0VBQ0EsY0FBQTtFQUFBLGlDQUFBO0FBTEo7QUFPSTtFQUNFLHlCQUFBO0VBQUEsdURBQUE7RUFDQSxtQkFBQTtFQUFBLGlEQUFBO0FBTE47QUFTRTtFQUNFLG1CQUFBO0VBQUEseUNBQUE7QUFQSjtBQVNJO0VBQ0UsbUJBQUE7RUFBQSwrQ0FBQTtBQVBOO0FBV0U7RUFDRSxtQkFBQTtFQUFBLHdDQUFBO0FBVEo7QUFXSTtFQUNFLG1CQUFBO0VBQUEsOENBQUE7QUFUTjtBQWFFO0VBQ0UsOEJBQUE7RUFBQSxxREFBQTtFQUlBLHlCQUFBO0VBQUEsNENBQUE7QUFkSjtBQW1CSTtFQUNFLCtCQUFBO0FBakJOO0FBdUJJO0VBQ0UsbUJBQUE7RUFBQSxnRUFBQTtFQUNBLGNBQUE7RUFBQSxvQ0FBQTtBQXJCTjtBQXVCTTtFQUNFLG1CQUFBO0VBQUEsMkRBQUE7QUFyQlI7QUF5Qkk7RUFDRSw2QkFBQTtFQUNBLHVCQUFBO0FBdkJOO0FBeUJNO0VBQ0UsNkJBQUE7RUFDQSx1QkFBQTtBQXZCUjtBQTJCSTtFQUNFLGNBQUE7RUFBQSxvQ0FBQTtFQUNBLG1CQUFBO0VBQUEsZ0VBQUE7QUF6Qk47QUEyQk07RUFDRSxtQkFBQTtFQUFBLDJEQUFBO0FBekJSO0FBNkJJO0VBQ0UsY0FBQTtFQUFBLG1DQUFBO0VBQ0EsbUJBQUE7RUFBQSwrREFBQTtBQTNCTjtBQTZCTTtFQUNFLG1CQUFBO0VBQUEsMERBQUE7QUEzQlI7QUErQkk7RUFDRSx1QkFBQTtFQUNBLGNBQUE7RUFBQSxpQ0FBQTtBQTdCTjtBQStCTTtFQUNFLGNBQUE7RUFBQSx1Q0FBQTtBQTdCUjtBQWtDRTtFQUNFLGVBQUE7QUFoQ0o7QUFvQ0U7RUFDRSxZQUFBO0VBQUEsOEJBQUE7RUFDQSxXQUFBO0VBQUEsNkJBQUE7QUFsQ0o7QUFxQ0U7RUFDRSxjQUFBO0FBbkNKO0FBdUNBO0VBQ0UsaUJBQUE7RUFDQSxnQkFBQTtFQUNBLGVBQUE7RUFDQSxtQkFBQTtFQUNBLDRFQUFBO0FBcENGO0FBdUNBO0VBQ0UsZ0JBQUE7RUFDQSxlQUFBO0VBQ0EsZUFBQTtFQUNBLGtCQUFBO0VBQ0EsNEVBQUE7QUFwQ0Y7QUF1Q0E7RUFDRSxnQkFBQTtFQUNBLGVBQUE7RUFDQSxlQUFBO0VBQ0Esa0JBQUE7RUFDQSw0RUFBQTtBQXBDRjtBQXdDRTtFQUNFLGFBQUE7RUFDQSxZQUFBO0FBckNKO0FBdUNFO0VBQ0UsWUFBQTtFQUNBLFdBQUE7QUFyQ0o7QUF1Q0U7RUFDRSxZQUFBO0VBQ0EsV0FBQTtBQXJDSiIsImZpbGUiOiJidXR0b24uY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJidXR0b24ge1xyXG4gIG1pbi13aWR0aDogdW5zZXQ7XHJcbiAgY29sb3I6IHZhcigtLWNvbG9yLXdoaXRlLCAjZmZmZmZmKTtcclxuICB0cmFuc2l0aW9uOiAwLjNzIGVhc2UtaW4tb3V0O1xyXG5cclxuICAvLyBDYXNlIGlmIGJ1dHRvbiBoYXMgc3BlY2lmaWVkIHNpemUgb3V0c2lkZVxyXG4gICYuZnVsbC13aWR0aCB7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgfVxyXG5cclxuICAmLmZ1bGwtaGVpZ2h0IHtcclxuICAgIGhlaWdodDogMTAwJTtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgfVxyXG5cclxuICAvLyBidXR0b25zIGluIHJlZ3VsYXIgbW9kZVxyXG4gICYucHJpbWFyeSB7XHJcbiAgICBiYWNrZ3JvdW5kOiB2YXIoLS1jb2xvci1wcmltYXJ5LCAjNTg0OWUwKTtcclxuXHJcbiAgICAmOmhvdmVyIHtcclxuICAgICAgYmFja2dyb3VuZDogdmFyKC0tY29sb3ItcHJpbWFyeS1ob3ZlciwgIzc5NmRlNik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAmLnNlY29uZGFyeSB7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1jb2xvci1pbnB1dC1ib3JkZXIsICNlMmU1ZWMpO1xyXG4gICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XHJcbiAgICBjb2xvcjogdmFyKC0tY29sb3ItbWFpbiwgIzc0NzQ3NCk7XHJcblxyXG4gICAgJjpob3ZlciB7XHJcbiAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWNvbG9yLXNlY29uZGFyeS1ob3ZlciwgI2Y3ZjZmZSk7XHJcbiAgICAgIGJhY2tncm91bmQ6IHZhcigtLWNvbG9yLXNlY29uZGFyeS1ob3ZlciwgI2Y3ZjZmZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAmLnN1Y2Nlc3Mge1xyXG4gICAgYmFja2dyb3VuZDogdmFyKC0tY29sb3Itc3VjY2VzcywgIzQzYWQ0OCk7XHJcblxyXG4gICAgJjpob3ZlciB7XHJcbiAgICAgIGJhY2tncm91bmQ6IHZhcigtLWNvbG9yLXN1Y2Nlc3MtaG92ZXIsICMwY2M0MTUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgJi5kYW5nZXIge1xyXG4gICAgYmFja2dyb3VuZDogdmFyKC0tY29sb3ItZGFuZ2VyLCAjZTcwMDIwKTtcclxuXHJcbiAgICAmOmhvdmVyIHtcclxuICAgICAgYmFja2dyb3VuZDogdmFyKC0tY29sb3ItZGFuZ2VyLWhvdmVyLCAjZWMzMzRkKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gICZbZGlzYWJsZWQ9XCJ0cnVlXCJdIHtcclxuICAgIGJhY2tncm91bmQ6IHZhcihcclxuICAgICAgLS1jb2xvci1kaXNhYmxlZCxcclxuICAgICAgI2NmY2ZjZlxyXG4gICAgKSAhaW1wb3J0YW50OyAvLyBpbXBvcnRhbnQgaXMgdXNlZCB0byBvdmVycmlkZSBtYXQgZGVmYXVsdHNcclxuICAgIGNvbG9yOiB2YXIoXHJcbiAgICAgIC0tY29sb3ItbWFpbixcclxuICAgICAgIzc0NzQ3NFxyXG4gICAgKSAhaW1wb3J0YW50OyAvLyBpbXBvcnRhbnQgaXMgdXNlZCB0byBvdmVycmlkZSBtYXQgZGVmYXVsdHNcclxuXHJcbiAgICAmOmhvdmVyIHtcclxuICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmUgIWltcG9ydGFudDsgLy8gaW1wb3J0YW50IGlzIHVzZWQgdG8gb3ZlcnJpZGUgbWF0IGRlZmF1bHRzXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBidXR0b25zIGluIHRyYW5zcGFyZW50IHRoZW1lIG1vZGVcclxuICAmLnRyYW5zcGFyZW50LXRoZW1lIHtcclxuICAgICYucHJpbWFyeSB7XHJcbiAgICAgIGJhY2tncm91bmQ6IHZhcigtLWNvbG9yLXRyYW5zcGFyZW50LXByaW1hcnktYmFja2dyb3VuZCwgI2VlZWRmYyk7XHJcbiAgICAgIGNvbG9yOiB2YXIoLS1jb2xvci1wcmltYXJ5LCAjNTg0OWUwKTtcclxuXHJcbiAgICAgICY6aG92ZXIge1xyXG4gICAgICAgIGJhY2tncm91bmQ6IHZhcigtLWNvbG9yLXRyYW5zcGFyZW50LXByaW1hcnktaG92ZXIsICNmN2Y2ZmUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgJi5zZWNvbmRhcnkge1xyXG4gICAgICBib3JkZXI6IDFweCBzb2xpZCB0cmFuc3BhcmVudDtcclxuICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XHJcblxyXG4gICAgICAmOmhvdmVyIHtcclxuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCB0cmFuc3BhcmVudDtcclxuICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgICYuc3VjY2VzcyB7XHJcbiAgICAgIGNvbG9yOiB2YXIoLS1jb2xvci1zdWNjZXNzLCAjNDNhZDQ4KTtcclxuICAgICAgYmFja2dyb3VuZDogdmFyKC0tY29sb3ItdHJhbnNwYXJlbnQtc3VjY2Vzcy1iYWNrZ3JvdW5kLCAjZWNmN2VkKTtcclxuXHJcbiAgICAgICY6aG92ZXIge1xyXG4gICAgICAgIGJhY2tncm91bmQ6IHZhcigtLWNvbG9yLXRyYW5zcGFyZW50LXN1Y2Nlc3MtaG92ZXIsICNmNmZiZjYpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgJi5kYW5nZXIge1xyXG4gICAgICBjb2xvcjogdmFyKC0tY29sb3ItZGFuZ2VyLCAjZTcwMDIwKTtcclxuICAgICAgYmFja2dyb3VuZDogdmFyKC0tY29sb3ItdHJhbnNwYXJlbnQtZGFuZ2VyLWJhY2tncm91bmQsICNmZGU2ZTkpO1xyXG5cclxuICAgICAgJjpob3ZlciB7XHJcbiAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tY29sb3ItdHJhbnNwYXJlbnQtZGFuZ2VyLWhvdmVyLCAjZmVmMmY0KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgICYubGluayB7XHJcbiAgICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xyXG4gICAgICBjb2xvcjogdmFyKC0tY29sb3ItbWFpbiwgIzc0NzQ3NCk7XHJcblxyXG4gICAgICAmOmhvdmVyIHtcclxuICAgICAgICBjb2xvcjogdmFyKC0tY29sb3ItbGluay1ob3ZlciwgIzRmNzVmNSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gICYuaWNvbi1vbmx5IHtcclxuICAgIHBhZGRpbmc6IDAgMTBweDtcclxuICB9XHJcblxyXG4gIC8vICBDYXNlIHdoZW4gd2UgbmVlZCBpY29ucyBzbWFsbGVyIHRoYW4gZGVmYXVsdFxyXG4gIC5pY29uIHtcclxuICAgIGhlaWdodDogdmFyKC0taWNvbi1zaXplLCAyNHB4KTtcclxuICAgIHdpZHRoOiB2YXIoLS1pY29uLXNpemUsIDI0cHgpO1xyXG4gIH1cclxuXHJcbiAgLnRleHQtd2l0aC1pY29uOm5vdCg6ZW1wdHkpIHtcclxuICAgIG1hcmdpbjogMCAxMHB4O1xyXG4gIH1cclxufVxyXG5cclxuLmJpZyB7XHJcbiAgbWluLWhlaWdodDogMTAwcHg7XHJcbiAgcGFkZGluZzogMTAgMjBweDtcclxuICBmb250LXNpemU6IDMycHg7XHJcbiAgYm9yZGVyLXJhZGl1czogMTBweDtcclxuICBib3gtc2hhZG93OiAwIDRweCA4cHggMCByZ2JhKDAsIDAsIDAsIDAuMiksIDAgNnB4IDIwcHggMCByZ2JhKDAsIDAsIDAsIDAuMTkpO1xyXG59XHJcblxyXG4ubWlkZGxlIHtcclxuICBtaW4taGVpZ2h0OiA3MHB4O1xyXG4gIHBhZGRpbmc6IDUgMjBweDtcclxuICBmb250LXNpemU6IDIycHg7XHJcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xyXG4gIGJveC1zaGFkb3c6IDAgNHB4IDhweCAwIHJnYmEoMCwgMCwgMCwgMC4yKSwgMCA2cHggMjBweCAwIHJnYmEoMCwgMCwgMCwgMC4xOSk7XHJcbn1cclxuXHJcbi5zbWFsbCB7XHJcbiAgbWluLWhlaWdodDogNDBweDtcclxuICBwYWRkaW5nOiAwIDIwcHg7XHJcbiAgZm9udC1zaXplOiAxMnB4O1xyXG4gIGJvcmRlci1yYWRpdXM6IDZweDtcclxuICBib3gtc2hhZG93OiAwIDRweCA4cHggMCByZ2JhKDAsIDAsIDAsIDAuMiksIDAgNnB4IDIwcHggMCByZ2JhKDAsIDAsIDAsIDAuMTkpO1xyXG59XHJcblxyXG4uaXMtc3F1YXJlIHtcclxuICAmLmJpZyB7XHJcbiAgICBoZWlnaHQ6IDEwMHB4O1xyXG4gICAgd2lkdGg6IDEwMHB4O1xyXG4gIH1cclxuICAmLm1pZGRsZSB7XHJcbiAgICBoZWlnaHQ6IDcwcHg7XHJcbiAgICB3aWR0aDogNzBweDtcclxuICB9XHJcbiAgJi5zbWFsbCB7XHJcbiAgICBoZWlnaHQ6IDQwcHg7XHJcbiAgICB3aWR0aDogNDBweDtcclxuICB9XHJcbn1cclxuIl19 */"],
        changeDetection: 0
      });
      /***/
    },

    /***/
    82024:
    /*!***********************************************************!*\
      !*** ./src/app/shared/components/button/button.module.ts ***!
      \***********************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "ButtonModule": function ButtonModule() {
          return (
            /* binding */
            _ButtonModule
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/common */
      54364);
      /* harmony import */


      var _button_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./button.component */
      90042);
      /* harmony import */


      var _angular_material_button__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/material/button */
      70781);
      /* harmony import */


      var _modules_icons_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../../modules/icons.module */
      6275);
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/core */
      2316);

      var _ButtonModule = function _ButtonModule() {
        _classCallCheck(this, _ButtonModule);
      };

      _ButtonModule.ɵfac = function ButtonModule_Factory(t) {
        return new (t || _ButtonModule)();
      };

      _ButtonModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineNgModule"]({
        type: _ButtonModule
      });
      _ButtonModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineInjector"]({
        imports: [[_angular_common__WEBPACK_IMPORTED_MODULE_3__.CommonModule, _angular_material_button__WEBPACK_IMPORTED_MODULE_4__.MatButtonModule, _modules_icons_module__WEBPACK_IMPORTED_MODULE_1__.IconsModule]]
      });

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵsetNgModuleScope"](_ButtonModule, {
          declarations: [_button_component__WEBPACK_IMPORTED_MODULE_0__.ButtonComponent],
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_3__.CommonModule, _angular_material_button__WEBPACK_IMPORTED_MODULE_4__.MatButtonModule, _modules_icons_module__WEBPACK_IMPORTED_MODULE_1__.IconsModule],
          exports: [_button_component__WEBPACK_IMPORTED_MODULE_0__.ButtonComponent]
        });
      })();
      /***/

    },

    /***/
    81305:
    /*!******************************************************************************!*\
      !*** ./src/app/shared/components/me-basic-alert/me-basic-alert.component.ts ***!
      \******************************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "MeBasicAlertComponent": function MeBasicAlertComponent() {
          return (
            /* binding */
            _MeBasicAlertComponent
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      2316);
      /* harmony import */


      var _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/material/snack-bar */
      68456);
      /* harmony import */


      var _me_basic_alert_interface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./me-basic-alert.interface */
      9103);
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/common */
      54364);
      /* harmony import */


      var angular_feather__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! angular-feather */
      54536);

      function MeBasicAlertComponent_i_feather_2_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](0, "i-feather", 12);
        }
      }

      function MeBasicAlertComponent_i_feather_3_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](0, "i-feather", 13);
        }
      }

      function MeBasicAlertComponent_i_feather_4_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](0, "i-feather", 14);
        }
      }

      function MeBasicAlertComponent_i_feather_5_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](0, "i-feather", 15);
        }
      }

      function MeBasicAlertComponent_a_12_Template(rf, ctx) {
        if (rf & 1) {
          var _r7 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "a", 16);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function MeBasicAlertComponent_a_12_Template_a_click_0_listener() {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r7);

            var ctx_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

            return ctx_r6.customEvent(ctx_r6.EVENT_TYPES.EXIT);
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("href", ctx_r4.data.externalLink, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵsanitizeUrl"]);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtextInterpolate"](ctx_r4.data.linkText);
        }
      }

      function MeBasicAlertComponent_a_13_Template(rf, ctx) {
        if (rf & 1) {
          var _r9 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "a", 17);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function MeBasicAlertComponent_a_13_Template_a_click_0_listener() {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r9);

            var ctx_r8 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

            return ctx_r8.customEvent(ctx_r8.EVENT_TYPES.EXIT);
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("href", ctx_r5.data.internalLink, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵsanitizeUrl"]);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtextInterpolate"](ctx_r5.data.linkText);
        }
      }

      var _MeBasicAlertComponent = /*#__PURE__*/function () {
        function _MeBasicAlertComponent(data) {
          _classCallCheck(this, _MeBasicAlertComponent);

          this.data = data;
          this.eventOccurs = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter();
          this.EVENT_TYPES = _me_basic_alert_interface__WEBPACK_IMPORTED_MODULE_0__.MeBasicAlertEventsTypes;
        }

        _createClass(_MeBasicAlertComponent, [{
          key: "customEvent",
          value: function customEvent(eventName) {
            this.eventOccurs.emit({
              eventName: eventName
            });
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {}
        }]);

        return _MeBasicAlertComponent;
      }();

      _MeBasicAlertComponent.ɵfac = function MeBasicAlertComponent_Factory(t) {
        return new (t || _MeBasicAlertComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_2__.MAT_SNACK_BAR_DATA));
      };

      _MeBasicAlertComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({
        type: _MeBasicAlertComponent,
        selectors: [["me-basic-alert"]],
        outputs: {
          eventOccurs: "eventOccurs"
        },
        decls: 15,
        vars: 11,
        consts: [[1, "icon-side"], ["name", "activity", 4, "ngIf"], ["name", "check-circle", 4, "ngIf"], ["name", "alert-octagon", 4, "ngIf"], ["name", "alert-triangle", 4, "ngIf"], [1, "text-side"], [1, "text-header"], [1, "text-content"], [1, "link-close-side"], ["target", "_blank", "rel", "noopener noreferrer", 3, "href", "click", 4, "ngIf"], [3, "href", "click", 4, "ngIf"], ["name", "x", 3, "click"], ["name", "activity"], ["name", "check-circle"], ["name", "alert-octagon"], ["name", "alert-triangle"], ["target", "_blank", "rel", "noopener noreferrer", 3, "href", "click"], [3, "href", "click"]],
        template: function MeBasicAlertComponent_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div");

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](1, "div", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](2, MeBasicAlertComponent_i_feather_2_Template, 1, 0, "i-feather", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](3, MeBasicAlertComponent_i_feather_3_Template, 1, 0, "i-feather", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](4, MeBasicAlertComponent_i_feather_4_Template, 1, 0, "i-feather", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](5, MeBasicAlertComponent_i_feather_5_Template, 1, 0, "i-feather", 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](6, "div", 5);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](7, "div", 6);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](8);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](9, "div", 7);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](10);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](11, "div", 8);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](12, MeBasicAlertComponent_a_12_Template, 2, 2, "a", 9);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](13, MeBasicAlertComponent_a_13_Template, 2, 2, "a", 10);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](14, "i-feather", 11);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function MeBasicAlertComponent_Template_i_feather_click_14_listener() {
              return ctx.customEvent(ctx.EVENT_TYPES.EXIT);
            });

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassMapInterpolate1"]("basic-alert box-sizing-border-box ", ctx.data.mode, "");

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx.data.mode === "regular");

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx.data.mode === "success");

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx.data.mode === "error");

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx.data.mode === "warning");

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](3);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtextInterpolate"](ctx.data.title);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtextInterpolate"](ctx.data.content);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx.data.linkText && ctx.data.externalLink);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx.data.linkText && ctx.data.internalLink);
          }
        },
        directives: [_angular_common__WEBPACK_IMPORTED_MODULE_3__.NgIf, angular_feather__WEBPACK_IMPORTED_MODULE_4__.FeatherComponent],
        styles: [".basic-alert[_ngcontent-%COMP%] {\n  width: 100%;\n  padding: 14px 16px;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  border-radius: 4px;\n}\n.basic-alert[_ngcontent-%COMP%]   .icon-side[_ngcontent-%COMP%] {\n  margin-right: 8px;\n}\n.basic-alert[_ngcontent-%COMP%]   .icon-side[_ngcontent-%COMP%]   .feather[_ngcontent-%COMP%] {\n  height: 40px;\n  width: 40px;\n  cursor: default;\n}\n.basic-alert[_ngcontent-%COMP%]   .icon-side[_ngcontent-%COMP%]   i-feather[_ngcontent-%COMP%] {\n  height: 40px;\n  width: 40px;\n  stroke-width: 1.5;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.basic-alert[_ngcontent-%COMP%]   .text-side[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  padding: 0 5px;\n}\n.basic-alert[_ngcontent-%COMP%]   .text-side[_ngcontent-%COMP%]   .text-header[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  font-size: 14px;\n  font-weight: 600;\n}\n.basic-alert[_ngcontent-%COMP%]   .text-side[_ngcontent-%COMP%]   .text-content[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  font-size: 12px;\n  color: #434349;\n  color: var(--color-body-font, #434349);\n}\n.basic-alert[_ngcontent-%COMP%]   .link-close-side[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n}\n.basic-alert[_ngcontent-%COMP%]   .link-close-side[_ngcontent-%COMP%]   a[_ngcontent-%COMP%] {\n  font-size: 12px;\n  font-weight: 600;\n  margin-right: 8px;\n  width: 90px;\n  max-width: 100px;\n  word-break: break-all;\n}\n.basic-alert[_ngcontent-%COMP%]   .link-close-side[_ngcontent-%COMP%]   i-feather[_ngcontent-%COMP%] {\n  height: 20px;\n  width: 20px;\n  stroke-width: 1.5;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-top: 4px;\n}\n.basic-alert.regular[_ngcontent-%COMP%] {\n  background-color: #e4e0f1;\n  background-color: var(--color-primary-background, #e4e0f1);\n  color: #5849e0;\n  color: var(--color-primary, #5849e0);\n  border: 1px solid #5849e0;\n  border: 1px solid var(--color-primary, #5849e0);\n}\n.basic-alert.success[_ngcontent-%COMP%] {\n  background-color: #e1ebe1;\n  background-color: var(--color-success-background, #e1ebe1);\n  color: #43ad48;\n  color: var(--color-success, #43ad48);\n  border: 1px solid #43ad48;\n  border: 1px solid var(--color-success, #43ad48);\n}\n.basic-alert.error[_ngcontent-%COMP%] {\n  background-color: #f1dadd;\n  background-color: var(--color-danger-background, #f1dadd);\n  color: #e70020;\n  color: var(--color-danger, #e70020);\n  border: 1px solid #e70020;\n  border: 1px solid var(--color-danger, #e70020);\n}\n.basic-alert.warning[_ngcontent-%COMP%] {\n  background-color: #f3ecdd;\n  background-color: var(--color-warning-background, #f3ecdd);\n  color: #ffb822;\n  color: var(--color-warning, #ffb822);\n  border: 1px solid #ffb822;\n  border: 1px solid var(--color-warning, #ffb822);\n}\n.basic-alert.light[_ngcontent-%COMP%] {\n  background-color: #ffffff;\n  background-color: var(--color-white, #ffffff);\n  color: #000000;\n  color: var(--color-black, #000000);\n  border: none;\n}\n.basic-alert.dark[_ngcontent-%COMP%] {\n  background-color: #282a3c;\n  background-color: var(--color-main-darker, #282a3c);\n  color: #ffffff;\n  color: var(--color-white, #ffffff);\n  border: none;\n}\n.basic-alert.dark[_ngcontent-%COMP%]   .text-side[_ngcontent-%COMP%]   .text-content[_ngcontent-%COMP%] {\n  color: #ffffff;\n  color: var(--color-white, #ffffff);\n}\n.basic-alert.outlined[_ngcontent-%COMP%] {\n  background-color: #ffffff;\n  background-color: var(--color-white, #ffffff);\n  color: #000000;\n  color: var(--color-black, #000000);\n  border: 1px solid #747474;\n  border: 1px solid var(--color-main, #747474);\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1lLWJhc2ljLWFsZXJ0LmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsV0FBQTtFQUNBLGtCQUFBO0VBQ0EsYUFBQTtFQUNBLG1CQUFBO0VBQ0EsbUJBQUE7RUFDQSxrQkFBQTtBQUNGO0FBQ0U7RUFDRSxpQkFBQTtBQUNKO0FBQ0k7RUFDRSxZQUFBO0VBQ0EsV0FBQTtFQUNBLGVBQUE7QUFDTjtBQUVJO0VBQ0UsWUFBQTtFQUNBLFdBQUE7RUFDQSxpQkFBQTtFQUNBLGFBQUE7RUFDQSx1QkFBQTtFQUNBLG1CQUFBO0FBQU47QUFJRTtFQUNFLGFBQUE7RUFDQSxzQkFBQTtFQUNBLFdBQUE7RUFDQSxjQUFBO0FBRko7QUFJSTtFQUNFLGFBQUE7RUFDQSxtQkFBQTtFQUNBLGVBQUE7RUFDQSxnQkFBQTtBQUZOO0FBS0k7RUFDRSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSxlQUFBO0VBQ0EsY0FBQTtFQUFBLHNDQUFBO0FBSE47QUFPRTtFQUNFLGFBQUE7RUFDQSxtQkFBQTtFQUNBLHVCQUFBO0VBQ0EsbUJBQUE7QUFMSjtBQU9JO0VBQ0UsZUFBQTtFQUNBLGdCQUFBO0VBQ0EsaUJBQUE7RUFDQSxXQUFBO0VBQ0EsZ0JBQUE7RUFDQSxxQkFBQTtBQUxOO0FBUUk7RUFDRSxZQUFBO0VBQ0EsV0FBQTtFQUNBLGlCQUFBO0VBQ0EsYUFBQTtFQUNBLHVCQUFBO0VBQ0EsbUJBQUE7RUFDQSxlQUFBO0FBTk47QUFVRTtFQUNFLHlCQUFBO0VBQUEsMERBQUE7RUFDQSxjQUFBO0VBQUEsb0NBQUE7RUFDQSx5QkFBQTtFQUFBLCtDQUFBO0FBUko7QUFXRTtFQUNFLHlCQUFBO0VBQUEsMERBQUE7RUFDQSxjQUFBO0VBQUEsb0NBQUE7RUFDQSx5QkFBQTtFQUFBLCtDQUFBO0FBVEo7QUFZRTtFQUNFLHlCQUFBO0VBQUEseURBQUE7RUFDQSxjQUFBO0VBQUEsbUNBQUE7RUFDQSx5QkFBQTtFQUFBLDhDQUFBO0FBVko7QUFhRTtFQUNFLHlCQUFBO0VBQUEsMERBQUE7RUFDQSxjQUFBO0VBQUEsb0NBQUE7RUFDQSx5QkFBQTtFQUFBLCtDQUFBO0FBWEo7QUFjRTtFQUNFLHlCQUFBO0VBQUEsNkNBQUE7RUFDQSxjQUFBO0VBQUEsa0NBQUE7RUFDQSxZQUFBO0FBWko7QUFlRTtFQUNFLHlCQUFBO0VBQUEsbURBQUE7RUFDQSxjQUFBO0VBQUEsa0NBQUE7RUFDQSxZQUFBO0FBYko7QUFnQk07RUFDRSxjQUFBO0VBQUEsa0NBQUE7QUFkUjtBQW1CRTtFQUNFLHlCQUFBO0VBQUEsNkNBQUE7RUFDQSxjQUFBO0VBQUEsa0NBQUE7RUFDQSx5QkFBQTtFQUFBLDRDQUFBO0FBakJKIiwiZmlsZSI6Im1lLWJhc2ljLWFsZXJ0LmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmJhc2ljLWFsZXJ0IHtcclxuICB3aWR0aDogMTAwJTtcclxuICBwYWRkaW5nOiAxNHB4IDE2cHg7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWRpcmVjdGlvbjogcm93O1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xyXG5cclxuICAuaWNvbi1zaWRlIHtcclxuICAgIG1hcmdpbi1yaWdodDogOHB4O1xyXG5cclxuICAgIC5mZWF0aGVyIHtcclxuICAgICAgaGVpZ2h0OiA0MHB4O1xyXG4gICAgICB3aWR0aDogNDBweDtcclxuICAgICAgY3Vyc29yOiBkZWZhdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIGktZmVhdGhlciB7XHJcbiAgICAgIGhlaWdodDogNDBweDtcclxuICAgICAgd2lkdGg6IDQwcHg7XHJcbiAgICAgIHN0cm9rZS13aWR0aDogMS41O1xyXG4gICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC50ZXh0LXNpZGUge1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIHBhZGRpbmc6IDAgNXB4O1xyXG5cclxuICAgIC50ZXh0LWhlYWRlciB7XHJcbiAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICAgIGZvbnQtc2l6ZTogMTRweDtcclxuICAgICAgZm9udC13ZWlnaHQ6IDYwMDtcclxuICAgIH1cclxuXHJcbiAgICAudGV4dC1jb250ZW50IHtcclxuICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgZm9udC1zaXplOiAxMnB4O1xyXG4gICAgICBjb2xvcjogdmFyKC0tY29sb3ItYm9keS1mb250LCAjNDM0MzQ5KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC5saW5rLWNsb3NlLXNpZGUge1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcblxyXG4gICAgYSB7XHJcbiAgICAgIGZvbnQtc2l6ZTogMTJweDtcclxuICAgICAgZm9udC13ZWlnaHQ6IDYwMDtcclxuICAgICAgbWFyZ2luLXJpZ2h0OiA4cHg7XHJcbiAgICAgIHdpZHRoOiA5MHB4O1xyXG4gICAgICBtYXgtd2lkdGg6IDEwMHB4O1xyXG4gICAgICB3b3JkLWJyZWFrOiBicmVhay1hbGw7XHJcbiAgICB9XHJcblxyXG4gICAgaS1mZWF0aGVyIHtcclxuICAgICAgaGVpZ2h0OiAyMHB4O1xyXG4gICAgICB3aWR0aDogMjBweDtcclxuICAgICAgc3Ryb2tlLXdpZHRoOiAxLjU7XHJcbiAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgICBtYXJnaW4tdG9wOiA0cHg7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAmLnJlZ3VsYXIge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tY29sb3ItcHJpbWFyeS1iYWNrZ3JvdW5kLCAjZTRlMGYxKTtcclxuICAgIGNvbG9yOiB2YXIoLS1jb2xvci1wcmltYXJ5LCAjNTg0OWUwKTtcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWNvbG9yLXByaW1hcnksICM1ODQ5ZTApO1xyXG4gIH1cclxuXHJcbiAgJi5zdWNjZXNzIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWNvbG9yLXN1Y2Nlc3MtYmFja2dyb3VuZCwgI2UxZWJlMSk7XHJcbiAgICBjb2xvcjogdmFyKC0tY29sb3Itc3VjY2VzcywgIzQzYWQ0OCk7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1jb2xvci1zdWNjZXNzLCAjNDNhZDQ4KTtcclxuICB9XHJcblxyXG4gICYuZXJyb3Ige1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tY29sb3ItZGFuZ2VyLWJhY2tncm91bmQsICNmMWRhZGQpO1xyXG4gICAgY29sb3I6IHZhcigtLWNvbG9yLWRhbmdlciwgI2U3MDAyMCk7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1jb2xvci1kYW5nZXIsICNlNzAwMjApO1xyXG4gIH1cclxuXHJcbiAgJi53YXJuaW5nIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWNvbG9yLXdhcm5pbmctYmFja2dyb3VuZCwgI2YzZWNkZCk7XHJcbiAgICBjb2xvcjogdmFyKC0tY29sb3Itd2FybmluZywgI2ZmYjgyMik7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1jb2xvci13YXJuaW5nLCAjZmZiODIyKTtcclxuICB9XHJcblxyXG4gICYubGlnaHQge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tY29sb3Itd2hpdGUsICNmZmZmZmYpO1xyXG4gICAgY29sb3I6IHZhcigtLWNvbG9yLWJsYWNrLCAjMDAwMDAwKTtcclxuICAgIGJvcmRlcjogbm9uZTtcclxuICB9XHJcblxyXG4gICYuZGFyayB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1jb2xvci1tYWluLWRhcmtlciwgIzI4MmEzYyk7XHJcbiAgICBjb2xvcjogdmFyKC0tY29sb3Itd2hpdGUsICNmZmZmZmYpO1xyXG4gICAgYm9yZGVyOiBub25lO1xyXG5cclxuICAgIC50ZXh0LXNpZGUge1xyXG4gICAgICAudGV4dC1jb250ZW50IHtcclxuICAgICAgICBjb2xvcjogdmFyKC0tY29sb3Itd2hpdGUsICNmZmZmZmYpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAmLm91dGxpbmVkIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWNvbG9yLXdoaXRlLCAjZmZmZmZmKTtcclxuICAgIGNvbG9yOiB2YXIoLS1jb2xvci1ibGFjaywgIzAwMDAwMCk7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1jb2xvci1tYWluLCAjNzQ3NDc0KTtcclxuICB9XHJcbn1cclxuIl19 */"]
      });
      /***/
    },

    /***/
    9103:
    /*!******************************************************************************!*\
      !*** ./src/app/shared/components/me-basic-alert/me-basic-alert.interface.ts ***!
      \******************************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "MODE": function MODE() {
          return (
            /* binding */
            _MODE
          );
        },

        /* harmony export */
        "MeBasicAlertEventsTypes": function MeBasicAlertEventsTypes() {
          return (
            /* binding */
            _MeBasicAlertEventsTypes
          );
        }
        /* harmony export */

      });

      var _MODE;

      (function (MODE) {
        MODE["regular"] = "regular";
        MODE["error"] = "error";
        MODE["success"] = "success";
        MODE["warning"] = "warning";
        MODE["light"] = "light";
        MODE["dark"] = "dark";
        MODE["outlined"] = "outlined";
      })(_MODE || (_MODE = {}));

      var _MeBasicAlertEventsTypes;

      (function (MeBasicAlertEventsTypes) {
        MeBasicAlertEventsTypes["EXIT"] = "exit";
      })(_MeBasicAlertEventsTypes || (_MeBasicAlertEventsTypes = {}));
      /***/

    },

    /***/
    21284:
    /*!***************************************************************************!*\
      !*** ./src/app/shared/components/me-basic-alert/me-basic-alert.module.ts ***!
      \***************************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "MeBasicAlertModule": function MeBasicAlertModule() {
          return (
            /* binding */
            _MeBasicAlertModule
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/common */
      54364);
      /* harmony import */


      var _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @angular/material/snack-bar */
      68456);
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/router */
      71258);
      /* harmony import */


      var _modules_icons_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../../modules/icons.module */
      6275);
      /* harmony import */


      var _me_basic_alert_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./me-basic-alert.component */
      81305);
      /* harmony import */


      var _me_basic_alert_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./me-basic-alert.service */
      94654);
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/core */
      2316);

      var _MeBasicAlertModule = function _MeBasicAlertModule() {
        _classCallCheck(this, _MeBasicAlertModule);
      };

      _MeBasicAlertModule.ɵfac = function MeBasicAlertModule_Factory(t) {
        return new (t || _MeBasicAlertModule)();
      };

      _MeBasicAlertModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineNgModule"]({
        type: _MeBasicAlertModule
      });
      _MeBasicAlertModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineInjector"]({
        providers: [_me_basic_alert_service__WEBPACK_IMPORTED_MODULE_2__.MeBasicAlertService],
        imports: [[_angular_common__WEBPACK_IMPORTED_MODULE_4__.CommonModule, _modules_icons_module__WEBPACK_IMPORTED_MODULE_0__.IconsModule, _angular_router__WEBPACK_IMPORTED_MODULE_5__.RouterModule, _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_6__.MatSnackBarModule]]
      });

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵsetNgModuleScope"](_MeBasicAlertModule, {
          declarations: [_me_basic_alert_component__WEBPACK_IMPORTED_MODULE_1__.MeBasicAlertComponent],
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_4__.CommonModule, _modules_icons_module__WEBPACK_IMPORTED_MODULE_0__.IconsModule, _angular_router__WEBPACK_IMPORTED_MODULE_5__.RouterModule, _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_6__.MatSnackBarModule],
          exports: [_me_basic_alert_component__WEBPACK_IMPORTED_MODULE_1__.MeBasicAlertComponent]
        });
      })();
      /***/

    },

    /***/
    94654:
    /*!****************************************************************************!*\
      !*** ./src/app/shared/components/me-basic-alert/me-basic-alert.service.ts ***!
      \****************************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "MeBasicAlertService": function MeBasicAlertService() {
          return (
            /* binding */
            _MeBasicAlertService
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! rxjs/operators */
      22663);
      /* harmony import */


      var _me_basic_alert_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./me-basic-alert.component */
      81305);
      /* harmony import */


      var _me_basic_alert_interface__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./me-basic-alert.interface */
      9103);
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/core */
      2316);
      /* harmony import */


      var _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/material/snack-bar */
      68456);

      var _MeBasicAlertService = /*#__PURE__*/function () {
        function _MeBasicAlertService(snackBar, basicAlertConfiguration) {
          _classCallCheck(this, _MeBasicAlertService);

          this.snackBar = snackBar;
          this.basicAlertConfiguration = basicAlertConfiguration;
        }

        _createClass(_MeBasicAlertService, [{
          key: "openBasicAlert",
          value: function openBasicAlert(data) {
            var _this105 = this;

            var closeAfter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3000;
            var barRef = this.snackBar.openFromComponent(_me_basic_alert_component__WEBPACK_IMPORTED_MODULE_0__.MeBasicAlertComponent, Object.assign(Object.assign({}, this.basicAlertConfiguration), {
              data: data
            }));
            barRef.instance.eventOccurs.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_2__.takeUntil)(barRef.afterDismissed())).subscribe(function (event) {
              if (event.eventName === _me_basic_alert_interface__WEBPACK_IMPORTED_MODULE_1__.MeBasicAlertEventsTypes.EXIT) {
                _this105.snackBar.dismiss();
              }
            });
            setTimeout(function () {
              _this105.snackBar.dismiss();
            }, closeAfter);
          }
        }]);

        return _MeBasicAlertService;
      }();

      _MeBasicAlertService.ɵfac = function MeBasicAlertService_Factory(t) {
        return new (t || _MeBasicAlertService)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"](_angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_4__.MatSnackBar), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"](_angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_4__.MatSnackBarConfig));
      };

      _MeBasicAlertService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineInjectable"]({
        token: _MeBasicAlertService,
        factory: _MeBasicAlertService.ɵfac
      });
      /***/
    },

    /***/
    6664:
    /*!****************************************************************!*\
      !*** ./src/app/shared/components/sidebar/sidebar.component.ts ***!
      \****************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "SidebarComponent": function SidebarComponent() {
          return (
            /* binding */
            _SidebarComponent
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/router */
      71258);
      /* harmony import */


      var _services_subscription_manager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../../services/subscription.manager */
      34463);
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      2316);
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/common */
      54364);
      /* harmony import */


      var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @ngx-translate/core */
      70325);

      var _c0 = function _c0(a0) {
        return {
          selected: a0
        };
      };

      function SidebarComponent_div_1_Template(rf, ctx) {
        if (rf & 1) {
          var _r3 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div", 2);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function SidebarComponent_div_1_Template_div_click_0_listener() {
            var restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r3);

            var item_r1 = restoredCtx.$implicit;

            var ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

            return ctx_r2.navigateTo(item_r1.url);
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵpipe"](2, "translate");

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var item_r1 = ctx.$implicit;

          var ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵpureFunction1"](4, _c0, item_r1.url === ctx_r0.selectedRoute));

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtextInterpolate1"](" ", _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵpipeBind1"](2, 2, item_r1.displayValue), " ");
        }
      }

      var _SidebarComponent = /*#__PURE__*/function () {
        function _SidebarComponent(router, activateRouter) {
          _classCallCheck(this, _SidebarComponent);

          this.router = router;
          this.activateRouter = activateRouter;
          this.subs = new _services_subscription_manager__WEBPACK_IMPORTED_MODULE_0__.SubscriptionManager();
          this.routes = [{
            url: 'dashboard',
            displayValue: 'dashboard'
          }, {
            url: 'invoice-create-edit/framing',
            displayValue: 'framing'
          }, {
            url: 'invoice-create-edit/glassing',
            displayValue: 'glassing'
          }, {
            url: 'invoice-create-edit',
            displayValue: 'invoiceCreate'
          }, {
            url: 'invoices',
            displayValue: 'inProgress'
          }, {
            url: 'search',
            displayValue: 'search'
          }, {
            url: 'debts',
            displayValue: 'debts'
          }, {
            url: 'settings',
            displayValue: 'settings'
          }, {
            url: 'exit',
            displayValue: 'exit'
          }];
          this.selectedRoute = '';
        }

        _createClass(_SidebarComponent, [{
          key: "ngOnInit",
          value: function ngOnInit() {
            var _this106 = this;

            this.subs.sink.$routerEvents = this.router.events.subscribe(function (val) {
              if (val instanceof _angular_router__WEBPACK_IMPORTED_MODULE_2__.NavigationEnd && val.url) {
                _this106.routes.forEach(function (route) {
                  if (route.url.startsWith(val.url.replace('/', ''))) {
                    _this106.selectedRoute = val.url.replace('/', '');
                  }
                });
              }
            });
            this.routes.forEach(function (route) {
              if (route.url.startsWith(_this106.router.url.replace('/', ''))) {
                _this106.selectedRoute = _this106.router.url.replace('/', '');
              }
            });
          }
        }, {
          key: "setSelectedRoute",
          value: function setSelectedRoute(url) {}
        }, {
          key: "navigateTo",
          value: function navigateTo(url) {
            if (url === 'exit') {// TODO izadji iz programa
            }

            this.router.navigate([url]);
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.subs.unsubscribe();
          }
        }]);

        return _SidebarComponent;
      }();

      _SidebarComponent.ɵfac = function SidebarComponent_Factory(t) {
        return new (t || _SidebarComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_router__WEBPACK_IMPORTED_MODULE_2__.Router), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_router__WEBPACK_IMPORTED_MODULE_2__.ActivatedRoute));
      };

      _SidebarComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({
        type: _SidebarComponent,
        selectors: [["app-sidebar"]],
        decls: 2,
        vars: 1,
        consts: [[1, "main-container"], ["class", "item", 3, "ngClass", "click", 4, "ngFor", "ngForOf"], [1, "item", 3, "ngClass", "click"]],
        template: function SidebarComponent_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](1, SidebarComponent_div_1_Template, 3, 6, "div", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngForOf", ctx.routes);
          }
        },
        directives: [_angular_common__WEBPACK_IMPORTED_MODULE_3__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_3__.NgClass],
        pipes: [_ngx_translate_core__WEBPACK_IMPORTED_MODULE_4__.TranslatePipe],
        styles: [".main-container[_ngcontent-%COMP%] {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  padding: 20px;\n}\n.main-container[_ngcontent-%COMP%]   .item[_ngcontent-%COMP%] {\n  cursor: pointer;\n  border-radius: 6px;\n  margin-bottom: 10px;\n  font-size: 20px;\n  text-align: center;\n  padding: 20px;\n  font-weight: 600;\n  color: var(--color-primary);\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n}\n.main-container[_ngcontent-%COMP%]   .item[_ngcontent-%COMP%]:hover {\n  background-color: var(--sidebar-menu-item-hover);\n  color: white;\n}\n.main-container[_ngcontent-%COMP%]   .selected[_ngcontent-%COMP%] {\n  background-color: var(--color-primary-hover);\n  color: white;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNpZGViYXIuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxZQUFBO0VBQ0EsYUFBQTtFQUNBLHNCQUFBO0VBQ0EsYUFBQTtBQUNGO0FBQ0U7RUFDRSxlQUFBO0VBQ0Esa0JBQUE7RUFDQSxtQkFBQTtFQUNBLGVBQUE7RUFDQSxrQkFBQTtFQUNBLGFBQUE7RUFDQSxnQkFBQTtFQUNBLDJCQUFBO0VBQ0EsNEVBQUE7QUFDSjtBQUVFO0VBQ0UsZ0RBQUE7RUFDQSxZQUFBO0FBQUo7QUFHRTtFQUNFLDRDQUFBO0VBQ0EsWUFBQTtBQURKIiwiZmlsZSI6InNpZGViYXIuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIubWFpbi1jb250YWluZXIge1xyXG4gIGhlaWdodDogMTAwJTtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgcGFkZGluZzogMjBweDtcclxuXHJcbiAgLml0ZW0ge1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNnB4O1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIHBhZGRpbmc6IDIwcHg7XHJcbiAgICBmb250LXdlaWdodDogNjAwO1xyXG4gICAgY29sb3I6IHZhcigtLWNvbG9yLXByaW1hcnkpO1xyXG4gICAgYm94LXNoYWRvdzogMCA0cHggOHB4IDAgcmdiYSgwLCAwLCAwLCAwLjIpLCAwIDZweCAyMHB4IDAgcmdiYSgwLCAwLCAwLCAwLjE5KTtcclxuICB9XHJcblxyXG4gIC5pdGVtOmhvdmVyIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXNpZGViYXItbWVudS1pdGVtLWhvdmVyKTtcclxuICAgIGNvbG9yOiB3aGl0ZTtcclxuICB9XHJcblxyXG4gIC5zZWxlY3RlZCB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1jb2xvci1wcmltYXJ5LWhvdmVyKTtcclxuICAgIGNvbG9yOiB3aGl0ZTtcclxuICB9XHJcbn1cclxuIl19 */"]
      });
      /***/
    },

    /***/
    57189:
    /*!*************************************************************!*\
      !*** ./src/app/shared/components/sidebar/sidebar.module.ts ***!
      \*************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "SidebarModule": function SidebarModule() {
          return (
            /* binding */
            _SidebarModule
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/common */
      54364);
      /* harmony import */


      var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @ngx-translate/core */
      70325);
      /* harmony import */


      var src_app_shared_components_button_button_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! src/app/shared/components/button/button.module */
      82024);
      /* harmony import */


      var _sidebar_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./sidebar.component */
      6664);
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/core */
      2316);

      var _SidebarModule = function _SidebarModule() {
        _classCallCheck(this, _SidebarModule);
      };

      _SidebarModule.ɵfac = function SidebarModule_Factory(t) {
        return new (t || _SidebarModule)();
      };

      _SidebarModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineNgModule"]({
        type: _SidebarModule
      });
      _SidebarModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineInjector"]({
        imports: [[_angular_common__WEBPACK_IMPORTED_MODULE_3__.CommonModule, src_app_shared_components_button_button_module__WEBPACK_IMPORTED_MODULE_0__.ButtonModule, _ngx_translate_core__WEBPACK_IMPORTED_MODULE_4__.TranslateModule]]
      });

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵsetNgModuleScope"](_SidebarModule, {
          declarations: [_sidebar_component__WEBPACK_IMPORTED_MODULE_1__.SidebarComponent],
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_3__.CommonModule, src_app_shared_components_button_button_module__WEBPACK_IMPORTED_MODULE_0__.ButtonModule, _ngx_translate_core__WEBPACK_IMPORTED_MODULE_4__.TranslateModule],
          exports: [_sidebar_component__WEBPACK_IMPORTED_MODULE_1__.SidebarComponent]
        });
      })();
      /***/

    },

    /***/
    6275:
    /*!************************************************!*\
      !*** ./src/app/shared/modules/icons.module.ts ***!
      \************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "IconsModule": function IconsModule() {
          return (
            /* binding */
            _IconsModule
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var angular_feather__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! angular-feather */
      54536);
      /* harmony import */


      var angular_feather_icons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! angular-feather/icons */
      94848);
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      2316);

      var _IconsModule = function _IconsModule() {
        _classCallCheck(this, _IconsModule);
      };

      _IconsModule.ɵfac = function IconsModule_Factory(t) {
        return new (t || _IconsModule)();
      };

      _IconsModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: _IconsModule
      });
      _IconsModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        imports: [[angular_feather__WEBPACK_IMPORTED_MODULE_1__.FeatherModule.pick(angular_feather_icons__WEBPACK_IMPORTED_MODULE_2__.allIcons)], angular_feather__WEBPACK_IMPORTED_MODULE_1__.FeatherModule]
      });

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](_IconsModule, {
          imports: [angular_feather__WEBPACK_IMPORTED_MODULE_1__.FeatherModule],
          exports: [angular_feather__WEBPACK_IMPORTED_MODULE_1__.FeatherModule]
        });
      })();
      /***/

    },

    /***/
    93561:
    /*!*********************************************************!*\
      !*** ./src/app/shared/services/app-settings.service.ts ***!
      \*********************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "AppSettings": function AppSettings() {
          return (
            /* binding */
            _AppSettings
          );
        },

        /* harmony export */
        "AppSettingsService": function AppSettingsService() {
          return (
            /* binding */
            _AppSettingsService
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! rxjs */
      76491);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! rxjs */
      25160);
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/core */
      2316);

      var _AppSettings = function _AppSettings() {
        _classCallCheck(this, _AppSettings);
      };

      var _AppSettingsService = /*#__PURE__*/function () {
        function _AppSettingsService() {
          _classCallCheck(this, _AppSettingsService);

          this.$settings = new rxjs__WEBPACK_IMPORTED_MODULE_0__.BehaviorSubject(new _AppSettings());
          this.settings = this.$settings.asObservable(); // TODO get settings from database
          // this.$settings.next();

          this.$settings.next({
            formatSettings: {
              thousandsNumberSign: '.',
              decimalNumberSign: ',',
              numberFormat: '.000',
              dateFormat: 'dd.mm.yyyy',
              currencyFormat: 'RSD',
              currencyDisplayValue: 'din'
            },
            applicationDesign: {
              buttonSize: 'big',
              fontSize: 16,
              fontSizeList: 12,
              language: 'rs'
            },
            printSettings: {
              copies: 1,
              footer: 'Hvala',
              header: 'StakloRam',
              printer: 'Neki stmapac'
            }
          });
        }

        _createClass(_AppSettingsService, [{
          key: "updateSettings",
          value: function updateSettings(settings) {
            var _this107 = this;

            return new rxjs__WEBPACK_IMPORTED_MODULE_1__.Observable(function (subscriber) {
              // TODO save to database
              _this107.$settings.next(settings);

              return subscriber.next();
            });
          }
        }]);

        return _AppSettingsService;
      }();

      _AppSettingsService.ɵfac = function AppSettingsService_Factory(t) {
        return new (t || _AppSettingsService)();
      };

      _AppSettingsService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineInjectable"]({
        token: _AppSettingsService,
        factory: _AppSettingsService.ɵfac,
        providedIn: 'root'
      });
      /***/
    },

    /***/
    78794:
    /*!***************************************************!*\
      !*** ./src/app/shared/services/global.service.ts ***!
      \***************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "GlobalService": function GlobalService() {
          return (
            /* binding */
            _GlobalService
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _components_me_basic_alert_me_basic_alert_interface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../components/me-basic-alert/me-basic-alert.interface */
      9103);
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/core */
      2316);
      /* harmony import */


      var _components_me_basic_alert_me_basic_alert_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../components/me-basic-alert/me-basic-alert.service */
      94654);
      /* harmony import */


      var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @ngx-translate/core */
      70325);

      var _GlobalService = /*#__PURE__*/function () {
        // private readonly _loaderComponent = new BehaviorSubject<boolean>(false);
        // readonly isActivatedLoader$ = this._loaderComponent.asObservable();
        // readonly refreshDropzone = new Subject<void>();
        function _GlobalService( // private sweetAlertService: MeSweetAlertService,
        basicAlertService, translateService) {
          _classCallCheck(this, _GlobalService);

          this.basicAlertService = basicAlertService;
          this.translateService = translateService;
        } // get isActivatedLoader(): boolean {
        //   return this._loaderComponent.getValue();
        // }
        // activateLoader(): void {
        //   this._loaderComponent.next(true);
        // }
        // deactivateLoader(): void {
        //   this._loaderComponent.next(false);
        // }
        // -- BASIC ALERT: general usage


        _createClass(_GlobalService, [{
          key: "showBasicAlert",
          value: function showBasicAlert(mode, title, content) {
            var basicAlertData = {
              mode: mode,
              title: title,
              content: content
            };
            this.basicAlertService.openBasicAlert(basicAlertData);
          } // BASIC ALERT: default error handling

        }, {
          key: "showBasicAlertDefaultError",
          value: function showBasicAlertDefaultError(error) {
            this.showBasicAlert(_components_me_basic_alert_me_basic_alert_interface__WEBPACK_IMPORTED_MODULE_0__.MODE.error, error.error.title, error.error.details);
          } // BASIC ALERT: vast usage empty file error

        }, {
          key: "showBasicAlertEmptyFile",
          value: function showBasicAlertEmptyFile() {
            this.showBasicAlert(_components_me_basic_alert_me_basic_alert_interface__WEBPACK_IMPORTED_MODULE_0__.MODE.error, this.translateService.instant('emptyDocument'), this.translateService.instant('noFile'));
          }
        }]);

        return _GlobalService;
      }();

      _GlobalService.ɵfac = function GlobalService_Factory(t) {
        return new (t || _GlobalService)(_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"](_components_me_basic_alert_me_basic_alert_service__WEBPACK_IMPORTED_MODULE_1__.MeBasicAlertService), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"](_ngx_translate_core__WEBPACK_IMPORTED_MODULE_3__.TranslateService));
      };

      _GlobalService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineInjectable"]({
        token: _GlobalService,
        factory: _GlobalService.ɵfac,
        providedIn: 'root'
      });
      /***/
    },

    /***/
    34463:
    /*!*********************************************************!*\
      !*** ./src/app/shared/services/subscription.manager.ts ***!
      \*********************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "SubscriptionManager": function SubscriptionManager() {
          return (
            /* binding */
            _SubscriptionManager
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! rxjs */
      71003);
      /* harmony import */


      var uuid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! uuid */
      13918);
      /* harmony import */


      var uuid__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(uuid__WEBPACK_IMPORTED_MODULE_0__);

      var _SubscriptionManager = /*#__PURE__*/function () {
        function _SubscriptionManager() {
          _classCallCheck(this, _SubscriptionManager);

          this._subs = {};
          this._subsHandler = new Proxy(this._subs, {
            get: function get(subs, prop) {
              return subs[prop];
            },
            set: function set(subs, prop, value) {
              if (subs[prop]) {
                subs[prop].unsubscribe();
              }

              subs[prop] = value;
              return true;
            }
          });
        } // tslint:disable-next-line: no-any


        _createClass(_SubscriptionManager, [{
          key: "sink",
          get: function get() {
            return this._subsHandler;
          } // tslint:disable-next-line: no-any
          ,
          set: function set(subscription) {
            this._subs[(0, uuid__WEBPACK_IMPORTED_MODULE_0__.v4)()] = subscription;
          }
        }, {
          key: "unsubscribe",
          value: function unsubscribe() {
            for (var prop in this._subs) {
              if (this._subs.hasOwnProperty(prop) && this._subs[prop] && this._subs[prop] instanceof rxjs__WEBPACK_IMPORTED_MODULE_1__.Subscriber) {
                this._subs[prop].unsubscribe();
              }
            }
          }
        }]);

        return _SubscriptionManager;
      }();
      /***/

    }
  }]);
})();
//# sourceMappingURL=src_app_features_main-layout_main-layout_module_ts-es5.js.map